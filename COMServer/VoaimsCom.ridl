// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 2017/08/08 10:14:55 AM (- $Rev: 12980 $, 13270771).

[
  uuid(F13D4EA3-3431-41BD-9AC3-B590D97717D6),
  version(1.0),
  helpstring("VoaimsCom Library")

]
library VoaimsCom
{

  importlib("stdole2.tlb");

  interface IVoaimsComObject;
  coclass VoaimsComObject;
  interface IYieldModel;
  interface IYieldModelData;
  interface IRunConfigurationData;
  interface INetworkElementData;
  interface INetworkFeaturesData;
  interface IYieldModelCapability;
  interface IMinimumFlowConstraintList;
  interface ILossFeatureList;
  interface ISpecifiedDemandFeatureList;
  interface IMinMaxFlowConstraintList;
  interface IPumpingFeatureList;
  interface IDiversionFeatureList;
  interface IPhysicalFlowConstraintList;
  interface IIFRFeatureList;
  interface IIrrigationAreaList;
  interface IPowerPlantList;
  interface IMasterControlFeatureList;
  interface ISpecifiedInflowFeatureList;
  interface ISpecifiedInflowFeature;
  interface IChannelPenalty;
  interface IChannelPenaltyList;
  interface IGeneralFlowChannel;
  interface IChannelList;
  interface IMinimumFlowConstraint;
  interface IMinMaxFlowConstraint;
  interface IPumpingFeature;
  interface ILossFeature;
  interface ISpecifiedDemandFeature;
  interface IDiversionFeature;
  interface IPhysicalFlowConstraint;
  interface IIFRFeature;
  interface IIrrigationArea;
  interface IPowerPlant;
  interface IMasterControlFeature;
  interface IReservoirDataList;
  interface IReservoirPenaltyList;
  interface IReservoirPenaltyCounts;
  interface IReservoirPenaltyZoneData;
  interface IReservoirZoneElevationsData;
  interface IFixedElevation;
  interface IDrawDownElevation;
  interface IInitialLevelsData;
  interface IReservoirPenalty;
  interface IReservoirConfigurationData;
  interface IReservoirEvaporationsData;
  interface IReservoirElevationsData;
  interface IReservoirVolumeData;
  interface IReservoirAreaData;
  interface IReservoirData;
  interface IParamReference;
  interface IParamSetup;
  interface IModelCalendar;
  interface IWaterDemandCategory;
  interface IWaterDemandConfiguration;
  interface IWaterDemandFeature;
  interface IWaterDemandFeatureList;
  interface IChangeList;
  interface IParameterChange;
  interface IMetaData;
  interface IConfiguration;
  interface IWeatherEvents;
  interface IChannelArea;
  interface IChannelAreaList;
  interface IOutputData;
  interface IWaterUseOutputProportion;
  interface IOutputDataSelection;
  interface IUserCategory;
  interface IAllocationLevel;
  interface ICoefficient;
  interface ISubSystem;
  interface ISupportChannel;
  interface ISupportSubSystem;
  interface IDemandDefinition;
  interface IAllocationDefinition;
  interface IAllocationDefinitionsList;
  interface IPlanningModelData;
  interface IPreprocessor;
  interface IPreProcessorData;
  interface IFixedPosition;
  interface ISpecificOrder;
  interface IReservoirTimeControl;
  interface ISwitchDefinition;
  interface ISwitchDefinitionsList;
  interface IChannelTimeControl;
  interface IChannelSwitchControl;
  interface IDataFilePaths;
  interface IChangeGroupElement;
  interface IChangeGroup;
  interface IDemandCentreGrowthFactors;
  interface IMinMaxChannelGrowthFactors;
  interface IHydrologyGrowthFactors;
  interface IGrowthFactors;
  interface IDisbenefitFunctionDefinition;
  interface ICorrespondingChannel;
  interface IReturnFlowChannel;
  interface IReturnFlowChannelData;
  interface IWaterUsage;
  interface IIrrigationBlock;
  interface IIrrigationBlockList;
  interface IWetland;
  interface IWetlandList;
  interface IDischargeCurve;
  interface ISandAquifer;
  interface IKFactors;
  interface ISubmergedOutlet;
  interface IPumpStation;
  interface IYMDemandCentreList;
  interface IYMDemandCentre;
  interface IStreamFlowReduction;
  interface IStreamFlowReductionList;
  interface IYMDemandCentreReturnFlowFeature;
  interface IYMDemandCentreReturnFlowFeatureList;
  interface IOpenCast;
  interface IUnderground;
  interface ISlurryDump;
  interface IMine;
  interface IMineList;
  interface IWRYMRunOptions;
  interface IYieldModelIterationTracker;
  interface IIterationEventHandler;
  interface ICurtailedChannel;
  interface IDroughtRestriction;
  interface ICurtailmentAndDrought;
  interface ISummaryOutputData;
  interface ISumOutBlob;
  interface IGroundWater;
  interface IGroundWaterList;
  interface IImplementedNetworkFeatures;
  interface IReservoirAreaGroup;
  interface IReservoirAreaGroupList;
  interface IMineSubCatchmentList;
  interface IMineSubCatchment;
  interface IChannelTariff;
  interface ITariffCalculationData;
  interface IPlanningModel;
  interface IMinMaxUpperBoundChannel;
  interface IWQConstriantsChannel;
  interface IWQConstraintData;
  interface IMultiResMultiChannelCurtail;
  interface IMultiResMultiChannelCurtailList;
  interface IPlanningMine;
  interface IPlanningMineGrowthFactor;
  interface IPlanningOpenCast;
  interface ILoadGeneration;
  interface IPlanningSlurryDump;


  [
    uuid(F0239580-9EED-48D3-B55E-8D621381BEF6),
    version(1.0)
  ]
  enum TNodeType
  {
    ntUnknown = 0,
    ntReservoir = 1,
    ntNodeWithInflow = 2,
    ntNodeWithoutInflow = 3,
    ntIrrigationNode = 4,
    ntWetlandNode = 5,
    ntDemandCentreNode = 6,
    ntMinePolutionControlDam = 7,
    ntMineUndergroundDam = 8,
    ntMineNode = 9,
    ntGroundWater = 10,
    ntAbstractionNode = 11,
    ntCollectionNode = 12,
    ntBaseFlowNode = 13
  };

  [
    uuid(387D729D-CC62-436A-A4D8-D252657AF992),
    version(1.0)
  ]
  enum TDeleteAction
  {
    daDeleteAll = 0,
    daClearData = 1,
    daContinue = 2,
    daCancel = 3
  };

  [
    uuid(DA5B5548-58B2-4F35-81DB-4C97A7BCDA2C),
    version(1.0)
  ]
  enum TOutputDataType
  {
    btNone = 0,
    btMonthEndReservoirVolume = 1,
    btMonthEndReservoirElevation = 2,
    btNetBasinRunoffIntoResArea = 3,
    btRainfallOnReservoirSurface = 4,
    btGrossEvaporationLossFromReservoir = 5,
    btMonthlyAveragePowerFlow = 6,
    btMonthlyAverageSpillFlow = 7,
    btMonthlyAverageStackedCapacity = 8,
    btMonthlyAverageStackedEnergy = 9,
    btMonthlyAverageIrrigationDeficits = 10,
    btMonthlyAverageChannelFlow = 11,
    btMonthlyPumpingEnergy = 12,
    btYieldFailurePerYearPerSequence = 13,
    btOutputSummary = 14,
    btAnualFirmYieldDemands = 15,
    btAnualFirmEnergyDemands = 16,
    btAnualFirmSelectedYieldDemands = 17,
    btAnualNonFirmYieldDemands = 18,
    btAnualSecondaryYieldDemands = 19,
    btAnualTotalSystemPumpingEnergy = 20,
    btAnualFullSystemSupplyVolume = 21,
    btAnualAverageInflow = 22,
    btFirmYieldRecurrenceInterval = 24,
    btNumberOfFailureSequence = 25,
    btCriticalPeriodsNumber = 26,
    btCriticalPeriodsLength = 27,
    btCriticalPeriodsDeficit = 28,
    btCriticalPeriodsAvarage = 29,
    btDeficitPropotion = 30,
    btReservoirChannel = 31,
    btReservoirStorage = 32,
    btChannelFlowDeficit = 33,
    btChannelSuppAndDeficitPerc = 34,
    btChannelSuppAndCompliencePerc = 35,
    btSequencesWithFailures = 23,
    btIFRRequirementAndSupply = 36,
    btIFRFlow = 37,
    btIFRRequirement = 38,
    btIFRRequirementAndFlow = 39,
    btRequirementAndSupplyDifference = 40,
    btDefinedAndSimulatedData = 41,
    btDefinedIFR = 42,
    btDefinedReferenceflowVsIFRRelationship = 43,
    btIFRStats = 44,
    btIFRHistogram = 45,
    btIFRData = 46,
    btDefinedAndRequired = 47,
    btReservoirWaterBalance = 48,
    btMonthlyChannelWaterBalance = 49,
    btAnnualChannelWaterBalancel = 50,
    btCurtailments = 51,
    btDemandSupply = 52,
    btSubSystemPlot = 53,
    btSupplyPlot = 54,
    btChannelPumping = 55,
    btReservoirPlot = 56
  };

  [
    uuid(4E6827C8-53F5-4BEB-8080-DCA521BB991A),
    version(1.0)
  ]
  enum TOutputTimeStep
  {
    otsMonthly = 0,
    otsAnnual = 1,
    otsSequence = 2,
    otsMonthlyCumulative = 3,
    otsAnnualCumulative = 4
  };

  [
    uuid(766F3DC2-6A6D-4A80-8D74-B48FC27BF7CF),
    version(1.0)
  ]
  enum TOutputUnits
  {
    ouPerSecond = 0,
    ouMcmPerMonthOrYear = 1,
    ouPercentage = 2,
    ouMCM = 3,
    ouMeters = 4,
    ouMegaLitersPerDay = 5,
    ouTotalPercentage = 6,
    ouLivePercentage = 7
  };

  [
    uuid(C70256C8-6A27-4FB2-A6DD-61018A57E2F7),
    version(1.0)
  ]
  enum TOutputValueType
  {
    ovtNone = 0,
    ovtSupply = 1,
    ovtDemand = 2,
    ovtDeficits = 3,
    ovtDemandAndSupply = 4,
    ovtAllocated = 5
  };

  [
    uuid(8BC6CF50-5FB0-452C-807D-605B3A5EF063),
    version(1.0)
  ]
  enum TChangeElementType
  {
    cetChangeList = 0,
    cetInactiveList = 1,
    cetActiveList = 2,
    cetInactiveGroup = 3,
    cetActiveGroup = 4,
    cetAlienList = 5,
    cetNone = 6
  };

  [
    uuid(5175DB10-A4F1-40DB-B343-E7A608A71924),
    version(1.0)
  ]
  enum TPhysicalFlowConstraintGroup
  {
    pfcgNone = 0,
    pfcgDischargeCurve = 1,
    pfcgKFactors = 2,
    pfcgSandAquifer = 3,
    pfcgSubmergedOutlet = 4,
    pfcgPumpStation = 5
  };

  [
    uuid(E93C7BD3-9A01-42D2-988E-C5EE7A8F9FB1),
    version(1.0)
  ]
  enum TPhysicalFlowConstraintType
  {
    pfcstNone = 0,
    pfcstElevation = 1,
    pfcstDischarge = 2,
    pfcstChannelNumber = 3,
    pfcstKFactor = 4,
    pfcstHeadDifference = 5,
    pfcstAquiferFlow = 6,
    pfcstDownStreamNodeInflow = 7,
    pfcstRiverDepth = 8,
    pfcstElevationDifference = 9,
    pfcstMonthlyAverageInflow = 10,
    pfcstMonthlyAverageDivertedFlow = 11,
    pfcstPumpingHead = 12,
    pfcstPumpingDischarge = 13
  };

  [
    uuid(22D8B544-2030-45EB-8F6A-A4C235D71081),
    version(1.0)
  ]
  enum TIFRFeatureReferenceFlowType
  {
    ifrtMonthly = 0,
    ifrrftAnnual = 1,
    ifrtNone = -1
  };

  [
    uuid(34ABD1E3-3B0C-4605-9031-8AB81C619FA7),
    version(1.0)
  ]
  enum TChannelType
  {
    ctNone = 0,
    ctChannelPenaltyStructure = 1,
    ctMasterControlChannel = 2,
    ctPowerPlantChannel = 3,
    ctIrrigationChannel = 4,
    ctDiversionChannel = 5,
    ctMinimumFlowChannel = 6,
    ctLossChannel = 7,
    ctMinMaxChannel = 8,
    clPumpingChannel = 9,
    ctInflowChannel = 10,
    ctDemandChannel = 11,
    ctGeneralChannel = 12,
    ctChannelCreateSummary = 13,
    ctIrrigationBlockInflowChannel = 14,
    ctIrrigationBlockReturnFlowChannel = 15,
    ctWetlandInflowChannel = 16,
    ctWetlandOutflowChannel = 17,
    ctIFRChannel = 18,
    ctPhysicalFlowConstraintChannel = 19,
    ctDemandCentreReturnFlowChannel = 20,
    ctReclaimationPlantLossChannel = 21,
    ctMineToPCDChannel = 22,
    ctMineToRiverDChannel = 23,
    ctMineToUndergroundChannel = 24,
    ctAquiferInflowChannel = 25,
    ctAquiferExcessInterflowChannel = 26,
    ctGroundWaterBaseflowChannel = 27,
    ctAbstractionFromAquiferChannel = 28,
    ctAbstractionFromBaseFlowChannel = 29,
    ctGroundWaterBaseFlowRemainderChannel = 30,
    ctOutFlowToDownstreamAquiferChannel = 31,
    ctSurfaceRunoffChannel = 32,
    ctGroundWaterAbstractionChannel = 33,
    ctOutflowToNetworkChannel = 34,
    ctInflowFromUpstreamAquiferChannel = 35
  };

  [
    uuid(6FF93F2C-AD2E-4075-A4B7-B572E0F86185),
    version(1.0)
  ]
  enum TOutputAverageType
  {
    oatMonthly = 0,
    oatAnnual = 1,
    oatSequence = 2,
    oatPeriod = 3
  };

  [
    uuid(B2F574B3-576F-4B34-ABC2-3C551D1677FD),
    version(1.0)
  ]
  enum TOutputPlotOptions
  {
    poNone = 0,
    poCondenced = 1,
    poNotCondenced = 2,
    poCumulative = 3,
    poNotCumulative = 4
  };

  [
    uuid(4E3474C5-9181-416D-9ED1-E94F8253E870),
    version(1.0)
  ]
  enum TNetworkElementType
  {
    votNone = 0,
    votMasterControl = 1,
    votReservoir = 2,
    votNodeWithInflow = 3,
    votNodeWithoutInflow = 4,
    votChannel = 5,
    votIrrigationArea = 6,
    votPowerPlant = 7,
    votWetland = 8,
    votChannelArea = 9,
    votIrrigationBlock = 10,
    votReservoirAreaGroup = 11,
    votReviewSubSystemCurtailment = 12,
    votReviewDemandSupply = 13,
    votReviewTotalSystemStorage = 14,
    votReviewInterBasinSupport = 15,
    votReviewMonthlyReservoirResult = 16,
    votReviewMonthlyChannelResult = 17,
    votReviewCollateOutputFiles = 18,
    votReviewDamStorage = 19,
    votReviewDemands = 20,
    votReviewSubSystems = 21,
    votReviewSubSystemStorage = 22,
    votTotalSystemCurtailment = 23
  };

  [
    uuid(6B7577C7-A55E-4BDA-BB2B-2ECD273ACA13),
    version(1.0)
  ]
  enum TOutputSourceDialog
  {
    osdNone = 0,
    osdNetworkVisualiser = 1,
    osdGrid = 2,
    osdGraph = 3,
    osdWaterBalance = 4,
    osdComplianceGrid = 5,
    osdComplianceGraph = 6,
    osdDistributionCurve = 7,
    osdChannelDemands = 8,
    osdChannelComparison = 9,
    osdDeficitDuration = 10,
    osdMonthlyDeficit = 11,
    osdWaterUseComplianceGraph = 12,
    osdWRPMBoxPlotGrid = 13,
    osdWRPMGrid = 14,
    osdWRPMGraph = 15,
    osdComparisonReservoir = 16
  };

  [
    uuid(CA00B656-0A3C-4F99-8B5D-5D66F4A42765),
    version(1.0)
  ]
  enum TSensitivity
  {
    stvNone = 0,
    stvAbsolute = 1,
    stvPercentage = 2
  };

  [
    uuid(E32AC184-D23F-486C-B868-55DD59687AEF),
    version(1.0),
    helpstring("Interface for VoaimsComObject Object"),
    oleautomation
  ]
  interface IVoaimsComObject: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall Logon([in] BSTR AUserID, [in] BSTR APassword, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000066)]
    HRESULT _stdcall SelectStudy([in] BSTR AModel, [in] BSTR AStudy, [in] BSTR ASubArea, [in] BSTR AScenario, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000067)]
    HRESULT _stdcall YieldModel([out, retval] IYieldModel** Value);
    [id(0x00000068)]
    HRESULT _stdcall Initialise([out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000069)]
    HRESULT _stdcall INIFileName([out, retval] BSTR* Value);
    [id(0x0000006B)]
    HRESULT _stdcall HandleVNVEvent([in]  IUnknown* AVisioApp, [in]  IUnknown* AVisioDoc, [in] long AVisioEventCode, [in]  IUnknown* ASourceObj, [in] long AEventID, [in] long AEventSeqNum, [in]  IUnknown* ASubjectObj, [in] VARIANT AMoreInfo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006C)]
    HRESULT _stdcall ProcessVNVSpecial([in] BSTR AParameter, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006D)]
    HRESULT _stdcall IsServerInitialised([out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006E)]
    HRESULT _stdcall IsUserLoggedOn([out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006F)]
    HRESULT _stdcall IsStudySelected([out, retval] VARIANT_BOOL* AResult);
    [id(0x00000070)]
    HRESULT _stdcall LoggedOnUserName([out, retval] BSTR* AResult);
    [id(0x00000071)]
    HRESULT _stdcall SelectedStudyKeys([out, retval] BSTR* AResult);
    [id(0x00000072)]
    HRESULT _stdcall UnlockScenario([in] BSTR AStudyAreaCode, [in] BSTR AModelCode, [in] BSTR ASubAreaCode, [in] BSTR AScenarioCode, [out, retval] VARIANT_BOOL* AValue);
    [id(0x00000073)]
    HRESULT _stdcall CloseScenario([out, retval] VARIANT_BOOL* AValue);
    [id(0x00000074)]
    HRESULT _stdcall Logoff([out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PlanningModel([out, retval] IPlanningModel** Value);
  };

  [
    uuid(17E8AE84-5FF8-4703-9131-EC8BC8D964B8),
    version(1.0),
    oleautomation
  ]
  interface IYieldModel: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall DoValidateAllFiles([out, retval] VARIANT_BOOL* Value);
    [id(0x00000066)]
    HRESULT _stdcall DoExportAllFiles([out, retval] VARIANT_BOOL* Value);
    [id(0x00000067)]
    HRESULT _stdcall DoImportAllFiles([out, retval] VARIANT_BOOL* Value);
    [id(0x00000068)]
    HRESULT _stdcall DoClearModelData([out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall DoWizardNewReservoir([out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall DoWizardNewNodeWithInflow([out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall DoInvokeWizard([out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall DoWizardRunYieldHistoric([out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006D)]
    HRESULT _stdcall DoWizardRunYieldStochastic([out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006E)]
    HRESULT _stdcall DoWizardNewChannel([in] BSTR AUpDownNodeNumbers, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006F)]
    HRESULT _stdcall YieldModelData([out, retval] IYieldModelData** Value);
    [id(0x00000070)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000071)]
    HRESULT _stdcall DoExportAllFilesAndRunModel([in] VARIANT_BOOL ASilent, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000072)]
    HRESULT _stdcall GetYieldChannelYield([out, retval] double* Value);
    [id(0x00000073)]
    HRESULT _stdcall DoRunModel([out, retval] VARIANT_BOOL* AResult);
    [id(0x00000074)]
    HRESULT _stdcall DoCreateReservoir([out, retval] IReservoirData** Value);
    [id(0x00000075)]
    HRESULT _stdcall DoDeleteReservoir([in] long AReservoirNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000076)]
    HRESULT _stdcall DoCreateNodeWithInflow([out, retval] IReservoirData** Value);
    [id(0x00000077)]
    HRESULT _stdcall DoDeleteNodeWithInflow([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000078)]
    HRESULT _stdcall DoCreateNodeWithoutInflow([out, retval] IReservoirData** Value);
    [id(0x00000079)]
    HRESULT _stdcall DoDeleteNodeWithoutInflow([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007A)]
    HRESULT _stdcall DoCreateChannel([in] long AUpStreamNodeNumber, [in] long ADownStreamNodeNumber, [out, retval] IGeneralFlowChannel** Value);
    [id(0x0000007B)]
    HRESULT _stdcall DoDeleteChannel([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007C)]
    HRESULT _stdcall DoConvertChannel([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007D)]
    HRESULT _stdcall DoCreateMinimumFlowFeature([in] long AChannelNumber, [out, retval] IMinimumFlowConstraint** Value);
    [id(0x0000007E)]
    HRESULT _stdcall DoCreateMinMaxFlowFeature([in] long AChannelNumber, [out, retval] IMinMaxFlowConstraint** Value);
    [id(0x0000007F)]
    HRESULT _stdcall DoCreatePumpingFeature([in] long AChannelNumber, [out, retval] IPumpingFeature** Value);
    [id(0x00000080)]
    HRESULT _stdcall DoCreateLossFeature([in] long AChannelNumber, [out, retval] ILossFeature** Value);
    [id(0x00000081)]
    HRESULT _stdcall DoCreateSpecifiedDemandFeature([in] long AChannelNumber, [out, retval] ISpecifiedDemandFeature** Value);
    [id(0x00000082)]
    HRESULT _stdcall DoCreateDiversionFeature([in] long AChannelNumber, [out, retval] IDiversionFeature** Value);
    [id(0x00000083)]
    HRESULT _stdcall DoCreateSpecifiedInflowFeature([in] long AChannelNumber, [out, retval] ISpecifiedInflowFeature** Value);
    [id(0x00000084)]
    HRESULT _stdcall DoCreateIFRFeature([in] long AChannelNumber, [in] enum TIFRFeatureReferenceFlowType AIFRType, [out, retval] IIFRFeature** Value);
    [id(0x00000085)]
    HRESULT _stdcall DoCreatePhysicalFlowConstraint([in] long AChannelNumber, [out, retval] IPhysicalFlowConstraint** Value);
    [id(0x00000086)]
    HRESULT _stdcall DoCreateIrrigationArea([out, retval] IIrrigationArea** Value);
    [id(0x00000087)]
    HRESULT _stdcall DoCreatePowerPlant([out, retval] IPowerPlant** Value);
    [id(0x00000088)]
    HRESULT _stdcall DoDeletePumpingFeature([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000089)]
    HRESULT _stdcall DoDeleteIFRFeature([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000008A)]
    HRESULT _stdcall DoDeletePhysicalFlowConstraint([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000008B)]
    HRESULT _stdcall DoDeleteIrrigationArea([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000008C)]
    HRESULT _stdcall DoDeletePowerPlant([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000008D)]
    HRESULT _stdcall DoCreateMasterControlFeature([in] long AChannelNumber, [out, retval] IMasterControlFeature** Value);
    [id(0x0000008E)]
    HRESULT _stdcall DoDeleteMasterControlFeature([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000008F)]
    HRESULT _stdcall DoCreateWaterDemandFeature([in] long AChannelNumber, [out, retval] IWaterDemandFeature** Value);
    [id(0x00000090)]
    HRESULT _stdcall DoDeleteWaterDemandFeature([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000091)]
    HRESULT _stdcall ViewInputReservoirDialog([in] long AResevoirNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000092)]
    HRESULT _stdcall ViewInputNodeWithInflowDialog([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000093)]
    HRESULT _stdcall ViewInputChannelDialog([in] long AChannelNumber, [out, retval] VARIANT_BOOL* AValue);
    [id(0x00000094)]
    HRESULT _stdcall HandleVNVEvent([in]  IUnknown* AVisioApp, [in]  IUnknown* AVisioDoc, [in] long AVisioEventCode, [in]  IUnknown* ASourceObj, [in] long AEventID, [in] long AEventSeqNum, [in]  IUnknown* ASubjectObj, [in] VARIANT AMoreInfo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000096)]
    HRESULT _stdcall ProcessVNVSpecial([in] BSTR AParameter, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000097)]
    HRESULT _stdcall DoCreateIrrigationBlock([out, retval] IIrrigationBlock** Value);
    [id(0x00000098)]
    HRESULT _stdcall DoDeleteIrrigationBlock([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000099)]
    HRESULT _stdcall DoCreateWetland([out, retval] IWetland** Value);
    [id(0x0000009A)]
    HRESULT _stdcall DoDeleteWetland([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000009B)]
    HRESULT _stdcall ViewInputIrrigationBlockDialog([in] long AIrrigationBlockNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000009C)]
    HRESULT _stdcall ViewInputWetlandDialog([in] long AWetlandNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000009D)]
    HRESULT _stdcall DoCreateYMDemandCentre([out, retval] IYMDemandCentre** Value);
    [id(0x0000009E)]
    HRESULT _stdcall DoDeleteYMDemandCentre([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000A0)]
    HRESULT _stdcall DoCreateSFRSubCatchment([out, retval] IStreamFlowReduction** Value);
    [id(0x000000A1)]
    HRESULT _stdcall DoDeleteSFRSubCatchment([in] long AIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000A2)]
    HRESULT _stdcall ViewInputDemandCentreDialog([in] long AYMDemandCentreNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000A5)]
    HRESULT _stdcall ReadFirmYieldFromDebugFile([out, retval] double* AResult);
    [id(0x000000A6)]
    HRESULT _stdcall DoCreateMine([out, retval] IMine** Value);
    [id(0x000000A7)]
    HRESULT _stdcall DoDeleteMine([in] long AMineNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000A8)]
    HRESULT _stdcall DoCreateOpenCast([in] long AMineNumber, [out, retval] IOpenCast** Value);
    [id(0x000000A9)]
    HRESULT _stdcall DoDeleteOpenCast([in] long AMineNumber, [in] long AOpenCastIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000AA)]
    HRESULT _stdcall DoCreateUnderGround([in] long AMineNumber, [out, retval] IUnderground** Value);
    [id(0x000000AB)]
    HRESULT _stdcall DoDeleteUnderGround([in] long AMineNumber, [in] long AUnderGroundIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000AC)]
    HRESULT _stdcall DoCreateSlurryDump([in] long AMineNumber, [out, retval] ISlurryDump** Value);
    [id(0x000000AD)]
    HRESULT _stdcall DoDeleteSlurryDump([in] long AMineNumber, [in] long ASlurryDumpIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000AE)]
    HRESULT _stdcall ViewInputConfigurationDialog([in] BSTR AViewName, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000AF)]
    HRESULT _stdcall ImportOutputFiles([out, retval] VARIANT_BOOL* Value);
    [id(0x000000B0)]
    HRESULT _stdcall ViewInputNodeWithoutInflowDialog([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B1)]
    HRESULT _stdcall ViewInputPowerPlantDialog([in] long APowerPlantNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B2)]
    HRESULT _stdcall ViewInputIrrigationAreaDialog([in] long AIrrigationAreaNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B3)]
    HRESULT _stdcall ViewInputStreamFlowReductionDialog([in] long AStreamFlowReductionNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B4)]
    HRESULT _stdcall ViewInputMineDialog([in] long AMineNodeNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B5)]
    HRESULT _stdcall ViewInputMinePCDDamDialog([in] long APCDDamNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B6)]
    HRESULT _stdcall ViewInputMineUndergroundDamDialog([in] long AUndergroundDamNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B7)]
    HRESULT _stdcall ViewInputMasterControlChannelDialog([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B8)]
    HRESULT _stdcall ViewOutputMasterControlChannelDialog([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000B9)]
    HRESULT _stdcall ViewOutputReservoirDialog([in] long AResevoirNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000BA)]
    HRESULT _stdcall ViewOutputNodeWithInflowDialog([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000BB)]
    HRESULT _stdcall ViewOutputNodeWithoutInflowDialog([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000BC)]
    HRESULT _stdcall ViewOutputChannelDialog([in] long AChannelNumber, [out, retval] VARIANT_BOOL* AValue);
    [id(0x000000BD)]
    HRESULT _stdcall ViewOutputPowerPlantDialog([in] long APowerPlantNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000BE)]
    HRESULT _stdcall ViewOutputIrrigationAreaDialog([in] long AIrrigationAreaNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000BF)]
    HRESULT _stdcall ViewOutputIrrigationBlockDialog([in] long AIrrigationBlockNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C0)]
    HRESULT _stdcall ViewOutputWetlandDialog([in] long AWetlandNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C1)]
    HRESULT _stdcall ViewOutputStreamFlowReductionDialog([in] long AStreamFlowReductionNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C2)]
    HRESULT _stdcall ViewOutputDemandCentreDialog([in] long AYMDemandCentreNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C3)]
    HRESULT _stdcall ViewOutputMineDialog([in] long AMineNodeNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C4)]
    HRESULT _stdcall ViewOutputMinePCDDamDialog([in] long APCDDamNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C5)]
    HRESULT _stdcall ViewOutputMineUndergroundDamDialog([in] long AUndergroundDamNr, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000095)]
    HRESULT _stdcall WRYMRunOptions([out, retval] IWRYMRunOptions** Value);
    [propget, id(0x0000009F)]
    HRESULT _stdcall YieldModelIterationTracker([out, retval] IYieldModelIterationTracker** Value);
    [id(0x000000A3)]
    HRESULT _stdcall DoCreateDroughtRestriction([out, retval] IDroughtRestriction** Value);
    [id(0x000000A4)]
    HRESULT _stdcall DoDeleteDroughtRestriction([in] long AIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000C6)]
    HRESULT _stdcall DoCopyIFRFeature([in] long AChannelNumber, [out, retval] IIFRFeature** Value);
    [id(0x000000C7)]
    HRESULT _stdcall DoCopyChannel([in] long AChannelNumber, [out, retval] IGeneralFlowChannel** Value);
    [id(0x000000C8)]
    HRESULT _stdcall DoCopyMinimumFlowFeature([in] long AChannelNumber, [out, retval] IMinimumFlowConstraint** Value);
    [id(0x000000C9)]
    HRESULT _stdcall DoCopyMinMaxFlowFeature([in] long AChannelNumber, [out, retval] IMinMaxFlowConstraint** Value);
    [id(0x000000CA)]
    HRESULT _stdcall DoCopyLossFeature([in] long AChannelNumber, [out, retval] ILossFeature** Value);
    [id(0x000000CB)]
    HRESULT _stdcall DoCopySpecifiedDemandFeature([in] long AChannelNumber, [out, retval] ISpecifiedDemandFeature** Value);
    [id(0x000000CC)]
    HRESULT _stdcall DoCopyDiversionFeature([in] long AChannelNumber, [out, retval] IDiversionFeature** Value);
    [id(0x000000CD)]
    HRESULT _stdcall DoCopySpecifiedInflowFeature([in] long AChannelNumber, [out, retval] ISpecifiedInflowFeature** Value);
    [id(0x000000CE)]
    HRESULT _stdcall CopyPhysicalFlowConstraint([in] long AChannelNumber, [out, retval] IPhysicalFlowConstraint** Value);
    [id(0x000000CF)]
    HRESULT _stdcall DoCopyMasterControlFeature([in] long AChannelNumber, [out, retval] IMasterControlFeature** Value);
    [id(0x000000D0)]
    HRESULT _stdcall DoCopyPumpingFeature([in] long AChannelNumber, [out, retval] IPumpingFeature** Value);
    [id(0x000000D1)]
    HRESULT _stdcall DoCopyWaterDemandFeature([in] long AChannelNumber, [out, retval] IWaterDemandFeature** Value);
    [id(0x000000D2)]
    HRESULT _stdcall DoCopyPowerPlant([in] long AChannelNumber, [out, retval] IPowerPlant** Value);
    [id(0x000000D3)]
    HRESULT _stdcall DoCopyIrrigationArea([in] long AFeatureID, [out, retval] IIrrigationArea** Value);
    [id(0x000000D4)]
    HRESULT _stdcall DoCopyIrrigationBlock([in] long AFeatureID, [out, retval] IIrrigationBlock** Value);
    [id(0x000000D5)]
    HRESULT _stdcall DoCopyWetland([in] long AWetlandID, [out, retval] IWetland** Value);
    [id(0x000000D6)]
    HRESULT _stdcall DoCopySFRSubCatchment([in] long AStreamFlowReductionID, [out, retval] IStreamFlowReduction** Value);
    [id(0x000000D7)]
    HRESULT _stdcall DoCopyYMDemandCentre([in] long ANodeNumber, [out, retval] IYMDemandCentre** Value);
    [id(0x000000D8)]
    HRESULT _stdcall DoCopyMine([in] long AMineNumber, [out, retval] IMine** Value);
    [id(0x000000D9)]
    HRESULT _stdcall DoCopyReservoir([in] long AReservoirNumber, [out, retval] IReservoirData** Value);
    [id(0x000000DA)]
    HRESULT _stdcall DoRunStorageVsYield([in] long AReservoirNumber, [in] BSTR AStartingStorageCommaText, [in, out] BSTR* AMinTargetDraftCommaText, [in, out] BSTR* AMaxTargetDraftCommaText, [in, out] BSTR* AYieldCommaText, [out, retval] VARIANT_BOOL* AResult);
    [id(0x000000DB)]
    HRESULT _stdcall DoCreateGroundWater([out, retval] IGroundWater** Value);
    [id(0x000000DC)]
    HRESULT _stdcall DoDeleteGroundWater([in] long AGroundWaterID, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000DD)]
    HRESULT _stdcall DoCopyReservoirFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000DE)]
    HRESULT _stdcall DoCopyChannelFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000DF)]
    HRESULT _stdcall DoCopyIrrigationAreaFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E0)]
    HRESULT _stdcall DoCopyPowerPlantFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E1)]
    HRESULT _stdcall DoCopyIrrigationBlockFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E2)]
    HRESULT _stdcall DoCopyWetlandFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E3)]
    HRESULT _stdcall DoCopyYMDemandCentreFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E4)]
    HRESULT _stdcall DoCopySFRFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E5)]
    HRESULT _stdcall DoCopyMineFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E6)]
    HRESULT _stdcall DoCopyGroundWaterFromScenario([out, retval] VARIANT_BOOL* Value);
    [id(0x000000E7)]
    HRESULT _stdcall ViewInputGroundwaterDialog([in] long AAquiferNodeNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E8)]
    HRESULT _stdcall ViewOutputGroundwaterDialog([in] long AAquiferNodeNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000E9)]
    HRESULT _stdcall StudyPropertiesCommaText([out, retval] BSTR* Value);
  };

  [
    uuid(6035552B-AA3B-4234-9154-F52D6552B2E4),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYieldModelData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RunConfigurationData([out, retval] IRunConfigurationData** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NetworkElementData([out, retval] INetworkElementData** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall NetworkFeaturesData([out, retval] INetworkFeaturesData** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall YieldModelCapability([out, retval] IYieldModelCapability** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ParamSetup([out, retval] IParamSetup** Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ModelCalendar([out, retval] IModelCalendar** Value);
    [id(0x0000006C)]
    HRESULT _stdcall HydrologyFilesForCatchment([in] long ACatchmentRef, [in, out] BSTR* AFilesNamesContainer);
    [propget, id(0x0000006E)]
    HRESULT _stdcall DataFilePaths([out, retval] IDataFilePaths** Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall HydrologyFileData([in] BSTR AFileName, [out, retval] BSTR* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall DemandFileData([in] BSTR AFileName, [out, retval] BSTR* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall OutputData([out, retval] IOutputData** Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall ImplementedNetworkFeatures([out, retval] IImplementedNetworkFeatures** Value);
  };

  [
    uuid(DD181D34-A59E-4F38-B728-CF5309A1A78D),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IRunConfigurationData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MonthNameByIndex([in] long Index, [out, retval] BSTR* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall MonthNameByIndex([in] long Index, [in] BSTR Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MonthDaysByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall MonthDaysByIndex([in] long Index, [in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MonthIndexByName([in] BSTR Name, [out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall MonthIndexByName([in] BSTR Name, [in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall MonthDaysByName([in] BSTR Name, [out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall MonthDaysByName([in] BSTR Name, [in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall StartYearGregorian([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall StartYearGregorian([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall StartYearOther([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall StartYearOther([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall YearsInAnalysis([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall YearsInAnalysis([in] long Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall PeriodsInAnalysis([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall PeriodsInAnalysis([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall StartMonthNumber([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall StartMonthNumber([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall CalculateHistoricFirmYield([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall CalculateHistoricFirmYield([in] long Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall LimitOption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall LimitOption([in] VARIANT_BOOL Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall RunSequenceType([out, retval] BSTR* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall RunSequenceType([in] BSTR Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MultiplePeriodLengths([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MultiplePeriodLengths([in] VARIANT_BOOL Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall ReduceSequences([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall ReduceSequences([in] VARIANT_BOOL Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall HistoricSequenceStartYear([out, retval] long* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall HistoricSequenceStartYear([in] long Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall StartSequenceNumber([out, retval] long* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall StartSequenceNumber([in] long Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall NumberOfSequencesInAnalysis([out, retval] long* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall NumberOfSequencesInAnalysis([in] long Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall GeneratedFlowFlag([out, retval] long* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall GeneratedFlowFlag([in] long Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall SequenceToBeAnalysedByIndex([in] long Index, [out, retval] long* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall SequenceToBeAnalysedByIndex([in] long Index, [in] long Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall DebugLevel([out, retval] long* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall DebugLevel([in] long Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall StartDebugPeriod([out, retval] long* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall StartDebugPeriod([in] long Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall EndDebugPeriod([out, retval] long* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall EndDebugPeriod([in] long Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall StartDebugDate([out, retval] DATE* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall StartDebugDate([in] DATE Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall EndDebugDate([out, retval] DATE* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall EndDebugDate([in] DATE Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall OutputSummaryLevel([out, retval] long* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall OutputSummaryLevel([in] long Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall CreateDataFile([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall CreateDataFile([in] VARIANT_BOOL Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall CreateYieldFile([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000080)]
    HRESULT _stdcall CreateYieldFile([in] VARIANT_BOOL Value);
    [propget, id(0x00000081)]
    HRESULT _stdcall CreatePlotFile([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000081)]
    HRESULT _stdcall CreatePlotFile([in] VARIANT_BOOL Value);
    [propget, id(0x00000082)]
    HRESULT _stdcall TargetYieldByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x00000082)]
    HRESULT _stdcall TargetYieldByIndex([in] long Index, [in] double Value);
    [propget, id(0x00000083)]
    HRESULT _stdcall MaximumYieldByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x00000083)]
    HRESULT _stdcall MaximumYieldByIndex([in] long Index, [in] double Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall TargetPowerByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x00000084)]
    HRESULT _stdcall TargetPowerByIndex([in] long Index, [in] double Value);
    [id(0x00000085)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000086)]
    HRESULT _stdcall HasBeenPopulated([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000087)]
    HRESULT _stdcall OutputDataHasBeenPopulated([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000088)]
    HRESULT _stdcall TargetRecurrenceInterval([out, retval] long* Value);
    [propput, id(0x00000088)]
    HRESULT _stdcall TargetRecurrenceInterval([in] long Value);
    [propget, id(0x0000008A)]
    HRESULT _stdcall YieldRunTitle1([out, retval] BSTR* Value);
    [propput, id(0x0000008A)]
    HRESULT _stdcall YieldRunTitle1([in] BSTR Value);
    [propget, id(0x00000089)]
    HRESULT _stdcall YieldRunTitle2([out, retval] BSTR* Value);
    [propput, id(0x00000089)]
    HRESULT _stdcall YieldRunTitle2([in] BSTR Value);
    [propget, id(0x0000008B)]
    HRESULT _stdcall YieldRunTitle3([out, retval] BSTR* Value);
    [propput, id(0x0000008B)]
    HRESULT _stdcall YieldRunTitle3([in] BSTR Value);
    [id(0x0000008C)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x0000008D)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000008E)]
    HRESULT _stdcall NrOfActiveLoadCases([out, retval] long* Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall DetailedOption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall DetailedOption([in] VARIANT_BOOL Value);
    [propget, id(0x0000008F)]
    HRESULT _stdcall SupplyOption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000008F)]
    HRESULT _stdcall SupplyOption([in] VARIANT_BOOL Value);
    [propget, id(0x00000090)]
    HRESULT _stdcall AnnualSummary([out, retval] BSTR* Value);
    [propput, id(0x00000090)]
    HRESULT _stdcall AnnualSummary([in] BSTR Value);
    [propget, id(0x00000091)]
    HRESULT _stdcall EconomicOption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000091)]
    HRESULT _stdcall EconomicOption([in] VARIANT_BOOL Value);
    [propget, id(0x00000092)]
    HRESULT _stdcall PlanningSummary([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000092)]
    HRESULT _stdcall PlanningSummary([in] VARIANT_BOOL Value);
    [propget, id(0x00000093)]
    HRESULT _stdcall InputSummary([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000093)]
    HRESULT _stdcall InputSummary([in] VARIANT_BOOL Value);
    [propget, id(0x00000094)]
    HRESULT _stdcall WaterQualityOption([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000094)]
    HRESULT _stdcall WaterQualityOption([in] VARIANT_BOOL Value);
    [propget, id(0x00000095)]
    HRESULT _stdcall PeriodsPerYear([out, retval] long* Value);
    [propput, id(0x00000095)]
    HRESULT _stdcall PeriodsPerYear([in] long Value);
    [propget, id(0x00000096)]
    HRESULT _stdcall CalendarStartMonth([out, retval] long* Value);
    [propput, id(0x00000096)]
    HRESULT _stdcall CalendarStartMonth([in] long Value);
    [propget, id(0x00000097)]
    HRESULT _stdcall ShortTermPlanningOption([out, retval] BSTR* Value);
    [propput, id(0x00000097)]
    HRESULT _stdcall ShortTermPlanningOption([in] BSTR Value);
    [propget, id(0x00000098)]
    HRESULT _stdcall HydroPowerOption([out, retval] BSTR* Value);
    [propput, id(0x00000098)]
    HRESULT _stdcall HydroPowerOption([in] BSTR Value);
    [propget, id(0x00000099)]
    HRESULT _stdcall AllocationControlOption([out, retval] BSTR* Value);
    [propput, id(0x00000099)]
    HRESULT _stdcall AllocationControlOption([in] BSTR Value);
    [propget, id(0x0000009A)]
    HRESULT _stdcall NrOfDecisionMonths([out, retval] long* Value);
    [propput, id(0x0000009A)]
    HRESULT _stdcall NrOfDecisionMonths([in] long Value);
    [propget, id(0x0000009B)]
    HRESULT _stdcall DecisionMonthByIndex([in] long AIndex, [out, retval] long* AValue);
    [propput, id(0x0000009B)]
    HRESULT _stdcall DecisionMonthByIndex([in] long AIndex, [in] long AValue);
    [propget, id(0x0000009C)]
    HRESULT _stdcall DecisionTypeByIndex([in] long AIndex, [out, retval] BSTR* AValue);
    [propput, id(0x0000009C)]
    HRESULT _stdcall DecisionTypeByIndex([in] long AIndex, [in] BSTR AValue);
    [propget, id(0x0000009D)]
    HRESULT _stdcall HydroPowerIndicatorByIndex([in] long AIndex, [out, retval] BSTR* AValue);
    [propput, id(0x0000009D)]
    HRESULT _stdcall HydroPowerIndicatorByIndex([in] long AIndex, [in] BSTR AValue);
    [propget, id(0x0000009E)]
    HRESULT _stdcall HydroUnitsCode([out, retval] BSTR* Value);
    [propput, id(0x0000009E)]
    HRESULT _stdcall HydroUnitsCode([in] BSTR Value);
    [propget, id(0x0000009F)]
    HRESULT _stdcall RandomNumberOption([out, retval] long* Value);
    [propput, id(0x0000009F)]
    HRESULT _stdcall RandomNumberOption([in] long Value);
    [propget, id(0x000000A0)]
    HRESULT _stdcall ParamFileName([out, retval] BSTR* Value);
    [propput, id(0x000000A0)]
    HRESULT _stdcall ParamFileName([in] BSTR Value);
  };

  [
    uuid(A91BF235-D16E-4A40-B6C3-33C7513B63BC),
    version(1.0),
    dual,
    oleautomation
  ]
  interface INetworkElementData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ReservoirList([out, retval] IReservoirDataList** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirPenaltyStructureList([out, retval] IReservoirPenaltyList** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelList([out, retval] IChannelList** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ChannelPenaltyList([out, retval] IChannelPenaltyList** Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReservoirAreaGroupList([out, retval] IReservoirAreaGroupList** Value);
  };

  [
    uuid(66B4A7FB-983F-4691-9004-C5714B4C7D02),
    version(1.0),
    dual,
    oleautomation
  ]
  interface INetworkFeaturesData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MinimumFlowConstraintList([out, retval] IMinimumFlowConstraintList** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall LossFeatureList([out, retval] ILossFeatureList** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SpecifiedDemandFeatureList([out, retval] ISpecifiedDemandFeatureList** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall MinMaxFlowConstraintList([out, retval] IMinMaxFlowConstraintList** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall PumpingFeatureList([out, retval] IPumpingFeatureList** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall DiversionFeatureList([out, retval] IDiversionFeatureList** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PhysicalFlowConstraintList([out, retval] IPhysicalFlowConstraintList** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall IFRFeatureList([out, retval] IIFRFeatureList** Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall IrrigationAreaList([out, retval] IIrrigationAreaList** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall PowerPlantList([out, retval] IPowerPlantList** Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall MasterControlFeatureList([out, retval] IMasterControlFeatureList** Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall SpecifiedInflowFeatureList([out, retval] ISpecifiedInflowFeatureList** Value);
    [id(0x00000071)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall WaterDemandFeatureList([out, retval] IWaterDemandFeatureList** Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall WaterDemandConfiguration([out, retval] IWaterDemandConfiguration** Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall ChannelAreaList([out, retval] IChannelAreaList** Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall IrrigationBlockList([out, retval] IIrrigationBlockList** Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall WetlandList([out, retval] IWetlandList** Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall YMDemandCentreList([out, retval] IYMDemandCentreList** Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall StreamFlowReductionList([out, retval] IStreamFlowReductionList** Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall MineList([out, retval] IMineList** Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall CurtailmentAndDrought([out, retval] ICurtailmentAndDrought** Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall GroundWaterList([out, retval] IGroundWaterList** Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall MineSubCatchmentList([out, retval] IMineSubCatchmentList** Value);
  };

  [
    uuid(935785F3-EDB9-4B27-986A-42CF99AA4C04),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYieldModelCapability: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall MaximumNumberOfChannels([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall MinimumNumberOfChannels([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MaximumChannelNumberofLossChannels([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall MinimumChannelNumberofLossChannels([out, retval] long* Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall MaximumChannelNumberofMinMaxChannel([out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall MinimumChannelNumberofMinMaxChannel([out, retval] long* Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall MaximumChannelNumberofPumpingChannels([out, retval] long* Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall MinimumChannelNumberofPumpingChannels([out, retval] long* Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall MaximumChannelsCount([out, retval] long* Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall MinimumChannelsCount([out, retval] long* Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall MaximumConstraintsChannelNumber([out, retval] long* Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall MinimumConstraintsChannelNumber([out, retval] long* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall MaximumControlStructCount([out, retval] long* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall MinimumControlStructCount([out, retval] long* Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall MaximumControlStructureCount([out, retval] long* Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall MinimumControlStructureCount([out, retval] long* Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall MaximumDemandCount([out, retval] long* Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall MinimumDemandCount([out, retval] long* Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall MaximumDiversionChannelCount([out, retval] long* Value);
    [propget, id(0x000000DC)]
    HRESULT _stdcall MinimumDiversionChannelCount([out, retval] long* Value);
    [propget, id(0x000000DD)]
    HRESULT _stdcall MaximumDiversionChannelNumber([out, retval] long* Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall MinimumDiversionChannelNumber([out, retval] long* Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall MaximumDownStreamPowerChannelCount([out, retval] long* Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall MinimumDownStreamPowerChannelCount([out, retval] long* Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall MaximumGeneralCount([out, retval] long* Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall MinimumGeneralCount([out, retval] long* Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall MaximumIFRPointsCount([out, retval] long* Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall MinimumIFRPointsCount([out, retval] long* Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall MaximumInflowCount([out, retval] long* Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall MinimumInflowCount([out, retval] long* Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall MaximumIrrigationCount([out, retval] long* Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall MinimumIrrigationCount([out, retval] long* Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall MaximumLossChannelNumber([out, retval] long* Value);
    [propget, id(0x000000EA)]
    HRESULT _stdcall MinimumLossChannelNumber([out, retval] long* Value);
    [propget, id(0x000000EB)]
    HRESULT _stdcall MaximumLossCount([out, retval] long* Value);
    [propget, id(0x000000EC)]
    HRESULT _stdcall MinimumLossCount([out, retval] long* Value);
    [propget, id(0x000000ED)]
    HRESULT _stdcall MaximumMasterControlChannelNumber([out, retval] long* Value);
    [propget, id(0x000000EE)]
    HRESULT _stdcall MinimumMasterControlChannelNumber([out, retval] long* Value);
    [propget, id(0x000000EF)]
    HRESULT _stdcall MaximumMinFlowChannelNumber([out, retval] long* Value);
    [propget, id(0x000000F0)]
    HRESULT _stdcall MinimumMinFlowChannelNumber([out, retval] long* Value);
    [propget, id(0x000000F1)]
    HRESULT _stdcall MaximumMinFlowCount([out, retval] long* Value);
    [propget, id(0x000000F2)]
    HRESULT _stdcall MinimumMinFlowCount([out, retval] long* Value);
    [propget, id(0x000000F3)]
    HRESULT _stdcall MaximumMultiPurposeCount([out, retval] long* Value);
    [propget, id(0x000000F4)]
    HRESULT _stdcall MinimumMultiPurposeCount([out, retval] long* Value);
    [propget, id(0x000000F5)]
    HRESULT _stdcall MaximumPenaltyCount([out, retval] long* Value);
    [propget, id(0x000000F6)]
    HRESULT _stdcall MinimumPenaltyCount([out, retval] long* Value);
    [propget, id(0x000000F7)]
    HRESULT _stdcall MaximumPenaltyStructureCount([out, retval] long* Value);
    [propget, id(0x000000F8)]
    HRESULT _stdcall MinimumPenaltyStructureCount([out, retval] long* Value);
    [propget, id(0x000000F9)]
    HRESULT _stdcall MaximumPowerCount([out, retval] long* Value);
    [propget, id(0x000000FA)]
    HRESULT _stdcall MinimumPowerCount([out, retval] long* Value);
    [propget, id(0x000000FB)]
    HRESULT _stdcall MaximumPowerGenerationChannelNumber([out, retval] long* Value);
    [propget, id(0x000000FC)]
    HRESULT _stdcall MinimumPowerGenerationChannelNumber([out, retval] long* Value);
    [propget, id(0x000000FD)]
    HRESULT _stdcall MaximumPumpingCount([out, retval] long* Value);
    [propget, id(0x000000FE)]
    HRESULT _stdcall MinimumPumpingCount([out, retval] long* Value);
    [propget, id(0x000000FF)]
    HRESULT _stdcall MaximumReferenceNodeCount([out, retval] long* Value);
    [propget, id(0x00000100)]
    HRESULT _stdcall MinimumReferenceNodeCount([out, retval] long* Value);
    [propget, id(0x00000101)]
    HRESULT _stdcall MaximumReservoirCount([out, retval] long* Value);
    [propget, id(0x00000102)]
    HRESULT _stdcall MinimumReservoirCount([out, retval] long* Value);
    [propget, id(0x00000103)]
    HRESULT _stdcall MaximumSpillChannelNumber([out, retval] long* Value);
    [propget, id(0x00000104)]
    HRESULT _stdcall MinimumSpillChannelNumber([out, retval] long* Value);
    [propget, id(0x00000105)]
    HRESULT _stdcall MaximumStorageZoneCount([out, retval] long* Value);
    [propget, id(0x00000106)]
    HRESULT _stdcall MinimumStorageZoneCount([out, retval] long* Value);
    [propget, id(0x00000107)]
    HRESULT _stdcall MaximumTailWaterCount([out, retval] long* Value);
    [propget, id(0x00000108)]
    HRESULT _stdcall MinimumTailWaterCount([out, retval] long* Value);
  };

  [
    uuid(936AEC2C-69C6-411D-B593-46AE0CCFDD1B),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMinimumFlowConstraintList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MinimumFlowConstraintCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MinimumFlowConstraintByIndex([in] long AIndex, [out, retval] IMinimumFlowConstraint** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MinimumFlowConstraintByID([in] long AFeatureID, [out, retval] IMinimumFlowConstraint** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateMinimumFlowConstraint([out, retval] IMinimumFlowConstraint** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveMinimumFlowConstraintWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopyMinimumFlowConstraint([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IMinimumFlowConstraint** Value);
  };

  [
    uuid(94001A90-EEF1-44ED-8BDB-A041100A736C),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ILossFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall LossFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall LossFeatureByIndex([in] long AIndex, [out, retval] ILossFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall LossFeatureByID([in] long AFeatureID, [out, retval] ILossFeature** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateLossFeature([out, retval] ILossFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveLossFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopyLossFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] ILossFeature** Value);
  };

  [
    uuid(9652E861-EFF9-4A38-B996-7EB6F0D4D68E),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISpecifiedDemandFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SpecifiedDemandFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SpecifiedDemandFeatureByIndex([in] long AIndex, [out, retval] ISpecifiedDemandFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SpecifiedDemandFeatureByID([in] long AFeatureID, [out, retval] ISpecifiedDemandFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveSpecifiedDemandFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000068)]
    HRESULT _stdcall CopySpecifiedDemandFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] ISpecifiedDemandFeature** Value);
  };

  [
    uuid(A6A92273-082E-41FD-8B37-FB0199FB7CAB),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMinMaxFlowConstraintList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MinMaxFlowConstraintCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MinMaxFlowConstraintByIndex([in] long AIndex, [out, retval] IMinMaxFlowConstraint** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall MinMaxFlowConstraintByID([in] long AFeatureID, [out, retval] IMinMaxFlowConstraint** Value);
    [id(0x00000067)]
    HRESULT _stdcall CreateMinMaxFlowConstraint([out, retval] IMinMaxFlowConstraint** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveMinMaxFlowConstraintWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopyMinMaxFlowConstraint([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IMinMaxFlowConstraint** Value);
  };

  [
    uuid(E370AB03-D77F-4498-8A7D-6EA119D3AA24),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPumpingFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PumpingFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall PumpingFeatureByIndex([in] long AIndex, [out, retval] IPumpingFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall PumpingFeatureByID([in] long AFeatureID, [out, retval] IPumpingFeature** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreatePumpingFeature([out, retval] IPumpingFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemovePumpingFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopyPumpingFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IPumpingFeature** Value);
  };

  [
    uuid(700FF6AD-31BB-4181-B5E1-D4FDD15F183B),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDiversionFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall DiversionFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall DiversionFeatureByIndex([in] long AIndex, [out, retval] IDiversionFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall DiversionFeatureByID([in] long AFeatureID, [out, retval] IDiversionFeature** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateDiversionFeature([out, retval] IDiversionFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveDiversionFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DiversionGaugeList([out, retval] BSTR* Value);
    [id(0x0000006C)]
    HRESULT _stdcall CopyDiversionFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IDiversionFeature** Value);
    [id(0x0000006D)]
    HRESULT _stdcall GetStationIDByName([in] BSTR AValue, [out, retval] long* AResult);
  };

  [
    uuid(EA845874-F75A-48CF-9E71-966E4626F04D),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPhysicalFlowConstraintList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PhysicalFlowConstraintCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall PhysicalFlowConstraintByIndex([in] long AIndex, [out, retval] IPhysicalFlowConstraint** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall PhysicalFlowConstraintByID([in] long AFeatureID, [out, retval] IPhysicalFlowConstraint** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreatePhysicalFlowConstraint([in] long AChannelNumber, [out, retval] IPhysicalFlowConstraint** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemovePhysicalFlowConstraintWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopyPhysicalFlowConstraint([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IPhysicalFlowConstraint** Value);
  };

  [
    uuid(8A63409B-C04D-40FA-9067-3F88D6228E60),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIFRFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MonthlyIFRFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MonthlyIFRFeatureByIndex([in] long AIndex, [out, retval] IIFRFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MonthlyIFRFeatureByID([in] long AFeatureID, [out, retval] IIFRFeature** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateIFRFeature([in] enum TIFRFeatureReferenceFlowType AIFRType, [out, retval] IIFRFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveIFRFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall InflowOption([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall InflowOption([in] long Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall AnnualIFRFeatureCount([out, retval] long* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall AnnualIFRFeatureByIndex([in] long AIndex, [out, retval] IIFRFeature** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall AnnualIFRFeatureByID([in] long AFeatureID, [out, retval] IIFRFeature** Value);
    [id(0x0000006F)]
    HRESULT _stdcall CopyIFRFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [in] enum TIFRFeatureReferenceFlowType AIFRType, [out, retval] IIFRFeature** AValue);
  };

  [
    uuid(30DC71C6-A460-401E-8BB8-1508D2E1B95B),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIrrigationAreaList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall IrrigationAreaCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall IrrigationAreaByIndex([in] long AIndex, [out, retval] IIrrigationArea** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall IrrigationAreaByID([in] long AFeatureID, [out, retval] IIrrigationArea** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateIrrigationArea([out, retval] IIrrigationArea** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveIrrigationAreaWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall IrrigationAreaByNodeNumber([in] long ANodeNumber, [out, retval] IIrrigationArea** Value);
    [id(0x0000006C)]
    HRESULT _stdcall CopyCreate([in] long AFeatureID, [out, retval] IIrrigationArea** Value);
  };

  [
    uuid(6E225ECE-89B4-433C-9267-761B32F7C055),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPowerPlantList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PowerPlantCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall PowerPlantByIndex([in] long AIndex, [out, retval] IPowerPlant** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall PowerPlantByID([in] long AFeatureID, [out, retval] IPowerPlant** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreatePowerPlant([out, retval] IPowerPlant** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemovePowerPlantWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopyPowerPlant([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IPowerPlant** Value);
  };

  [
    uuid(79D59912-D11C-483E-A095-428596DEB905),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMasterControlFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MasterControlFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MasterControlFeatureByIndex([in] long AIndex, [out, retval] IMasterControlFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MasterControlFeatureByID([in] long AFeatureID, [out, retval] IMasterControlFeature** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall WaterControlFeature([out, retval] IMasterControlFeature** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall PowerControlFeature([out, retval] IMasterControlFeature** Value);
    [id(0x0000006A)]
    HRESULT _stdcall CreateMasterControlFeature([in] long AChannelNumber, [out, retval] IMasterControlFeature** Value);
    [id(0x0000006B)]
    HRESULT _stdcall RemoveMasterControlFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall DemandCentreByID([in] long ADemandCentreID, [out, retval] IMasterControlFeature** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ChannelByChannelNumber([out, retval] long* Value);
    [id(0x0000006F)]
    HRESULT _stdcall CopyMasterControlFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IMasterControlFeature** Value);
  };

  [
    uuid(6C8BE668-1D55-4E79-9D1F-FF8B752CC811),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISpecifiedInflowFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SpecifiedInflowFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SpecifiedInflowFeatureByIndex([in] long AIndex, [out, retval] ISpecifiedInflowFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SpecifiedInflowFeatureByID([in] long AFeatureID, [out, retval] ISpecifiedInflowFeature** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateSpecifiedInflowFeature([out, retval] ISpecifiedInflowFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveSpecifiedInflowFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall CopySpecifiedInflowFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] ISpecifiedInflowFeature** Value);
  };

  [
    uuid(97404534-4FBF-402F-9BF5-6724EED88E77),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISpecifiedInflowFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [id(0x00000067)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [id(0x00000069)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000006A)]
    HRESULT _stdcall InflowFileName([out, retval] BSTR* AFileName);
    [propput, id(0x0000006A)]
    HRESULT _stdcall InflowFileName([in] BSTR AFileName);
    [propget, id(0x0000006B)]
    HRESULT _stdcall InflowNodeInflowFilesCommaText([out, retval] BSTR* Value);
  };

  [
    uuid(9D90233B-65E2-4BA0-AE93-2E428FCCAE9E),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelPenalty: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelPenaltyID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelPenaltyName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall ChannelPenaltyName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelPenaltyArcCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ChannelPenaltyValueByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ChannelPenaltyValueByIndex([in] long Index, [in] double Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x0000006B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(1FCC104E-A317-45AB-BF25-96ABB40136A6),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelPenaltyList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelPenaltyCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelPenaltyByIndex([in] long Index, [out, retval] IChannelPenalty** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelPenaltyByIdentifier([in] long Identifier, [out, retval] IChannelPenalty** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateChannelPenalty([out, retval] IChannelPenalty** Penalty);
    [id(0x00000069)]
    HRESULT _stdcall RemoveChannelPenaltyWithID([in] long PenaltyID, [out, retval] VARIANT_BOOL* Completed);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall InflowPenaltyNo([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall InflowPenaltyNo([in] long Value);
  };

  [
    uuid(31DB8AEE-FDEE-4D25-8846-2FADD0714262),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IGeneralFlowChannel: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall ChannelID([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ChannelName([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall ChannelName([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ChannelType([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall ChannelType([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ChannelSubType([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall ChannelSubType([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall UpStreamNodeNumber([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall UpStreamNodeNumber([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall DownStreamNodeNumber([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall DownStreamNodeNumber([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall SummaryOutputRequired([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall SummaryOutputRequired([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall RequiresFirmYieldAnalysis([out, retval] BSTR* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall RequiresFirmYieldAnalysis([in] BSTR Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall ChannelPenaltyNumber([out, retval] long* Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall MinimumFlowConstraint([out, retval] IMinimumFlowConstraint** Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall MinimumFlowConstraint([in] IMinimumFlowConstraint* Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall SourceName([out, retval] BSTR* Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall SinkName([out, retval] BSTR* Value);
    [id(0x000000D7)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall UpStreamNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall DownStreamNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MinMaxFlowConstraint([out, retval] IMinMaxFlowConstraint** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall MinMaxFlowConstraint([in] IMinMaxFlowConstraint* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall PumpingFeature([out, retval] IPumpingFeature** Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall PumpingFeature([in] IPumpingFeature* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall LossFeature([out, retval] ILossFeature** Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall LossFeature([in] ILossFeature* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall SpecifiedDemandFeature([out, retval] ISpecifiedDemandFeature** Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall SpecifiedDemandFeature([in] ISpecifiedDemandFeature* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DiversionFeature([out, retval] IDiversionFeature** Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall DiversionFeature([in] IDiversionFeature* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall PhysicalFlowConstraint([out, retval] IPhysicalFlowConstraint** Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall PhysicalFlowConstraint([in] IPhysicalFlowConstraint* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall IFRFeature([out, retval] IIFRFeature** Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall IFRFeature([in] IIFRFeature* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall IrrigationArea([out, retval] IIrrigationArea** Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall IrrigationArea([in] IIrrigationArea* Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall PowerPlant([out, retval] IPowerPlant** Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall PowerPlant([in] IPowerPlant* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall SpecifiedInflowFeature([out, retval] ISpecifiedInflowFeature** Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall SpecifiedInflowFeature([in] ISpecifiedInflowFeature* Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MasterControlFeature([out, retval] IMasterControlFeature** Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MasterControlFeature([in] IMasterControlFeature* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall ChannelPenalty([out, retval] IChannelPenalty** Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall ChannelPenalty([in] IChannelPenalty* Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall ValidArcCounts([out, retval] BSTR* Value);
    [id(0x00000074)]
    HRESULT _stdcall DeleteAllFeatures([out, retval] VARIANT_BOOL* Value);
    [id(0x00000075)]
    HRESULT _stdcall DeletePumpingFeature([out, retval] VARIANT_BOOL* Value);
    [id(0x00000076)]
    HRESULT _stdcall DeletePhysicalFlowConstraint([out, retval] VARIANT_BOOL* Value);
    [id(0x00000077)]
    HRESULT _stdcall DeleteIFRFeature([out, retval] VARIANT_BOOL* Value);
    [id(0x00000078)]
    HRESULT _stdcall DeleteMasterControlFeature([out, retval] VARIANT_BOOL* Value);
    [id(0x00000079)]
    HRESULT _stdcall DeleteSpecifiedInflowFeature([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall WaterDemandFeature([out, retval] IWaterDemandFeature** Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall WaterDemandFeature([in] IWaterDemandFeature* Value);
    [id(0x0000007B)]
    HRESULT _stdcall DeleteWaterDemandFeature([out, retval] VARIANT_BOOL* Value);
    [id(0x0000007C)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000007D)]
    HRESULT _stdcall ChannelArea([out, retval] long* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall ChannelArea([in] long Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall TimeControl([out, retval] IChannelTimeControl** Value);
    [id(0x0000007F)]
    HRESULT _stdcall NewTimeControl([out, retval] IChannelTimeControl** AResult);
    [id(0x00000080)]
    HRESULT _stdcall RemoveTimeControl([out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000081)]
    HRESULT _stdcall SwitchControlByID([in] long AChannelSwitchID, [out, retval] IChannelSwitchControl** AValue);
    [id(0x00000082)]
    HRESULT _stdcall NewSwitchControl([out, retval] IChannelSwitchControl** AResult);
    [id(0x00000083)]
    HRESULT _stdcall RemoveSwitchControl([in] long AChannelSwitchID, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000084)]
    HRESULT _stdcall SwitchControlCount([out, retval] long* Value);
    [propget, id(0x00000085)]
    HRESULT _stdcall SwitchControlByIndex([in] long AIndex, [out, retval] IChannelSwitchControl** AValue);
    [propget, id(0x00000086)]
    HRESULT _stdcall SelectedSwitchControlID([out, retval] long* Value);
    [propput, id(0x00000086)]
    HRESULT _stdcall SelectedSwitchControlID([in] long Value);
    [id(0x00000088)]
    HRESULT _stdcall NewDisbenefitFunction([out, retval] IDisbenefitFunctionDefinition** AResult);
    [id(0x00000089)]
    HRESULT _stdcall RemoveDisbenefitFunction([out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000087)]
    HRESULT _stdcall DisbenefitFunction([out, retval] IDisbenefitFunctionDefinition** Value);
    [id(0x0000008A)]
    HRESULT _stdcall NewReturnFlowChannel([out, retval] IReturnFlowChannel** AResult);
    [id(0x0000008B)]
    HRESULT _stdcall RemoveReturnFlowChannel([out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000008C)]
    HRESULT _stdcall ReturnFlowChannel([out, retval] IReturnFlowChannel** Value);
    [propget, id(0x0000008D)]
    HRESULT _stdcall FlowOutput([out, retval] BSTR* Value);
    [propput, id(0x0000008D)]
    HRESULT _stdcall FlowOutput([in] BSTR Value);
    [propget, id(0x0000008E)]
    HRESULT _stdcall TariffCalculation([out, retval] IChannelTariff** Value);
    [propget, id(0x0000008F)]
    HRESULT _stdcall SwitchControlByChannelNumber([in] long AChannelNumber, [out, retval] IChannelSwitchControl* Value);
    [propget, id(0x00000090)]
    HRESULT _stdcall MultiResChannelCurtailByChannelNo([in] long AChannelNo, [out, retval] IMultiResMultiChannelCurtail** Value);
    [id(0x00000091)]
    HRESULT _stdcall RemoveMultiResChannelCurtail([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000092)]
    HRESULT _stdcall NewMultiResCurChannel([out, retval] IMultiResMultiChannelCurtail* Value);
  };

  [
    uuid(89232BB2-43A8-4F08-8686-749CDE3DE005),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelByIndex([in] long Index, [out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelByChannelNumber([in] long ChannelNumber, [out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall OutputChannelCount([out, retval] long* Value);
    [id(0x00000069)]
    HRESULT _stdcall CreateChannel([out, retval] IGeneralFlowChannel** Value);
    [id(0x0000006A)]
    HRESULT _stdcall RemoveChannelWithID([in] long AChannelID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall MayChangePenaltyArcCount([in] long APenaltyNr, [in] long AArcCount, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ChannelByIdentifier([in] long ChannelID, [out, retval] IGeneralFlowChannel** Value);
    [id(0x0000006E)]
    HRESULT _stdcall RemoveChannelWithNumber([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006F)]
    HRESULT _stdcall CopyChannel([in] long AChannelNumber, [out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall ChannelByName([in] BSTR AName, [out, retval] IGeneralFlowChannel** Value);
  };

  [
    uuid(9E8813BF-59B4-47E0-8F43-D1745B384369),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMinimumFlowConstraint: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MinimumFlowDemandByMonth([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall MinimumFlowDemandByMonth([in] long AMonth, [in] double Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x0000006D)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(5FC99ABE-A8E7-4E12-B6B3-1A214B3569C7),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMinMaxFlowConstraint: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall FlowConstraintCount([out, retval] long* Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006D)]
    HRESULT _stdcall CreateFlowConstraints([out, retval] VARIANT_BOOL* Value);
    [id(0x0000006E)]
    HRESULT _stdcall RemoveFlowConstraints([out, retval] VARIANT_BOOL* Value);
    [id(0x0000006F)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x00000070)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000006B)]
    HRESULT _stdcall FlowConstraintByArcMonth([in] long AArc, [in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall FlowConstraintByArcMonth([in] long AArc, [in] long AMonth, [in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall DistributionByArcMonth([in] long AArc, [in] long AMonth, [out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall DistributionByArcMonth([in] long AArc, [in] long AMonth, [in] double Value);
    [id(0x00000072)]
    HRESULT _stdcall CalculateDistributionFactors(void);
  };

  [
    uuid(1FCE9C4F-2A23-42BC-9D82-BBC4781798D4),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPumpingFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PumpingHead([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall PumpingHead([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PumpingEfficiency([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall PumpingEfficiency([in] double Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006D)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x0000006E)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(ADE40F68-978B-4683-AA51-598EC11DB1CB),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ILossFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall WaterLossByMonth([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall WaterLossByMonth([in] long AMonth, [in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DivertedFlowByMonth([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall DivertedFlowByMonth([in] long AMonth, [in] double Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ReferenceNode([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall ReferenceNode([in] long Value);
    [id(0x0000006E)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x0000006F)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(6BD67D61-66D6-45E0-A7CA-D7E459F7C752),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISpecifiedDemandFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall CatchmentRefNumber([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall CatchmentRefNumber([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall StochasticIndicator([out, retval] BSTR* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall StochasticIndicator([in] BSTR Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall SpecifiedDemandFileName([out, retval] BSTR* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall SpecifiedDemandFileName([in] BSTR Value);
    [id(0x0000006D)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006E)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x0000006F)]
    HRESULT _stdcall GetMonthlyDemand([in] long ATimeStep, [in, out] BSTR* ADemand, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000070)]
    HRESULT _stdcall GetAnnualDemand([in] long AYearIndex, [in, out] BSTR* ADemand, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(3B88DA42-F28C-442A-90B3-767E8F3971BB),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDiversionFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall DiversionType([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall DiversionType([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DiversionDemandByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall DiversionDemandByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall DivertedFlowByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall DivertedFlowByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ReservoirElevationByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall ReservoirElevationByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ReferenceFlowsCount([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall ReferenceFlowsCount([in] long Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall ReferenceFlowByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall ReferenceFlowByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall DivertedFlowProportion([in] long AFlowIndex, [in] long AElevationIndex, [out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall DivertedFlowProportion([in] long AFlowIndex, [in] long AElevationIndex, [in] double Value);
    [id(0x00000071)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall ControllingReservoir([out, retval] IReservoirData** Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall ControllingReservoir([in] IReservoirData* Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall ReservoirElevationsCount([out, retval] long* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall ReservoirElevationsCount([in] long Value);
    [id(0x00000074)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x00000075)]
    HRESULT _stdcall Type2and4RowCount([out, retval] long* AResult);
    [id(0x00000076)]
    HRESULT _stdcall InsertRow([in] long AIndex, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000077)]
    HRESULT _stdcall DeleteRow([in] long AIndex, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000078)]
    HRESULT _stdcall ImportedType2or4RelationshipFromPreProcessor([in] long AStation, [out, retval] VARIANT_BOOL* LResult);
    [propget, id(0x00000079)]
    HRESULT _stdcall Station([out, retval] BSTR* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall Station([in] BSTR Value);
  };

  [
    uuid(FCAE72BB-48EF-4C79-B693-4919AF7AADFC),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPhysicalFlowConstraint: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall StructureType([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall StructureType([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ElevationOfSill([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall ElevationOfSill([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall MaximumGateHeight([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall MaximumGateHeight([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall DischargeCoefficient([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall DischargeCoefficient([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall StructureLength([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall StructureLength([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall NrOfPoints([out, retval] long* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall NrOfPoints([in] long Value);
    [id(0x00000077)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x00000072)]
    HRESULT _stdcall DischargeCurve([out, retval] IDischargeCurve** Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall KFactors([out, retval] IKFactors** Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall SandAquifer([out, retval] ISandAquifer** Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall SubmergedOutlet([out, retval] ISubmergedOutlet** Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall PumpStation([out, retval] IPumpStation** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall UpstreamReservoirNr([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall UpstreamReservoirNr([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall DownstreamReservoirNr([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall DownstreamReservoirNr([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall WaterLevelAtDownstreamNode([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall WaterLevelAtDownstreamNode([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ReferenceElevation([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall ReferenceElevation([in] double Value);
  };

  [
    uuid(4D59DC3B-3DFA-47F1-8FD0-7BF3C097805A),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIFRFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall LagMonths([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall LagMonths([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReferenceNodeNumberByIndex([in] long AIndex, [out, retval] long* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ReferenceNodeNumbersCount([out, retval] long* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall ReferenceNodeNumbers([out, retval] BSTR* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall ReferenceNodeNumbers([in] BSTR Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall NrOfInflowIFRPoints([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall NrOfInflowIFRPoints([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ExceedencePercentageByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall ExceedencePercentageByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall InflowByIndexAndMonth([in] long AIndex, [in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall InflowByIndexAndMonth([in] long AIndex, [in] long AMonth, [in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall ReleaseByIndexAndMonth([in] long AIndex, [in] long AMonth, [out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall ReleaseByIndexAndMonth([in] long AIndex, [in] long AMonth, [in] double Value);
    [id(0x00000071)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [id(0x00000073)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x00000074)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x00000075)]
    HRESULT _stdcall CalculationOption([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall CalculationOption([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall ReferenceFlowType([out, retval] enum TIFRFeatureReferenceFlowType* Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall AnnualInflow([in] long AIndex, [out, retval] double* AInflow);
    [propput, id(0x00000077)]
    HRESULT _stdcall AnnualInflow([in] long AIndex, [in] double AInflow);
    [propget, id(0x00000078)]
    HRESULT _stdcall IFRStatusIndicator([out, retval] long* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall IFRStatusIndicator([in] long Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall IFRLoss([out, retval] long* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall IFRLoss([in] long Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall MonthlyIFRLossByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall MonthlyIFRLossByIndex([in] long AIndex, [in] double Value);
  };

  [
    uuid(088C51FC-BD08-4987-9CAD-6A611089DC94),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIrrigationArea: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall DiversionFlowByMonth([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall DiversionFlowByMonth([in] long AIndex, [in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReturnFlowByMonth([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall ReturnFlowByMonth([in] long AIndex, [in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DiversionChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall ReturnFlowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ConsumptiveChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall IrrigationPolicy([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall IrrigationPolicy([in] long Value);
    [id(0x0000006F)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000070)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x00000071)]
    HRESULT _stdcall IrrigationNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall IrrigationNodeNumber([out, retval] long* Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall ConsumptiveChannelNumber([out, retval] long* Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall DiversionChannelNumber([out, retval] long* Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall ReturnFlowChannelNumber([out, retval] long* Value);
  };

  [
    uuid(4DB4134C-C9C6-40E0-8A26-612EBB902A5A),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPowerPlant: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PowerChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall SpillChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MaximumGeneratorCapacity([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall MaximumGeneratorCapacity([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall MaximumTurbineCapacity([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall MaximumTurbineCapacity([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall CombinedEfficiency([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall CombinedEfficiency([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall PowerPlantStatus([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall PowerPlantStatus([in] VARIANT_BOOL Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall HeadLoss([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall HeadLoss([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall DesignHead([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall DesignHead([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall MaximumNetHead([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall MaximumNetHead([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall MinimumNetHead([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall MinimumNetHead([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall TailWaterType([out, retval] long* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall TailWaterType([in] long Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall EfficiencyFactorByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall EfficiencyFactorByIndex([in] long Index, [in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall NetHeadFactorByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall NetHeadFactorByIndex([in] long Index, [in] double Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall DischargeByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall DischargeByIndex([in] long Index, [in] double Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall TailwaterElevationByIndex([in] long Index, [out, retval] double* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall TailwaterElevationByIndex([in] long Index, [in] double Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall MinimumPowerGenerationByMonth([in] long Month, [out, retval] double* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall MinimumPowerGenerationByMonth([in] long Month, [in] double Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall MinimumPowerReleaseByMonth([in] long Month, [out, retval] double* Value);
    [propput, id(0x00000080)]
    HRESULT _stdcall MinimumPowerReleaseByMonth([in] long Month, [in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall DownstreamPowerChannelNrs([out, retval] BSTR* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall DownstreamPowerChannelNrs([in] BSTR Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall DownstreamPowerChannelNrByIndex([in] long AIndex, [out, retval] long* Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall DownstreamPowerChannelNrsCount([out, retval] long* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall DownstreamPowerChannelNrsCount([in] long Value);
    [id(0x00000078)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall NetHeadEfficiencyCount([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall NetHeadEfficiencyCount([in] long Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall TailwaterElevationCount([out, retval] long* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall TailwaterElevationCount([in] long Value);
    [id(0x0000007C)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(7249EDFC-CEF7-45A0-8516-FA78F7F16A27),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMasterControlFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MasterControlType([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall MasterControlType([in] BSTR Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall FactorByMonth([in] long Month, [out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall FactorByMonth([in] long Month, [in] double Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006D)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000006E)]
    HRESULT _stdcall DemandCentreType([out, retval] BSTR* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall DemandCentreType([in] BSTR Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall DemandCentreID([out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall DemandCentreID([in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall AnnualDemand([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall AnnualDemand([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MinimumDemand([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MinimumDemand([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall IncludeInOutput([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall IncludeInOutput([in] VARIANT_BOOL Value);
  };

  [
    uuid(82882783-20D9-4FC0-A87D-7B46979C76F9),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirDataList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ReservoirCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirAndNodesCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall NodesWithInflowCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall NodesWithoutInflowCount([out, retval] long* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall IrrigationNodesCount([out, retval] long* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReservoirByIdentifier([in] long AReservoirIdentifier, [out, retval] IReservoirData** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ReservoirByIndex([in] long AReservoirIndex, [out, retval] IReservoirData** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall NodeWithInflowByIdentifier([in] long ANodeIdentifier, [out, retval] IReservoirData** Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall NodeWithInflowByIndex([in] long ANodeIndex, [out, retval] IReservoirData** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall NodeWithoutInflowByIdentifier([in] long ANodeIdentifier, [out, retval] IReservoirData** Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall NodeWithoutInflowByIndex([in] long ANodeIndex, [out, retval] IReservoirData** Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall IrrigationNodeByIdentifier([in] long ANodeIdentifier, [out, retval] IReservoirData** Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall IrrigationNodeByIndex([in] long ANodeIndex, [out, retval] IReservoirData** Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall ReservoirOrNodeByIdentifier([in] long AReservoirOrNodeIdentifier, [out, retval] IReservoirData** Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall ReservoirOrNodeByIndex([in] long AReservoirOrNodeIndex, [out, retval] IReservoirData** Value);
    [id(0x00000074)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall ReservoirOrNodeByID([in] long AIdentifier, [out, retval] IReservoirData** Value);
    [id(0x00000076)]
    HRESULT _stdcall NodeHasInflow([in] long ANodeNr, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000077)]
    HRESULT _stdcall CreateReservoir([in] enum TNodeType ANodeType, [out, retval] IReservoirData** Value);
    [id(0x00000078)]
    HRESULT _stdcall DeleteReservoir([in] long AReservoirNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000079)]
    HRESULT _stdcall CreateNodeWithInflow([in] enum TNodeType ANodeType, [out, retval] IReservoirData** Value);
    [id(0x0000007A)]
    HRESULT _stdcall DeleteNodeWithInflow([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007B)]
    HRESULT _stdcall CreateNodeWithoutInflow([in] enum TNodeType ANodeType, [out, retval] IReservoirData** Value);
    [id(0x0000007C)]
    HRESULT _stdcall DeleteNodeWithoutInflow([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007D)]
    HRESULT _stdcall CopyCreate([in] long AReservoirNumber, [out, retval] IReservoirData** Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall ReservoirOrNodeByName([in] BSTR AName, [out, retval] IReservoirData** Value);
  };

  [
    uuid(AC25D6EB-5451-4CA1-95A8-7683D42301A0),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirPenaltyList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PenaltyCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall PenaltyZoneCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirPenaltyByIndex([in] long APenaltyIndex, [out, retval] IReservoirPenalty** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ReservoirPenaltyByIdentifier([in] long AReservoirPenaltyStructureIdentifier, [out, retval] IReservoirPenalty** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReservoirPenaltyZoneByIndex([in] long AZoneIndex, [out, retval] IReservoirPenaltyZoneData** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReservoirPenaltyCounts([out, retval] IReservoirPenaltyCounts** Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(35985C5F-AC92-4ED4-9C23-68BD84AC2419),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirPenaltyCounts: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall StorageZoneCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall PenaltyStructureCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ZoneRuleCurve([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ZoneRuleCurve([in] long Value);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(23133903-E02B-4FDC-B858-0A64790D38F1),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirPenaltyZoneData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RecordIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ZoneName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall ZoneName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall StrategyIndicator([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall StrategyIndicator([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall BalancingVariable([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall BalancingVariable([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall BalancingPolicy([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall BalancingPolicy([in] long Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(160A912C-F2B2-4F8F-B871-8DA77FCE0C85),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirZoneElevationsData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ReservoirZoneLevelsCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirDrawDownLevelsCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall BottomOfReservoir([out, retval] IFixedElevation** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall DeadStorageLevel([out, retval] IFixedElevation** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FullSupplyLevel([out, retval] IFixedElevation** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall InitialLevelsData([out, retval] IInitialLevelsData** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall DrawDownLevelByIndex([in] long ALevelIndex, [out, retval] IDrawDownElevation** Value);
    [id(0x0000006D)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x0000006E)]
    HRESULT _stdcall UpdateDrawDownLevelFromDSL(void);
  };

  [
    uuid(DB609BCF-A6F9-4DED-9A68-F2370621C47F),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IFixedElevation: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Elevation([out, retval] double* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall Elevation([in] double Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ElevationName([out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall PenaltyValue([out, retval] double* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ReservoirData([out, retval] IReservoirData** Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(DE7A0E27-2489-4191-B1F3-06AD10B0C838),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDrawDownElevation: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AverageElevations([out, retval] double* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MonthlyElevationByIndex([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall MonthlyElevationByIndex([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirData([out, retval] IReservoirData** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall LevelIdentifier([out, retval] long* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReservoirIdentifier([out, retval] long* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x0000006C)]
    HRESULT _stdcall CalculateAvarageElevation(void);
  };

  [
    uuid(EB9A0291-558B-4B7C-B25A-970067775E45),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IInitialLevelsData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ReservoirIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall InitialLevelsByIndex([in] long ALevelIndex, [out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall InitialLevelsByIndex([in] long ALevelIndex, [in] double Value);
    [id(0x00000067)]
    HRESULT _stdcall UpdateInitialLevelValue([in] long ALevelIndex, [in] double ANewValue);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(1F40FCAB-92F0-41F8-86D9-CDCE587EDBED),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirPenalty: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PenaltyValueCount([out, retval] long* Value);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirPenaltyValueByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ReservoirPenaltyValueByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirPenaltyID([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall ReservoirPenaltyID([in] long Value);
    [id(0x00000069)]
    HRESULT _stdcall GetBaseValue([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* ABaseValue);
    [id(0x0000006A)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(FA96F9C7-2D42-43C3-96EE-2742C396254C),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirConfigurationData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RecordIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NodeType([out, retval] enum TNodeType* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall PenaltyStructIdentifier([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall PenaltyStructIdentifier([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall PointsCount([out, retval] long* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall StatusIndicator([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall StatusIndicator([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReservoirName([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall ReservoirName([in] BSTR Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ReservoirIdentifier([out, retval] long* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall IncludeSummary([out, retval] BSTR* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall IncludeSummary([in] BSTR Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall DrainageScale([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall DrainageScale([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall AfforestationScale([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall AfforestationScale([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall IrrigationScale([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall IrrigationScale([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall CatchmentRef([out, retval] long* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall CatchmentRef([in] long Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MaxArea([out, retval] double* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall AreaWhenFull([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall AreaWhenFull([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall MaxVolume([out, retval] double* Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall Priority([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall Priority([in] double Value);
    [id(0x00000075)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall RainCoef([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall RainCoef([in] double Value);
    [id(0x00000077)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x00000078)]
    HRESULT _stdcall DamLevelsFileName([out, retval] BSTR* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall DamLevelsFileName([in] BSTR Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall VolumeWhenFull([out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall VolumeWhenFull([in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall UrbanRunOff([out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall UrbanRunOff([in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall XCoord([out, retval] double* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall XCoord([in] double Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall YCoord([out, retval] double* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall YCoord([in] double Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall GroupID([out, retval] long* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall GroupID([in] long Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall NaturalInflowChannel([out, retval] long* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall NaturalInflowChannel([in] long Value);
  };

  [
    uuid(4E0F062A-6733-4A9C-96AD-B9175382C027),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirEvaporationsData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RecordIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MonthlyEvaporationsByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall MonthlyEvaporationsByIndex([in] long AIndex, [in] double Value);
    [id(0x00000067)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000068)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(083ABEBD-E5C8-4295-98E5-E7217C7266EA),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirElevationsData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RecordIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall StartElevation([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirElevationsByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ReservoirElevationsByIndex([in] long AIndex, [in] double Value);
    [id(0x00000069)]
    HRESULT _stdcall DeleteElevationValue([in] long AIndex, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall InsertElevationValue([in] long AIndex, [in] double AValue, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000068)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(0408D497-F57C-4BFB-AAD3-AEF30B2D798F),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirVolumeData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RecordIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall StartVolume([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirVolumesByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ReservoirVolumesByIndex([in] long AIndex, [in] double Value);
    [id(0x00000068)]
    HRESULT _stdcall DeleteVolumeValue([in] long AIndex, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall InsertVolumeValue([in] long AIndex, [in] double AValue, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MaxReservoirVolume([out, retval] double* Value);
  };

  [
    uuid(99019087-B13E-44EA-A442-7471316E3F45),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirAreaData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RecordIdentifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall StartArea([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirAreasByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ReservoirAreasByIndex([in] long AIndex, [in] double Value);
    [id(0x00000068)]
    HRESULT _stdcall DeleteAreaValue([in] long AIndex, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall InsertAreaValue([in] long AIndex, [in] double AValue, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(9CA99E70-F417-4B01-982D-E61AC8F4DBAA),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ReservoirConfigurationData([out, retval] IReservoirConfigurationData** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirPenaltyStructureData([out, retval] IReservoirPenalty** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirZoneElevationsData([out, retval] IReservoirZoneElevationsData** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ReservoirEvaporationsData([out, retval] IReservoirEvaporationsData** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReservoirElevationsData([out, retval] IReservoirElevationsData** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReservoirVolumesData([out, retval] IReservoirVolumeData** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ReservoirAreasData([out, retval] IReservoirAreaData** Value);
    [id(0x0000006C)]
    HRESULT _stdcall DeletePhysicalCharacteristicsRow([in] long AIndex, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006D)]
    HRESULT _stdcall InsertPhysicalCharacteristicsRow([in] long AIndex, [in] double AElevation, [in] double AVolume, [in] double AArea, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006E)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006F)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x00000070)]
    HRESULT _stdcall RecalculateAreaWhenFull([out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x00000071)]
    HRESULT _stdcall TimeControl([out, retval] IReservoirTimeControl** Value);
    [id(0x00000072)]
    HRESULT _stdcall NewTimeControl([out, retval] IReservoirTimeControl** AResult);
    [id(0x00000073)]
    HRESULT _stdcall RemoveTimeControl([out, retval] VARIANT_BOOL* AResult);
    [id(0x00000074)]
    HRESULT _stdcall Clone([out, retval] IReservoirData** AResult);
    [id(0x00000075)]
    HRESULT _stdcall DownStreamPowerChannels([out, retval] BSTR* AResult);
    [id(0x00000076)]
    HRESULT _stdcall DownStreamPowerChannelCount([out, retval] long* AResult);
    [id(0x00000077)]
    HRESULT _stdcall GetReservoirVolumeByElevation([in] double AElevation, [out, retval] double* Value);
    [id(0x00000078)]
    HRESULT _stdcall GetReservoirElevationByVolume([in] double AVolume, [out, retval] double* Value);
    [id(0x00000079)]
    HRESULT _stdcall GetReservoirElevationBySurfaceArea([in] double AArea, [out, retval] double* Value);
    [id(0x0000007A)]
    HRESULT _stdcall GetReservoirSurfaceAreaByElevation([in] double AElevation, [out, retval] double* Value);
    [id(0x0000007B)]
    HRESULT _stdcall GetReservoirSurfaceAreaByVolume([in] double AVolume, [out, retval] double* Value);
    [id(0x0000007C)]
    HRESULT _stdcall GetReservoirVolumeBySurfaceArea([in] double AArea, [out, retval] double* Value);
  };

  [
    uuid(06BC50F1-039C-44F9-9FF7-56DF64F3AF47),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IParamReference: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall CatchReference([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FileReference([out, retval] BSTR* Value);
    [id(0x00000067)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall CatchmentArea([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall CatchmentArea([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall NumberOfYears([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall NumberOfYears([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall StartYear([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall StartYear([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall Residual1([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall Residual1([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall Residual2([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall Residual2([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall Variate1([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall Variate1([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall Variate2([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall Variate2([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall TransformType([out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall TransformType([in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall TransformGamma([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall TransformGamma([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall TransformDelta([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall TransformDelta([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall TransformXlam([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall TransformXlam([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall TransformXi([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall TransformXi([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall ResidualMean([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall ResidualMean([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall ResidualStdDev([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall ResidualStdDev([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall ArmaPhi1([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall ArmaPhi1([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall ArmaPhi2([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall ArmaPhi2([in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall ArmaTheta1([out, retval] double* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall ArmaTheta1([in] double Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall ArmaTheta2([out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall ArmaTheta2([in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall PhiZero([out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall PhiZero([in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall ZTVariates([out, retval] long* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall ZTVariates([in] long Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall ParamXa([out, retval] double* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall ParamXa([in] double Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall ParamXSD([out, retval] double* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall ParamXSD([in] double Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall ParamAIC([out, retval] double* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall ParamAIC([in] double Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall ParamANC([out, retval] double* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall ParamANC([in] double Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall GaugeName([out, retval] BSTR* Value);
    [propput, id(0x00000080)]
    HRESULT _stdcall GaugeName([in] BSTR Value);
  };

  [
    uuid(BA9CEC23-E1B3-4F75-AEF1-17D1B0FFF340),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IParamSetup: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall ReferenceNumberValid([in] long ANumber, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReferenceCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReferenceDataByIndex([in] long AIndex, [out, retval] IParamReference** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ReferenceDataByCatchNumber([in] long ARefNumber, [out, retval] IParamReference** Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MatrixB([in] long ARow, [in] long ACol, [out, retval] double* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall MatrixB0([in] long ARow, [in] long ACol, [out, retval] double* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MatrixB1([in] long ARow, [in] long ACol, [out, retval] double* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall MatrixA([in] long ARow, [in] long ACol, [out, retval] double* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall MatrixC([in] long ARow, [in] long ACol, [out, retval] double* Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall KeyGaugeCount([out, retval] long* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall KeyGaugeNoByIndex([in] long AIndex, [out, retval] long* Value);
  };

  [
    uuid(17AD05BB-10AE-4865-A135-16CB6FEBA859),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IModelCalendar: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall CalenderStartDate([in, defaultvalue(0)] long AYear, [out, retval] DATE* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall CalenderDateByMonthIndex([in] long AModelMonthIndex, [in, defaultvalue(0)] long AYear, [out, retval] DATE* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall CalenderDateByMonthName([in] BSTR AModelMonthName, [in, defaultvalue(0)] long AYear, [out, retval] DATE* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ModelMonthNameByIndex([in] long AModelMonthIndex, [out, retval] BSTR* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ModelMonthIndexByName([in] BSTR AModelMonthName, [out, retval] long* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ModelMonthDaysByIndex([in] long AModelMonthIndex, [out, retval] double* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ModelMonthDaysByName([in] BSTR AModelMonthName, [out, retval] double* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall ModelMonthPeriodElapsed([in] DATE AEndDate, [out, retval] long* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall CalenderDateFromPeriodElapsed([in] long APeriodElapsed, [out, retval] DATE* Value);
  };

  [
    uuid(4F1B0065-2F38-4771-9558-89F021CD56A8),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWaterDemandCategory: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall CategoryID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall CategoryName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall CategoryName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall DemandPortionByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall DemandPortionByIndex([in] long AIndex, [in] double Value);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PortionTotal([in] long AIndex, [out, retval] double* Value);
  };

  [
    uuid(3680A493-9DD2-445C-9BB2-D3FF32041AF8),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWaterDemandConfiguration: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall DemandCategoryCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RecurrenceIntervalByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall RecurrenceIntervalByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall DemandCategoryByIndex([in] long AIndex, [out, retval] IWaterDemandCategory** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall DemandCategoryByID([in] long ACategoryID, [out, retval] IWaterDemandCategory** Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall CreateWaterDemandCategory([out, retval] IWaterDemandCategory** Value);
    [id(0x0000006D)]
    HRESULT _stdcall RemoveWaterDemandCategoryWithID([in] long ACategoryID, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall DemandCategoryByName([in] BSTR AName, [out, retval] IWaterDemandCategory** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall RiskCriteriaCount([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall RiskCriteriaCount([in] long Value);
    [id(0x0000006E)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x0000006F)]
    HRESULT _stdcall CreateNewWaterUseOutputProportion([in] long AChannelNumber, [out, retval] IWaterUseOutputProportion** AResult);
    [propget, id(0x00000071)]
    HRESULT _stdcall WaterUseOutputProportionByIndex([in] long AIndex, [out, retval] IWaterUseOutputProportion** Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall WaterUseOutputProportionByChannelNumber([in] long AChannelNumber, [out, retval] IWaterUseOutputProportion** Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall WaterUseOutputProportionCount([out, retval] long* Value);
    [id(0x00000075)]
    HRESULT _stdcall CreateYieldWaterUseOutputProportion(void);
    [id(0x00000073)]
    HRESULT _stdcall DeleteWaterUseOutputProportion([in] long AChannelNumber, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000074)]
    HRESULT _stdcall UpdateWaterUseOutputProportions([in] long ANewCount);
    [propget, id(0x00000076)]
    HRESULT _stdcall ImplementReconciliation([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall ImplementReconciliation([in] VARIANT_BOOL Value);
  };

  [
    uuid(009856A6-7FC7-4CC1-8EFE-D8BC00E852A0),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWaterDemandFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FeatureName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FeatureName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall FeatureType([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall FeatureType([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FeatureSubType([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall WaterDemandCategory([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall WaterDemandCategory([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ScenarioPortionByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall ScenarioPortionByIndex([in] long AIndex, [in] double Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006D)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
  };

  [
    uuid(39B5B8C0-60C8-444F-9373-42A144557E4D),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWaterDemandFeatureList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall WaterDemandFeatureCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall WaterDemandFeatureByIndex([in] long AIndex, [out, retval] IWaterDemandFeature** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall WaterDemandFeatureByID([in] long AFeatureID, [out, retval] IWaterDemandFeature** Value);
    [id(0x00000068)]
    HRESULT _stdcall CreateWaterDemandFeature([out, retval] IWaterDemandFeature** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveWaterDemandFeatureWithID([in] long AFeatureID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ScenarioCount([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall ScenarioCount([in] long Value);
    [id(0x0000006C)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [id(0x0000006D)]
    HRESULT _stdcall CopyWaterDemandFeature([in] long ANewChannelNumber, [in] long AOldChannelNumber, [out, retval] IWaterDemandFeature** Value);
  };

  [
    uuid(EF57D643-E162-4363-B32A-6654E2399B49),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChangeList: IUnknown
  {
    [propget, id(0x00000066)]
    HRESULT _stdcall DateCreated([out, retval] DATE* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall CreatedBy([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall CreatedBy([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall Description([in] BSTR Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall ChangeListName([out, retval] BSTR* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ChangeListName([in] BSTR Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ChangeListID([out, retval] long* Value);
    [id(0x0000006C)]
    HRESULT _stdcall FindParamChange([in] BSTR AParamField, [in] BSTR AKeyValues, [in] BSTR AFieldIndex, [out, retval] IParameterChange** AParamChange);
    [id(0x0000006D)]
    HRESULT _stdcall CreateNewParamChange([in] BSTR AParamField, [in] BSTR AKeyValues, [in] BSTR AFieldIndex, [in] BSTR AAbsolut, [in] BSTR AChange, [in] BSTR AParamDescr, [in] VARIANT_BOOL AFiltered, [out, retval] IParameterChange** AParamChange);
    [id(0x0000006E)]
    HRESULT _stdcall DeleteParamChange([in] BSTR AParamField, [in] BSTR AKeyValues, [in] BSTR AFieldIndex);
    [id(0x0000006F)]
    HRESULT _stdcall ParamChangeByIndex([in] long AIndex, [out, retval] IParameterChange** AParamChange);
    [id(0x00000070)]
    HRESULT _stdcall ParamChangeCount([out, retval] long* ACount);
    [id(0x00000071)]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR* AKeyValues);
    [propget, id(0x00000069)]
    HRESULT _stdcall IsResident([out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(E9C04174-8297-4824-A5B9-86ACBBED4891),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IParameterChange: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChangeListID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ParamField([out, retval] BSTR* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall Absolut([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall Absolut([in] VARIANT_BOOL Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall Change([out, retval] BSTR* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall Change([in] BSTR Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall FieldIndex([out, retval] BSTR* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall KeyValues([out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ParamDescr([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ParamDescr([in] BSTR Value);
  };

  [
    uuid(2E5D1CA0-500C-45E3-A7FA-EBE07F1C8623),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMetaData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ParamField([out, retval] BSTR* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FieldIndex([out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall KeyValues([out, retval] BSTR* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall DateCreated([out, retval] DATE* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall DateCreated([in] DATE Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall CreatedBy([out, retval] BSTR* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall CreatedBy([in] BSTR Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall Comment([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall Comment([in] BSTR Value);
  };

  [
    uuid(E5D0C300-5DBE-4205-A4D6-E3DEAB8F909C),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IConfiguration: IDispatch
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall INIFileName([out, retval] BSTR* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall COMServerFileName([out, retval] BSTR* Value);
  };

  [
    uuid(B121E354-184D-4E47-B0C5-C962FAAC7715),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWeatherEvents: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall FindWeatherEvents([in] DATE AStartDateTime, [in] DATE AEndDateTime, [in] BSTR AArea, [out, retval] BSTR* AResult);
    [id(0x00000066)]
    HRESULT _stdcall GetAreas([out, retval] BSTR* AResult);
    [id(0x00000067)]
    HRESULT _stdcall EarliestDate([out, retval] DATE* AResult);
    [id(0x00000068)]
    HRESULT _stdcall LatestDate([out, retval] DATE* AResult);
  };

  [
    uuid(DC54F70A-CB16-4ED5-8967-FBEB4F2E4F76),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelArea: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AreaID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall AreaName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall AreaName([in] BSTR Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(D300D1F5-35D3-48B1-96B6-CD4BE1CC3B21),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelAreaList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AreaCount([out, retval] long* Value);
    [id(0x00000066)]
    HRESULT _stdcall ChannelAreaByIndex([in] long AIndex, [out, retval] IChannelArea** AResult);
    [id(0x00000067)]
    HRESULT _stdcall ChannelAreaByID([in] long AChannelAreaID, [out, retval] IChannelArea** AResult);
    [id(0x00000068)]
    HRESULT _stdcall ChannelAreaByName([in] BSTR AName, [out, retval] IChannelArea** AResult);
    [id(0x00000069)]
    HRESULT _stdcall CreateChannelArea([out, retval] IChannelArea** AResult);
    [id(0x0000006A)]
    HRESULT _stdcall RemoveChannelArea([in] long AChannelAreaID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(566134B3-D4A0-4036-9E10-D0B43FE60131),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IOutputData: IUnknown
  {
    [id(0x00000068)]
    HRESULT _stdcall ShowDataSelectionDialog([in] long AIdentifier, [in] enum TNetworkElementType ANetworkElementType, [in] enum TOutputSourceDialog AOutputSourceDialog, [in] enum TOutputDataType AOutputDataType, [in] enum TOutputValueType AOutputValueType, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000065)]
    HRESULT _stdcall GetSelection([out, retval] IOutputDataSelection** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SummaryOutputData([out, retval] ISummaryOutputData** Value);
  };

  [
    uuid(6811556E-DB56-4ACD-A03E-535B82C8D302),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWaterUseOutputProportion: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([in] long Value);
    [id(0x00000067)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ProportionByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ProportionByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall Total([out, retval] double* Value);
  };

  [
    uuid(F7500348-92A7-4351-8F8D-CE909D5264F8),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IOutputDataSelection: IUnknown
  {
    [propget, id(0x00000067)]
    HRESULT _stdcall Month([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall Units([out, retval] enum TOutputUnits* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ValueType([out, retval] enum TOutputValueType* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall Highlight([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall DisplayMonth([out, retval] long* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall AverageType([out, retval] enum TOutputAverageType* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall AverageStartDate([out, retval] DATE* Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall AverageEndDate([out, retval] DATE* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall DecisionMonth([out, retval] long* Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall PlotOption([out, retval] enum TOutputPlotOptions* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall YearsToSkip([out, retval] long* Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall LoadCase([out, retval] long* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall LoadCase([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Sequence([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Sequence([in] long Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall ApplySensitivity([out, retval] enum TSensitivity* AValue);
    [propput, id(0x00000065)]
    HRESULT _stdcall ApplySensitivity([in] enum TSensitivity AValue);
    [propget, id(0x00000074)]
    HRESULT _stdcall Sensitivity([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall Sensitivity([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall PercSensitivity([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall PercSensitivity([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall TimeStep([out, retval] enum TOutputTimeStep* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall TimeStep([in] enum TOutputTimeStep Value);
  };

  [
    uuid(1C26657F-E973-4983-B0A3-399EBD46247C),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IUserCategory: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall CategoryID([out, retval] long* AValue);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Description([out, retval] BSTR* AValue);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Description([in] BSTR AValue);
    [propget, id(0x000000CB)]
    HRESULT _stdcall DistributionByIndex([in] long AInteger, [out, retval] double* AValue);
    [propput, id(0x000000CB)]
    HRESULT _stdcall DistributionByIndex([in] long AInteger, [in] double AValue);
    [id(0x0000006F)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(943AA3F2-FE5B-45D2-A0DB-126CA039D484),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IAllocationLevel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AllocationLevelID([out, retval] long* AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall Description([out, retval] BSTR* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall Description([in] BSTR AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall CurtailmentByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall CurtailmentByIndex([in] long AIndex, [in] double AValue);
    [id(0x0000006F)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(C29BCBFB-5CD5-4842-A4EA-3DC84BB2A7D3),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ICoefficient: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall TargetDraft([out, retval] double* AValue);
    [propput, id(0x000000C9)]
    HRESULT _stdcall TargetDraft([in] double AValue);
    [propget, id(0x000000CA)]
    HRESULT _stdcall CoefficientA([out, retval] double* AValue);
    [propput, id(0x000000CA)]
    HRESULT _stdcall CoefficientA([in] double AValue);
    [propget, id(0x000000CB)]
    HRESULT _stdcall CoefficientB([out, retval] double* AValue);
    [propput, id(0x000000CB)]
    HRESULT _stdcall CoefficientB([in] double AValue);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CoefficientC([out, retval] double* AValue);
    [propput, id(0x000000CC)]
    HRESULT _stdcall CoefficientC([in] double AValue);
    [propget, id(0x000000CD)]
    HRESULT _stdcall CoefficientD([out, retval] double* AValue);
    [propput, id(0x000000CD)]
    HRESULT _stdcall CoefficientD([in] double AValue);
    [propget, id(0x000000CE)]
    HRESULT _stdcall Risk([out, retval] double* AValue);
    [propput, id(0x000000CE)]
    HRESULT _stdcall Risk([in] double AValue);
    [id(0x00000065)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(6BD2ABF8-CB50-4B8E-8D13-D0EA1A66B340),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISubSystem: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall SubSystemID([out, retval] long* AValue);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Name([out, retval] BSTR* AValue);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Name([in] BSTR AValue);
    [propget, id(0x000000CB)]
    HRESULT _stdcall StartMonth([out, retval] long* AValue);
    [propput, id(0x000000CB)]
    HRESULT _stdcall StartMonth([in] long AValue);
    [propget, id(0x000000CC)]
    HRESULT _stdcall StartYear([out, retval] long* AValue);
    [propput, id(0x000000CC)]
    HRESULT _stdcall StartYear([in] long AValue);
    [propget, id(0x000000CD)]
    HRESULT _stdcall EndMonth([out, retval] long* AValue);
    [propput, id(0x000000CD)]
    HRESULT _stdcall EndMonth([in] long AValue);
    [propget, id(0x00000065)]
    HRESULT _stdcall EndYear([out, retval] long* AValue);
    [propput, id(0x00000065)]
    HRESULT _stdcall EndYear([in] long AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall SubtractID([out, retval] long* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall SubtractID([in] long AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall SupportID([out, retval] long* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall SupportID([in] long AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall ShortTermYield([out, retval] double* AValue);
    [propput, id(0x00000068)]
    HRESULT _stdcall ShortTermYield([in] double AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall LongTermYield([out, retval] double* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall LongTermYield([in] double AValue);
    [propget, id(0x0000006A)]
    HRESULT _stdcall LowestStreamFlow([out, retval] double* AValue);
    [propput, id(0x0000006A)]
    HRESULT _stdcall LowestStreamFlow([in] double AValue);
    [propget, id(0x0000006B)]
    HRESULT _stdcall FirmYield([out, retval] VARIANT_BOOL* AValue);
    [propput, id(0x0000006B)]
    HRESULT _stdcall FirmYield([in] VARIANT_BOOL AValue);
    [propget, id(0x0000006C)]
    HRESULT _stdcall ReservoirNrs([out, retval] BSTR* AValue);
    [propput, id(0x0000006C)]
    HRESULT _stdcall ReservoirNrs([in] BSTR AValue);
    [propget, id(0x0000006E)]
    HRESULT _stdcall SupportCalcType([out, retval] long* AValue);
    [propput, id(0x0000006E)]
    HRESULT _stdcall SupportCalcType([in] long AValue);
    [id(0x0000006F)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall CoefficientByPercCurveCase([in] long APercIndex, [in] long ACurveIndex, [in] long ACaseIndex, [out, retval] ICoefficient** Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall CoefficientByPercCurveCase([in] long APercIndex, [in] long ACurveIndex, [in] long ACaseIndex, [in] ICoefficient* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall RoutingChannelNrByIndex([in] long AIndex, [out, retval] long* AValue);
    [propput, id(0x0000006D)]
    HRESULT _stdcall RoutingChannelNrByIndex([in] long AIndex, [in] long AValue);
    [propget, id(0x00000071)]
    HRESULT _stdcall SupportChannelNr([out, retval] long* AValue);
    [propput, id(0x00000071)]
    HRESULT _stdcall SupportChannelNr([in] long AValue);
    [propget, id(0x00000072)]
    HRESULT _stdcall Order([out, retval] long* AValue);
    [propput, id(0x00000072)]
    HRESULT _stdcall Order([in] long AValue);
  };

  [
    uuid(2D28477F-9E75-4A50-AD4A-6FFE0FA626FD),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISupportChannel: IUnknown
  {
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelNumber([out, retval] long* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall ChannelNumber([in] long AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall NrOfCntrlSubSystems([out, retval] long* AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall SubSystemIDByIndex([in] long AIndex, [out, retval] long* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall SubSystemIDByIndex([in] long AIndex, [in] long AValue);
    [propget, id(0x0000006A)]
    HRESULT _stdcall SubSystemFactorByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x0000006A)]
    HRESULT _stdcall SubSystemFactorByIndex([in] long AIndex, [in] double AValue);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall SupportChannelID([out, retval] long* Value);
    [id(0x00000066)]
    HRESULT _stdcall NewControllingSubSystem([out, retval] long* AResult);
    [id(0x0000006C)]
    HRESULT _stdcall RemoveControllingSubSystem([in] long AIndex, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(DFABB0B2-5CB1-4185-8E85-E9ADF8DC53A8),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISupportSubSystem: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SupportSubSystemID([out, retval] long* AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall SubSystemID([out, retval] long* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall SubSystemID([in] long AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall SupportChannelNrByIndex([in] long AIndex, [out, retval] long* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall SupportChannelNrByIndex([in] long AIndex, [in] long AValue);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(343494D1-4D53-41BB-8198-5AD1ACFAEC6E),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDemandDefinition: IUnknown
  {
    [propget, id(0x00000067)]
    HRESULT _stdcall DemandDefID([out, retval] long* AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall Name([out, retval] BSTR* AValue);
    [propput, id(0x00000068)]
    HRESULT _stdcall Name([in] BSTR AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall ParentSubSystemID([out, retval] long* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall ParentSubSystemID([in] long AValue);
    [propget, id(0x0000006A)]
    HRESULT _stdcall GrowthType([out, retval] long* AValue);
    [propput, id(0x0000006A)]
    HRESULT _stdcall GrowthType([in] long AValue);
    [propget, id(0x0000006B)]
    HRESULT _stdcall TargetDemand([out, retval] double* AValue);
    [propput, id(0x0000006B)]
    HRESULT _stdcall TargetDemand([in] double AValue);
    [propget, id(0x0000006C)]
    HRESULT _stdcall UserCategoryID([out, retval] long* AValue);
    [propput, id(0x0000006C)]
    HRESULT _stdcall UserCategoryID([in] long AValue);
    [propget, id(0x0000006D)]
    HRESULT _stdcall SupportArc1([out, retval] long* AValue);
    [propput, id(0x0000006D)]
    HRESULT _stdcall SupportArc1([in] long AValue);
    [propget, id(0x0000006E)]
    HRESULT _stdcall SupportArc2([out, retval] long* AValue);
    [propput, id(0x0000006E)]
    HRESULT _stdcall SupportArc2([in] long AValue);
    [propget, id(0x0000006F)]
    HRESULT _stdcall NrOfSupportSubSystems([out, retval] long* AValue);
    [propget, id(0x00000070)]
    HRESULT _stdcall SupportSubSystemByID([in] long AID, [out, retval] ISupportSubSystem** AValue);
    [propget, id(0x00000071)]
    HRESULT _stdcall SupportSubSystemByIndex([in] long AIndex, [out, retval] ISupportSubSystem** AValue);
    [id(0x00000065)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000066)]
    HRESULT _stdcall NewSupportSubSystem([out, retval] ISupportSubSystem** AResult);
    [id(0x00000072)]
    HRESULT _stdcall RemoveSupportSubSystem([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000073)]
    HRESULT _stdcall Order([out, retval] long* AValue);
    [propput, id(0x00000073)]
    HRESULT _stdcall Order([in] long AValue);
    [propget, id(0x00000074)]
    HRESULT _stdcall DemandCentreID([out, retval] long* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall DemandCentreID([in] long Value);
  };

  [
    uuid(CB6E149E-EC34-46CC-995A-328C095A16FB),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IAllocationDefinition: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AllocationDefinitionID([out, retval] long* AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall Name([out, retval] BSTR* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall Name([in] BSTR AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall StartYear([out, retval] long* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall StartYear([in] long AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall StartMonth([out, retval] long* AValue);
    [propput, id(0x00000068)]
    HRESULT _stdcall StartMonth([in] long AValue);
    [propget, id(0x0000006B)]
    HRESULT _stdcall NrOfCategories([out, retval] long* AValue);
    [propget, id(0x0000006C)]
    HRESULT _stdcall NrOfReliabilityClasses([out, retval] long* AValue);
    [propput, id(0x0000006C)]
    HRESULT _stdcall NrOfReliabilityClasses([in] long AValue);
    [propget, id(0x0000006D)]
    HRESULT _stdcall NrOfAllocationLevels([out, retval] long* AValue);
    [propget, id(0x0000006E)]
    HRESULT _stdcall PeriodLength([out, retval] long* AValue);
    [propput, id(0x0000006E)]
    HRESULT _stdcall PeriodLength([in] long AValue);
    [propget, id(0x0000006F)]
    HRESULT _stdcall NrOfLoadCases([out, retval] long* AValue);
    [propput, id(0x0000006F)]
    HRESULT _stdcall NrOfLoadCases([in] long AValue);
    [propget, id(0x00000070)]
    HRESULT _stdcall NrOfStartingPercentages([out, retval] long* AValue);
    [propput, id(0x00000070)]
    HRESULT _stdcall NrOfStartingPercentages([in] long AValue);
    [propget, id(0x00000071)]
    HRESULT _stdcall NrOfSubSystems([out, retval] long* AValue);
    [propget, id(0x00000072)]
    HRESULT _stdcall NrOfCurveSets([out, retval] long* AValue);
    [propput, id(0x00000072)]
    HRESULT _stdcall NrOfCurveSets([in] long AValue);
    [propget, id(0x00000073)]
    HRESULT _stdcall RecurrenceIntervalByIndex([in] long AIndex, [out, retval] long* AValue);
    [propput, id(0x00000073)]
    HRESULT _stdcall RecurrenceIntervalByIndex([in] long AIndex, [in] long AValue);
    [propget, id(0x00000074)]
    HRESULT _stdcall RILabelByIndex([in] long AIndex, [out, retval] BSTR* AValue);
    [propput, id(0x00000074)]
    HRESULT _stdcall RILabelByIndex([in] long AIndex, [in] BSTR AValue);
    [propget, id(0x00000075)]
    HRESULT _stdcall CategoryByIndex([in] long AIndex, [out, retval] IUserCategory** AValue);
    [propget, id(0x00000076)]
    HRESULT _stdcall CategoryByID([in] long AID, [out, retval] IUserCategory** AValue);
    [propget, id(0x00000077)]
    HRESULT _stdcall AllocationLevelByIndex([in] long AIndex, [out, retval] IAllocationLevel** AValue);
    [propget, id(0x00000078)]
    HRESULT _stdcall SubSystemByIndex([in] long AIndex, [out, retval] ISubSystem** AValue);
    [propget, id(0x00000079)]
    HRESULT _stdcall SubSystemByID([in] long AIndex, [out, retval] ISubSystem** AValue);
    [propget, id(0x0000007A)]
    HRESULT _stdcall DecisionCurveSetByMonth([in] long AMonth, [out, retval] long* AValue);
    [propput, id(0x0000007A)]
    HRESULT _stdcall DecisionCurveSetByMonth([in] long AMonth, [in] long AValue);
    [propget, id(0x0000007B)]
    HRESULT _stdcall StartingPercentageByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x0000007B)]
    HRESULT _stdcall StartingPercentageByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000007C)]
    HRESULT _stdcall NrInFixedPosition([out, retval] long* AValue);
    [propget, id(0x0000007E)]
    HRESULT _stdcall FixedPositionByIndex([in] long AIndex, [out, retval] IFixedPosition** AValue);
    [propget, id(0x0000007F)]
    HRESULT _stdcall NrInSpecificOrder([out, retval] long* AValue);
    [propget, id(0x00000082)]
    HRESULT _stdcall NrOfSupportChannels([out, retval] long* AValue);
    [propget, id(0x00000083)]
    HRESULT _stdcall SupportChannelByIndex([in] long AIndex, [out, retval] ISupportChannel** AValue);
    [propget, id(0x00000084)]
    HRESULT _stdcall NrOfDemandDefinitions([out, retval] long* AValue);
    [propget, id(0x00000085)]
    HRESULT _stdcall DemandDefinitionByIndex([in] long AIndex, [out, retval] IDemandDefinition** AValue);
    [id(0x00000086)]
    HRESULT _stdcall NewUserCategory([out, retval] IUserCategory** AResult);
    [id(0x00000087)]
    HRESULT _stdcall RemoveUserCategory([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000088)]
    HRESULT _stdcall NewAllocationLevel([out, retval] IAllocationLevel** AResult);
    [id(0x00000089)]
    HRESULT _stdcall RemoveAllocationLevel([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000008A)]
    HRESULT _stdcall NewSubSystem([out, retval] ISubSystem** AResult);
    [id(0x0000008B)]
    HRESULT _stdcall RemoveSubSystem([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000008C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000008D)]
    HRESULT _stdcall NewFixedPosition([out, retval] IFixedPosition** AResult);
    [id(0x0000008E)]
    HRESULT _stdcall RemoveFixedPosition([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000008F)]
    HRESULT _stdcall NewSpecificOrder([out, retval] ISpecificOrder** AResult);
    [id(0x00000090)]
    HRESULT _stdcall RemoveSpecificOrder([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000091)]
    HRESULT _stdcall SupportChannelByID([in] long AID, [out, retval] ISupportChannel** AResult);
    [id(0x00000092)]
    HRESULT _stdcall NewSupportChannel([out, retval] ISupportChannel** AResult);
    [id(0x00000093)]
    HRESULT _stdcall RemoveSupportChannel([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000094)]
    HRESULT _stdcall SupportStrategy([out, retval] long* Value);
    [propput, id(0x00000094)]
    HRESULT _stdcall SupportStrategy([in] long Value);
    [propget, id(0x00000095)]
    HRESULT _stdcall BalancingOption([out, retval] long* Value);
    [propput, id(0x00000095)]
    HRESULT _stdcall BalancingOption([in] long Value);
    [propget, id(0x00000096)]
    HRESULT _stdcall DemandDefinitionByID([in] long AID, [out, retval] IDemandDefinition** AValue);
    [id(0x00000097)]
    HRESULT _stdcall NewDemandDefinition([out, retval] IDemandDefinition** AResult);
    [id(0x00000098)]
    HRESULT _stdcall RemoveDemandDefinition([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000069)]
    HRESULT _stdcall AllocDefFileName([out, retval] BSTR* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall AllocDefFileName([in] BSTR Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall FixedPositionByID([in] long AID, [out, retval] IFixedPosition** AValue);
    [propget, id(0x0000007D)]
    HRESULT _stdcall SpecificOrderByIndex([in] long AIndex, [out, retval] ISpecificOrder** AValue);
    [propget, id(0x00000080)]
    HRESULT _stdcall SpecificOrderByID([in] long AID, [out, retval] ISpecificOrder** AValue);
  };

  [
    uuid(DD7DB287-FE2C-4911-BBF8-C37E24E32F3E),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IAllocationDefinitionsList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AllocationDefinitionCount([out, retval] long* AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall AllocationDefinitionByIndex([in] long AIndex, [out, retval] IAllocationDefinition** AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall AllocationDefinitionByID([in] long AID, [out, retval] IAllocationDefinition** AValue);
    [id(0x00000068)]
    HRESULT _stdcall NewAllocationDefinition([out, retval] IAllocationDefinition** AResult);
    [id(0x00000069)]
    HRESULT _stdcall RemoveAllocationDefinitionWithID([in] long AID, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(BF29970A-47A7-474A-91AC-868AF9913203),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPlanningModelData: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall AllocationDefinitionsList([out, retval] IAllocationDefinitionsList** Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall SwitchDefinitionsList([out, retval] ISwitchDefinitionsList** Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall TariffCalculationData([out, retval] ITariffCalculationData** Value);
  };

  [
    uuid(5EFEF2C0-6FB5-4DE0-9045-120BA75B0601),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPreprocessor: IUnknown
  {
  };

  [
    uuid(08484FED-6C2F-4CC5-A25B-EB29B4FA52CD),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPreProcessorData: IUnknown
  {
  };

  [
    uuid(96C94A5D-57CB-4557-A178-2D3C58DD4951),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IFixedPosition: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall FixedPositionNr([out, retval] long* AValue);
    [propput, id(0x000000C9)]
    HRESULT _stdcall FixedPositionNr([in] long AValue);
    [propget, id(0x000000CA)]
    HRESULT _stdcall FixedPosSubSystemID([out, retval] long* AValue);
    [propput, id(0x000000CA)]
    HRESULT _stdcall FixedPosSubSystemID([in] long AValue);
    [propget, id(0x00000065)]
    HRESULT _stdcall FixedPositionID([out, retval] long* Value);
  };

  [
    uuid(38074998-F70E-445C-9AF5-22BFB232B3C7),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISpecificOrder: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall BeforeSubSystemID([out, retval] long* AValue);
    [propput, id(0x000000C9)]
    HRESULT _stdcall BeforeSubSystemID([in] long AValue);
    [propget, id(0x000000CA)]
    HRESULT _stdcall AfterSubSystemID([out, retval] long* AValue);
    [propput, id(0x000000CA)]
    HRESULT _stdcall AfterSubSystemID([in] long AValue);
    [propget, id(0x00000065)]
    HRESULT _stdcall SpecificOrderID([out, retval] long* Value);
  };

  [
    uuid(01BD48AF-CC96-437A-8336-56A1D9B7B085),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirTimeControl: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall StartYear([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall StartYear([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall StartMonth([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall StartMonth([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall EndYear([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall EndYear([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall EndMonth([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall EndMonth([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall EconomicLife([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall EconomicLife([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall CapitalCost([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall CapitalCost([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall OMCost([out, retval] double* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall OMCost([in] double Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall YearsToConstruct([out, retval] long* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall YearsToConstruct([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall CostScheduleByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall CostScheduleByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall ReservoirNumber([out, retval] long* Value);
    [id(0x000000D4)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall Replacements([out, retval] BSTR* Value);
    [id(0x00000066)]
    HRESULT _stdcall AddReplacement([in] long AResNr);
    [id(0x00000067)]
    HRESULT _stdcall DeleteReplacement([in] long AResNr);
    [propget, id(0x00000068)]
    HRESULT _stdcall CostSchedule([out, retval] BSTR* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall CostSchedule([in] BSTR Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall BaseNodeNumber([out, retval] long* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall BaseNodeNumber([in] long AValue);
  };

  [
    uuid(39CD48B8-8F01-466C-9C15-565E8ACA91CE),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISwitchDefinition: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SwitchDefID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SwitchDefStartYear([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall SwitchDefStartYear([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SwitchDefStartMonth([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall SwitchDefStartMonth([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall SwitchDefFileName([out, retval] BSTR* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall SwitchDefFileName([in] BSTR Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(4FE7FF75-2A38-4E1A-B7CD-C2619501EBA6),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISwitchDefinitionsList: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall NewSwitchDefinition([out, retval] ISwitchDefinition** AResult);
    [id(0x00000066)]
    HRESULT _stdcall RemoveSwitchDefinitionWithID([in] long AID, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000067)]
    HRESULT _stdcall SwitchDefinitionCount([out, retval] long* AResult);
    [propget, id(0x00000068)]
    HRESULT _stdcall SwitchDefinitionByID([in] long AID, [out, retval] ISwitchDefinition** AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall SwitchDefinitionByIndex([in] long AIndex, [out, retval] ISwitchDefinition** AValue);
  };

  [
    uuid(4A7D3EBC-944D-4228-9103-4D89035A17DA),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelTimeControl: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall StartYear([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall StartYear([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall StartMonth([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall StartMonth([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall EndYear([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall EndYear([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall EndMonth([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall EndMonth([in] long Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall EconomicLife([out, retval] long* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall EconomicLife([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall CapitalCost([out, retval] double* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall CapitalCost([in] double Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall FixedOMCost([out, retval] double* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall FixedOMCost([in] double Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall VariableOMCost([out, retval] double* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall VariableOMCost([in] double Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall YearsToConstruct([out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall YearsToConstruct([in] long Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall CostSchedule([out, retval] BSTR* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall CostSchedule([in] BSTR Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall EscalationCost([out, retval] BSTR* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall EscalationCost([in] BSTR Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall CostScheduleByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x00000065)]
    HRESULT _stdcall CostScheduleByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall EscalationCostValueByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall EscalationCostValueByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000006B)]
    HRESULT _stdcall YearsInAnalysis([out, retval] long* AValue);
    [propput, id(0x0000006B)]
    HRESULT _stdcall YearsInAnalysis([in] long AValue);
  };

  [
    uuid(A59B8604-3713-4026-98BB-D15FC12C1B76),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChannelSwitchControl: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall AssociatedNodeNr([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall AssociatedNodeNr([in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall WaterLevel([out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall WaterLevel([in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall SwitchType([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall SwitchType([in] long Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall InitialStatus([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall InitialStatus([in] long Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall SwitchDefinitionID([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall SwitchDefinitionID([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelSwitchID([out, retval] long* Value);
  };

  [
    uuid(BEB0FBD7-E770-450B-9010-E4146F4697BA),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDataFilePaths: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall DataFilePrefix([out, retval] BSTR* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall DataFilePath([out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ParamFileName([out, retval] BSTR* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall OutputFilePath([out, retval] BSTR* Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall HydrologyFilePath([out, retval] BSTR* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DemandFilePath([out, retval] BSTR* Value);
  };

  [
    uuid(23E6A510-D8F3-4CF2-8778-8314A14D92AC),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChangeGroupElement: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall GroupID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ElementID([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall IsElementGroup([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ElementOrder([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ElementOrder([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ElementActive([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall ElementActive([in] VARIANT_BOOL Value);
  };

  [
    uuid(06EAC9C3-6137-4E37-9783-DD5C88682380),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IChangeGroup: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall GroupID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall GroupName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall GroupName([in] BSTR Value);
    [id(0x00000067)]
    HRESULT _stdcall NewChangeGroupElement([in] long AElementID, [in] VARIANT_BOOL AIsElementGroup, [out, retval] IChangeGroupElement** AResult);
    [id(0x00000068)]
    HRESULT _stdcall RemoveChangeGroupElementByID([in] long AElementID, [in] VARIANT_BOOL AIsElementGroup, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000069)]
    HRESULT _stdcall RemoveChangeGroupElementByIndex([in] long AIndex, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006A)]
    HRESULT _stdcall ChangeGroupElementByID([in] long AElementID, [in] VARIANT_BOOL AIsElementGroup, [out, retval] IChangeGroupElement** AResult);
    [id(0x0000006B)]
    HRESULT _stdcall ChangeGroupElementByIndex([in] long AIndex, [out, retval] IChangeGroupElement** AResult);
    [id(0x0000006C)]
    HRESULT _stdcall ContainsChangeLists([out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006D)]
    HRESULT _stdcall ElementCount([out, retval] long* AResult);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ParentGroupID([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall ParentGroupID([in] long Value);
    [id(0x0000006F)]
    HRESULT _stdcall MoveUpChangeGroupElement([in] long AElementID, [in] VARIANT_BOOL AIsElementGroup, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000070)]
    HRESULT _stdcall MoveDownChangeGroupElement([in] long AElementID, [in] VARIANT_BOOL AIsElementGroup, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(F7EDAF21-5D53-46CF-889E-BF1BAB85E10A),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDemandCentreGrowthFactors: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([out, retval] long* AValue);
    [propput, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([in] long AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall GrowthFactors([out, retval] BSTR* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall GrowthFactors([in] BSTR AValue);
    [id(0x00000067)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall GrowthFactorsCount([out, retval] long* AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall GrowthFactorsValueByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall GrowthFactorsValueByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ValidFactors([out, retval] VARIANT_BOOL* AValue);
    [propput, id(0x0000006A)]
    HRESULT _stdcall ValidFactors([in] VARIANT_BOOL AValue);
  };

  [
    uuid(816AD665-1BF0-48B5-A820-98F4F7712D12),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMinMaxChannelGrowthFactors: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MinMaxChannel([out, retval] long* AValue);
    [propput, id(0x00000065)]
    HRESULT _stdcall MinMaxChannel([in] long AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall ArcNumber([out, retval] long* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall ArcNumber([in] long AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall GrowthFactors([out, retval] BSTR* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall GrowthFactors([in] BSTR AValue);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall GrowthFactorsValueByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall GrowthFactorsValueByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000006A)]
    HRESULT _stdcall GrowthFactorsCount([out, retval] long* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ValidFactors([out, retval] VARIANT_BOOL* AValue);
    [propput, id(0x0000006B)]
    HRESULT _stdcall ValidFactors([in] VARIANT_BOOL AValue);
  };

  [
    uuid(0D8515C5-BAAB-4BDC-9C25-BEA6CC34F336),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IHydrologyGrowthFactors: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall GaugeNumber([out, retval] long* AValue);
    [propput, id(0x00000065)]
    HRESULT _stdcall GaugeNumber([in] long AValue);
    [propget, id(0x00000066)]
    HRESULT _stdcall AFFGrowthFactors([out, retval] BSTR* AValue);
    [propput, id(0x00000066)]
    HRESULT _stdcall AFFGrowthFactors([in] BSTR AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall IRRGrowthFactors([out, retval] BSTR* AValue);
    [propput, id(0x00000067)]
    HRESULT _stdcall IRRGrowthFactors([in] BSTR AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall URBGrowthFactors([out, retval] BSTR* AValue);
    [propput, id(0x00000068)]
    HRESULT _stdcall URBGrowthFactors([in] BSTR AValue);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall AFFGrowthFactorsValueByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x0000006A)]
    HRESULT _stdcall AFFGrowthFactorsValueByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000006B)]
    HRESULT _stdcall IRRGrowthFactorsValueByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x0000006B)]
    HRESULT _stdcall IRRGrowthFactorsValueByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000006C)]
    HRESULT _stdcall URBGrowthFactorsValueByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x0000006C)]
    HRESULT _stdcall URBGrowthFactorsValueByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x0000006D)]
    HRESULT _stdcall AFFGrowthFactorsCount([out, retval] long* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall IRRGrowthFactorsCount([out, retval] long* Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall URBGrowthFactorsCount([out, retval] long* Value);
  };

  [
    uuid(6A27BCD6-2C5B-4EC2-AAFA-0F217A932880),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IGrowthFactors: IUnknown
  {
    [propget, id(0x000000CA)]
    HRESULT _stdcall DemandCentresGrowthByIndex([in] long AIndex, [out, retval] IDemandCentreGrowthFactors** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MinMaxChannelGrowthFactorByIndex([in] long Param2, [out, retval] IMinMaxChannelGrowthFactors** Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall HydrologyGrowthFactorByIndex([in] long AIndex, [out, retval] IHydrologyGrowthFactors** Value);
    [id(0x000000CD)]
    HRESULT _stdcall AddDemandCentresGrowthFactor([in] long AChannelNumber, [out, retval] IDemandCentreGrowthFactors** Value);
    [id(0x000000CE)]
    HRESULT _stdcall AddMinMaxChannelGrowthFactor([in] long AChannelNumber, [out, retval] IMinMaxChannelGrowthFactors** Value);
    [id(0x000000CF)]
    HRESULT _stdcall AddHydrologyGrowthFactor([in] long AGaugeNumber, [out, retval] IHydrologyGrowthFactors** Value);
    [id(0x000000D0)]
    HRESULT _stdcall RemoveDemandCentresGrowthFactor([in] long AChannelNumber, [out, retval] VARIANT_BOOL* AValue);
    [id(0x000000D1)]
    HRESULT _stdcall RemoveMinMaxChannelGrowthFactor([in] long AMinMaxChannel, [out, retval] VARIANT_BOOL* AValue);
    [id(0x000000D2)]
    HRESULT _stdcall RemoveHydrologyGrowthFactor([in] long AGaugeNumber, [out, retval] VARIANT_BOOL* AValue);
    [id(0x000000D3)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall NumberOfYears([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall NumberOfYears([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall DemandGrowthFactorsByChannel([in] long AChannelNumber, [out, retval] IDemandCentreGrowthFactors** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MinMaxChannelGrowthFactorsByMinMaxChannel([in] long AMinMaxChannel, [out, retval] IMinMaxChannelGrowthFactors** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall HydrologyGrowthFactorsByGaugeNumber([in] long AGaugeNumber, [out, retval] IHydrologyGrowthFactors** Value);
  };

  [
    uuid(4E79F3A5-BA49-48C7-B309-777A652733AD),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDisbenefitFunctionDefinition: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall NrOfEconomicYears([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall NrOfEconomicYears([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall EquationDisbenefitX([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall EquationDisbenefitX([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall EquationDisbenefitY([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall EquationDisbenefitY([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall EquationDisbenefitNonSupply([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall EquationDisbenefitNonSupply([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall EquationDisbenefitCost([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall EquationDisbenefitCost([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall EscalationRate([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall EscalationRate([in] BSTR Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall EscalationRateByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall EscalationRateByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall YearActive([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall YearActive([in] long Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall MonthActive([out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall MonthActive([in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall YearObsolete([out, retval] long* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall YearObsolete([in] long Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MonthObsolete([out, retval] long* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MonthObsolete([in] long Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall WQConstraint([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall WQConstraint([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall TDSConcentrationByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall TDSConcentrationByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall EscalationFactors([out, retval] BSTR* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall EscalationFactors([in] BSTR Value);
  };

  [
    uuid(137D8C62-B6D9-4E14-9E43-14514D84FE94),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ICorrespondingChannel: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall ChannelNumber([out, retval] long* AValue);
    [propput, id(0x000000C9)]
    HRESULT _stdcall ChannelNumber([in] long AValue);
    [propget, id(0x000000CA)]
    HRESULT _stdcall AbstractionChannel([out, retval] long* AValue);
    [propput, id(0x000000CA)]
    HRESULT _stdcall AbstractionChannel([in] long AValue);
    [propget, id(0x000000CB)]
    HRESULT _stdcall AssumedFactor([out, retval] double* AValue);
    [propput, id(0x000000CB)]
    HRESULT _stdcall AssumedFactor([in] double AValue);
    [id(0x000000CC)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
  };

  [
    uuid(0BA634F1-4408-4031-BA15-5415D9143739),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReturnFlowChannel: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall NewCorrespondingChannel([in] long ACorrespondingChannel, [out, retval] ICorrespondingChannel** Value);
    [id(0x00000066)]
    HRESULT _stdcall RemoveCorrespondingChannelByChannel([in] long AChannel, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000067)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall DemandChannel([out, retval] long* AValue);
    [propput, id(0x00000068)]
    HRESULT _stdcall DemandChannel([in] long AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall NumOfCorrespondingChannels([out, retval] long* AValue);
    [propput, id(0x00000069)]
    HRESULT _stdcall NumOfCorrespondingChannels([in] long AValue);
    [propget, id(0x0000006A)]
    HRESULT _stdcall GaugeNumber([out, retval] long* AValue);
    [propput, id(0x0000006A)]
    HRESULT _stdcall GaugeNumber([in] long AValue);
    [propget, id(0x0000006B)]
    HRESULT _stdcall MonthlyAvrgFactor([out, retval] double* AValue);
    [propput, id(0x0000006B)]
    HRESULT _stdcall MonthlyAvrgFactor([in] double AValue);
    [propget, id(0x0000006C)]
    HRESULT _stdcall CalibrationFactor([out, retval] double* AValue);
    [propput, id(0x0000006C)]
    HRESULT _stdcall CalibrationFactor([in] double AValue);
    [propget, id(0x0000006D)]
    HRESULT _stdcall MonthlyAvrgNetEvap([out, retval] double* AValue);
    [propput, id(0x0000006D)]
    HRESULT _stdcall MonthlyAvrgNetEvap([in] double AValue);
    [propget, id(0x0000006E)]
    HRESULT _stdcall RoutingConstant([out, retval] double* AValue);
    [propput, id(0x0000006E)]
    HRESULT _stdcall RoutingConstant([in] double AValue);
    [propget, id(0x00000070)]
    HRESULT _stdcall MultiplicationFactor([out, retval] double* AValue);
    [propput, id(0x00000070)]
    HRESULT _stdcall MultiplicationFactor([in] double AValue);
    [propget, id(0x0000006F)]
    HRESULT _stdcall CurtailmentFactor([out, retval] double* AValue);
    [propput, id(0x0000006F)]
    HRESULT _stdcall CurtailmentFactor([in] double AValue);
    [propget, id(0x00000071)]
    HRESULT _stdcall MonthlyPotentialEvapByIndex([in] long AIndex, [out, retval] double* AValue);
    [propput, id(0x00000071)]
    HRESULT _stdcall MonthlyPotentialEvapByIndex([in] long AIndex, [in] double AValue);
    [propget, id(0x00000072)]
    HRESULT _stdcall CorrespondingChannelByIndex([in] long AIndex, [out, retval] ICorrespondingChannel** AValue);
  };

  [
    uuid(888D1F6D-66A3-47BB-A347-103D19E39958),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReturnFlowChannelData: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall NewReturnFlowChannel([in] long ADemandChannel, [out, retval] IReturnFlowChannel** AValue);
    [id(0x00000066)]
    HRESULT _stdcall RemoveReturnFlowByChannel([in] long ADemandChannel, [out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReturnFlowChannelCount([out, retval] long* AValue);
    [propget, id(0x00000068)]
    HRESULT _stdcall ReturnFlowChannelByIndex([in] long AIndex, [out, retval] IReturnFlowChannel** AValue);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReturnFlowChannelByChannel([in] long ADemandChannel, [out, retval] IReturnFlowChannel** AValue);
  };

  [
    uuid(7AFE47CC-ED8E-4B0B-B68A-1F08C3CE2350),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWaterUsage: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall BlockIdentifier([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall BlockIdentifier([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall Identifier([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall PercAreaUnderCropType([out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall PercAreaUnderCropType([in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CropName([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall CropName([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall MonthlyWaterUse([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall MonthlyWaterUse([in] long AIndex, [in] double Value);
    [id(0x00000065)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
  };

  [
    uuid(000F54E0-B287-4850-AAEF-F7150CEFF141),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIrrigationBlock: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall BlockNodeNumber([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall BlockNodeNumber([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall BlockName([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall BlockName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall BlockDescription([out, retval] BSTR* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall BlockDescription([in] BSTR Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall MaxWaterAllocation([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall MaxWaterAllocation([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall FileName([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall FileName([in] BSTR Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall HydrologyNodeNumber([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall HydrologyNodeNumber([in] long Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall CanalTransportLoss([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall CanalTransportLoss([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall EfficiencyFactor([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall EfficiencyFactor([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ReturnFlowFactor([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall ReturnFlowFactor([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall NumberOfCropTypes([out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall NumberOfCropTypes([in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall RainAboveRainFactorSpecValue([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall RainAboveRainFactorSpecValue([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall RainBelowRainFactor([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall RainBelowRainFactor([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall RainCatchmentScalingFactor([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall RainCatchmentScalingFactor([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall AllocatedIrrigationArea([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall AllocatedIrrigationArea([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall UpperZoneReturnFlow([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall UpperZoneReturnFlow([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall LowerZoneReturnFlow([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall LowerZoneReturnFlow([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall ReturnFlowLoss([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall ReturnFlowLoss([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall UpperZoneSoilMoistureCapacity([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall UpperZoneSoilMoistureCapacity([in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall LowerZoneSoilMoistureCapacity([out, retval] double* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall LowerZoneSoilMoistureCapacity([in] double Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall UpperZoneSoilMoistureTarget([out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall UpperZoneSoilMoistureTarget([in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall InitialSoilMoistureStorage([out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall InitialSoilMoistureStorage([in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall RainfallFactor([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall RainfallFactor([in] long AMonth, [in] double Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall PanEvaporation([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall PanEvaporation([in] long AMonth, [in] double Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall APanConvFactor([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall APanConvFactor([in] long AMonth, [in] double Value);
    [id(0x0000007E)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000007F)]
    HRESULT _stdcall CreateWaterUse([out, retval] IWaterUsage** Value);
    [id(0x00000081)]
    HRESULT _stdcall RemoveWaterUse([in] long AIrrigationBlockWaterUsageID, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000083)]
    HRESULT _stdcall WaterUsageFactorByName([in] BSTR AName, [out, retval] IWaterUsage** Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall DiversionChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000085)]
    HRESULT _stdcall ReturnFlowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000087)]
    HRESULT _stdcall WaterUsageCount([out, retval] long* Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall WaterUsageFactorByIndex([in] long AIndex, [out, retval] IWaterUsage** Value);
    [propget, id(0x00000082)]
    HRESULT _stdcall WaterUsageFactorByID([in] long AIrrigationBlockWaterUsageID, [out, retval] IWaterUsage** Value);
    [propget, id(0x00000086)]
    HRESULT _stdcall DroughtApplicable([out, retval] long* Value);
    [propput, id(0x00000086)]
    HRESULT _stdcall DroughtApplicable([in] long Value);
    [propget, id(0x00000088)]
    HRESULT _stdcall CropWaterUseType([out, retval] long* Value);
    [propput, id(0x00000088)]
    HRESULT _stdcall CropWaterUseType([in] long Value);
    [propget, id(0x00000089)]
    HRESULT _stdcall HydrologyNode([out, retval] IReservoirData** Value);
    [propget, id(0x0000008A)]
    HRESULT _stdcall BlockNode([out, retval] IReservoirData** Value);
    [propget, id(0x0000008B)]
    HRESULT _stdcall IrrigationBlockType([out, retval] long* Value);
    [propput, id(0x0000008B)]
    HRESULT _stdcall IrrigationBlockType([in] long Value);
    [propget, id(0x0000008C)]
    HRESULT _stdcall CurtailIrrigationAbstraction([out, retval] long* Value);
    [propput, id(0x0000008C)]
    HRESULT _stdcall CurtailIrrigationAbstraction([in] long Value);
    [propget, id(0x0000008D)]
    HRESULT _stdcall CanalSeepageLoss([out, retval] double* Value);
    [propput, id(0x0000008D)]
    HRESULT _stdcall CanalSeepageLoss([in] double Value);
    [propget, id(0x0000008E)]
    HRESULT _stdcall CanalTransmissionLoss([out, retval] double* Value);
    [propput, id(0x0000008E)]
    HRESULT _stdcall CanalTransmissionLoss([in] double Value);
    [propget, id(0x0000008F)]
    HRESULT _stdcall UpperSoilOutflow([out, retval] double* Value);
    [propput, id(0x0000008F)]
    HRESULT _stdcall UpperSoilOutflow([in] double Value);
    [propget, id(0x00000090)]
    HRESULT _stdcall MaxUpperZoneMoisture([out, retval] double* Value);
    [propput, id(0x00000090)]
    HRESULT _stdcall MaxUpperZoneMoisture([in] double Value);
    [propget, id(0x00000091)]
    HRESULT _stdcall MinUpperZoneMoisture([out, retval] double* Value);
    [propput, id(0x00000091)]
    HRESULT _stdcall MinUpperZoneMoisture([in] double Value);
    [propget, id(0x00000092)]
    HRESULT _stdcall CropTypesCount([out, retval] long* Value);
    [propput, id(0x00000092)]
    HRESULT _stdcall CropTypesCount([in] long Value);
    [propget, id(0x00000093)]
    HRESULT _stdcall IrrigationSupplyCapacity([out, retval] double* Value);
    [propput, id(0x00000093)]
    HRESULT _stdcall IrrigationSupplyCapacity([in] double Value);
    [propget, id(0x00000094)]
    HRESULT _stdcall AllocatedAreaPointsCount([out, retval] long* Value);
    [propput, id(0x00000094)]
    HRESULT _stdcall AllocatedAreaPointsCount([in] long Value);
    [propget, id(0x00000095)]
    HRESULT _stdcall MethodIrrigatedAreas([out, retval] long* Value);
    [propput, id(0x00000095)]
    HRESULT _stdcall MethodIrrigatedAreas([in] long Value);
    [propget, id(0x00000096)]
    HRESULT _stdcall MaxWaterAllocationCount([out, retval] long* Value);
    [propput, id(0x00000096)]
    HRESULT _stdcall MaxWaterAllocationCount([in] long Value);
    [propget, id(0x00000097)]
    HRESULT _stdcall MethodMaxWaterAllocation([out, retval] long* Value);
    [propput, id(0x00000097)]
    HRESULT _stdcall MethodMaxWaterAllocation([in] long Value);
    [propget, id(0x00000098)]
    HRESULT _stdcall ReturnFlowVolumePointsCount([out, retval] long* Value);
    [propput, id(0x00000098)]
    HRESULT _stdcall ReturnFlowVolumePointsCount([in] long Value);
    [propget, id(0x00000099)]
    HRESULT _stdcall MethodReturnFlowVolume([out, retval] long* Value);
    [propput, id(0x00000099)]
    HRESULT _stdcall MethodReturnFlowVolume([in] long Value);
    [propget, id(0x0000009A)]
    HRESULT _stdcall SupplyCapacityPointsCount([out, retval] long* Value);
    [propput, id(0x0000009A)]
    HRESULT _stdcall SupplyCapacityPointsCount([in] long Value);
    [propget, id(0x0000009B)]
    HRESULT _stdcall MethodSupplyCapacity([out, retval] long* Value);
    [propput, id(0x0000009B)]
    HRESULT _stdcall MethodSupplyCapacity([in] long Value);
    [propget, id(0x0000009C)]
    HRESULT _stdcall MethodIrrigationEfficiencies([out, retval] long* Value);
    [propput, id(0x0000009C)]
    HRESULT _stdcall MethodIrrigationEfficiencies([in] long Value);
    [propget, id(0x0000009D)]
    HRESULT _stdcall ReturnFlowFactorsCount([out, retval] long* Value);
    [propput, id(0x0000009D)]
    HRESULT _stdcall ReturnFlowFactorsCount([in] long Value);
    [propget, id(0x0000009E)]
    HRESULT _stdcall MethodReturnFlowFactors([out, retval] long* Value);
    [propput, id(0x0000009E)]
    HRESULT _stdcall MethodReturnFlowFactors([in] long Value);
    [propget, id(0x0000009F)]
    HRESULT _stdcall IrrigatedAreasBreakPointCount([out, retval] long* Value);
    [propput, id(0x0000009F)]
    HRESULT _stdcall IrrigatedAreasBreakPointCount([in] long Value);
    [propget, id(0x000000A0)]
    HRESULT _stdcall MaximumWaterAllocationBreakPointCount([out, retval] long* Value);
    [propput, id(0x000000A0)]
    HRESULT _stdcall MaximumWaterAllocationBreakPointCount([in] long Value);
    [propget, id(0x000000A1)]
    HRESULT _stdcall ReturnFlowVolumeBreakPointsCount([out, retval] long* Value);
    [propput, id(0x000000A1)]
    HRESULT _stdcall ReturnFlowVolumeBreakPointsCount([in] long Value);
    [propget, id(0x000000A2)]
    HRESULT _stdcall SupplyCapacityBreakPointsCount([out, retval] long* Value);
    [propput, id(0x000000A2)]
    HRESULT _stdcall SupplyCapacityBreakPointsCount([in] long Value);
    [propget, id(0x000000A3)]
    HRESULT _stdcall IrrigationEfficiencyBreakPointsCount([out, retval] long* Value);
    [propput, id(0x000000A3)]
    HRESULT _stdcall IrrigationEfficiencyBreakPointsCount([in] long Value);
    [propget, id(0x000000A4)]
    HRESULT _stdcall ReturnFlowFactorBreakPointsCount([out, retval] long* Value);
    [propput, id(0x000000A4)]
    HRESULT _stdcall ReturnFlowFactorBreakPointsCount([in] long Value);
    [propget, id(0x000000A5)]
    HRESULT _stdcall IrrigatedAreasBreakPointYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000A5)]
    HRESULT _stdcall IrrigatedAreasBreakPointYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000A6)]
    HRESULT _stdcall IrrigatedAreaByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A6)]
    HRESULT _stdcall IrrigatedAreaByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000A7)]
    HRESULT _stdcall MaximumWaterAllocationBreakPointYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000A7)]
    HRESULT _stdcall MaximumWaterAllocationBreakPointYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000A8)]
    HRESULT _stdcall MaximumWaterAllocationByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A8)]
    HRESULT _stdcall MaximumWaterAllocationByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000A9)]
    HRESULT _stdcall MaximumWaterAllocationGrowthByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A9)]
    HRESULT _stdcall MaximumWaterAllocationGrowthByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000AA)]
    HRESULT _stdcall ReturnFlowVolumeBreakpointYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000AA)]
    HRESULT _stdcall ReturnFlowVolumeBreakpointYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000AB)]
    HRESULT _stdcall ReturnFlowVolumeByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000AB)]
    HRESULT _stdcall ReturnFlowVolumeByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000AC)]
    HRESULT _stdcall SupplyCapacityBreakpointYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000AC)]
    HRESULT _stdcall SupplyCapacityBreakpointYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000AD)]
    HRESULT _stdcall SupplyCapacityByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000AD)]
    HRESULT _stdcall SupplyCapacityByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000AE)]
    HRESULT _stdcall IrrigationEfficiencyBreakpointYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000AE)]
    HRESULT _stdcall IrrigationEfficiencyBreakpointYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000AF)]
    HRESULT _stdcall IrrigationEfficiencyByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000AF)]
    HRESULT _stdcall IrrigationEfficiencyByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000B0)]
    HRESULT _stdcall ReturnFlowFactorBreakpointYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000B0)]
    HRESULT _stdcall ReturnFlowFactorBreakpointYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000B1)]
    HRESULT _stdcall ReturnFlowFactorsByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000B1)]
    HRESULT _stdcall ReturnFlowFactorsByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000B2)]
    HRESULT _stdcall MultiplicationFactor([out, retval] double* Value);
    [propput, id(0x000000B2)]
    HRESULT _stdcall MultiplicationFactor([in] double Value);
  };

  [
    uuid(1EB11A40-22CB-4963-8671-E43007DF7ECE),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIrrigationBlockList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall IrrigationBlockCount([out, retval] long* Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall IrrigationBlockByName([in] BSTR AName, [out, retval] IIrrigationBlock** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall IrrigationBlockByIndex([in] long AIndex, [out, retval] IIrrigationBlock** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall IrrigationBlockByID([in] long AIndex, [out, retval] IIrrigationBlock** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall IrrigationBlockByBlockNodeNumber([in] long AIrrigationBlockNumber, [out, retval] IIrrigationBlock** Value);
    [id(0x00000069)]
    HRESULT _stdcall RemoveIrrigationBlock([in] long AIrrigationBlockID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall CreateIrrigationBlock([in] long AType, [out, retval] IIrrigationBlock** Value);
    [id(0x0000006D)]
    HRESULT _stdcall CopyCreate([in] long ABlockID, [out, retval] IIrrigationBlock** Value);
  };

  [
    uuid(654C7F3D-22C3-452D-9ECF-390DF6ADF242),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWetland: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NodeNumber([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall NodeNumber([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Name([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall StorageVolume([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall StorageVolume([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall InflowProportion([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall InflowProportion([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall OutflowProportion([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall OutflowProportion([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall UpstreamThreshold([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall UpstreamThreshold([in] double Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall InflowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall OutflowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall ReservoirDetails([out, retval] IReservoirData** Value);
  };

  [
    uuid(446FFBE4-5803-402F-BEF4-140D81A256EA),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWetlandList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall WetLandCount([out, retval] long* Value);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall WetlandByName([in] BSTR AName, [out, retval] IWetland** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall WetlandByIndex([in] long AIndex, [out, retval] IWetland** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall WetlandByID([in] long AWetlandID, [out, retval] IWetland** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall WetlandByNodeNumber([in] long AWetlandNumber, [out, retval] IWetland** Value);
    [id(0x0000006A)]
    HRESULT _stdcall RemoveWetland([in] long ANodeNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall CreateWetland([out, retval] IWetland** Value);
    [id(0x0000006D)]
    HRESULT _stdcall CopyCreate([in] long AWetlandID, [out, retval] IWetland** Value);
  };

  [
    uuid(D4A2C02D-7A9F-4A1A-8225-094B0E1B8C51),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDischargeCurve: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ElevationByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall ElevationByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall DischargeByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall DischargeByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CountNrOfPoints([out, retval] long* Value);
  };

  [
    uuid(65AEFFF7-6334-4C60-8E38-8F677FB6101D),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISandAquifer: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall HeadDifferenceByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall HeadDifferenceByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall AquiferFlowByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall AquiferFlowByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall DownStreamNodeInflowByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall DownStreamNodeInflowByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall RiverDepthByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall RiverDepthByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall CountNrOfPoints([out, retval] long* Value);
  };

  [
    uuid(1F6FBC5C-3A16-474E-9BE9-3F56112394E5),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IKFactors: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ChannelNumberByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall ChannelNumberByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall KFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall KFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CountNrOfPoints([out, retval] long* Value);
  };

  [
    uuid(DFA99D79-7271-4232-96E6-8085675FDFA4),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISubmergedOutlet: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ElevationDifferenceByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall ElevationDifferenceByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MonthlyAverageInflowByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall MonthlyAverageInflowByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall MonthlyAverageDivertedFlowByIndex([in] long ARow, [in] long ACol, [out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall MonthlyAverageDivertedFlowByIndex([in] long ARow, [in] long ACol, [in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall CountNrOfPoints([out, retval] long* Value);
  };

  [
    uuid(9477C918-43C9-4A59-8896-8DEBB9860B94),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IPumpStation: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall PumpingHeadByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall PumpingHeadByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall PumpingDischargeByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall PumpingDischargeByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall CountNrOfPoints([out, retval] long* Value);
  };

  [
    uuid(C4FCFE02-5B63-48EF-B598-073309F09DBF),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYMDemandCentreList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall YMDemandCentreCount([out, retval] long* Value);
    [id(0x00000066)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000067)]
    HRESULT _stdcall YMDemandCentreByName([in] BSTR AName, [out, retval] IYMDemandCentre** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall YMDemandCentreByIndex([in] long AIndex, [out, retval] IYMDemandCentre** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall YMDemandCentreByID([in] long AYMDemandCentreID, [out, retval] IYMDemandCentre** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall YMDemandCentreByNodeNumber([in] long AYMDemandCentreNodeNr, [out, retval] IYMDemandCentre** Value);
    [id(0x0000006B)]
    HRESULT _stdcall RemoveYMDemandCentre([in] long AYMDemandCentreNodeNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall CreateYMDemandCentre([out, retval] IYMDemandCentre** Value);
    [id(0x0000006D)]
    HRESULT _stdcall CopyCreate([in] long ANodeNumber, [out, retval] IYMDemandCentre** Value);
  };

  [
    uuid(0C70C527-39EE-4179-BD48-CD7C5BF39901),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYMDemandCentre: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall NodeNumber([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall NodeNumber([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Name([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall Description([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall NodeRefNr([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall NodeRefNr([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall AveReturnFlowFactor([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall AveReturnFlowFactor([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall AveEvaporation([out, retval] double* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall AveEvaporation([in] double Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall StdDeviationFactor([out, retval] double* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall StdDeviationFactor([in] double Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall RoutingConstant([out, retval] double* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall RoutingConstant([in] double Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall RainfallScalingFactor([out, retval] double* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall RainfallScalingFactor([in] double Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall TotalFlowLost([out, retval] double* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall TotalFlowLost([in] double Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall EvapoTranspiration([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall EvapoTranspiration([in] long AMonth, [in] double Value);
    [id(0x00000065)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ConsumptiveUseChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReclaimationChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ConsumptiveUseChannelNr([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ConsumptiveUseChannelNr([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReclaimationPlantExists([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall ReclaimationPlantExists([in] VARIANT_BOOL Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReclaimationChannelNr([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall ReclaimationChannelNr([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall ReturnFlowFeatureList([out, retval] IYMDemandCentreReturnFlowFeatureList** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall SupplyChannelNrs([out, retval] BSTR* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall SupplyChannelCount([out, retval] long* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall SupplyChannelByIndex([in] long AIndex, [out, retval] IGeneralFlowChannel** Value);
  };

  [
    uuid(2C7B7AEC-91B4-4B89-BB33-E6DC5E130CE5),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IStreamFlowReduction: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall InflowNodeNumber([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall InflowNodeNumber([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall CoveredArea([out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall CoveredArea([in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall UnitRunoffFileName([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall UnitRunoffFileName([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall SoilMoistureFileName([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall SoilMoistureFileName([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall SFRName([out, retval] BSTR* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall SFRName([in] BSTR Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall SFRDescription([out, retval] BSTR* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall SFRDescription([in] BSTR Value);
    [id(0x00000065)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall UnitRunoffFileData([out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SoilMoistureFileData([out, retval] BSTR* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall InflowNodeDetails([out, retval] IReservoirData** Value);
  };

  [
    uuid(EF13F588-AB78-4A0F-BF0C-C4168E8C8F35),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IStreamFlowReductionList: IUnknown
  {
    [id(0x0000006E)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall StreamFlowReductionCount([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall StreamFlowReductionByIndex([in] long AIndex, [out, retval] IStreamFlowReduction** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall StreamFlowReductionByID([in] long AStreamFlowReductionID, [out, retval] IStreamFlowReduction** Value);
    [id(0x00000065)]
    HRESULT _stdcall StreamFlowReductionIDsPerInflowNode([in] long AInflowNodeNumber, [out, retval] BSTR* Value);
    [id(0x00000066)]
    HRESULT _stdcall CopyCreate([in] long AStreamFlowReductionID, [out, retval] IStreamFlowReduction** Value);
  };

  [
    uuid(C740A20C-B0F8-4F21-BCA3-D058A4C51016),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYMDemandCentreReturnFlowFeature: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FeatureID([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Channel([out, retval] IGeneralFlowChannel** Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Channel([in] IGeneralFlowChannel* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall DemandCentreID([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall DemandCentreID([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ChannelNr([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall ChannelNr([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall TotalReturnFlow([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall TotalReturnFlow([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall FlowDiversion([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall FlowDiversion([in] double Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(E40D8681-53EE-42BE-B7BE-EE2BC1FCEA3D),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYMDemandCentreReturnFlowFeatureList: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall ReturnFlowFeatureCount([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ReturnFlowFeatureByIndex([in] long AIndex, [out, retval] IYMDemandCentreReturnFlowFeature** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ReturnFlowFeatureByID([in] long AFeatureID, [out, retval] IYMDemandCentreReturnFlowFeature** Value);
    [id(0x000000CC)]
    HRESULT _stdcall CreateReturnFlowFeature([in] long ADemandCentreID, [out, retval] IYMDemandCentreReturnFlowFeature** Value);
    [id(0x000000CD)]
    HRESULT _stdcall RemoveReturnFlowFeatureWithNr([in] long ADemandCentreID, [in] long AChannelNr, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CE)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
  };

  [
    uuid(5938EAE4-44E1-4C7B-9FFB-748C85FA03C5),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IOpenCast: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall PitName([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall PitName([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall CoalReserveArea([out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall CoalReserveArea([in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall WorkingsArea([out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall WorkingsArea([in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall DisturbedWorkingsArea([out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall DisturbedWorkingsArea([in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall DisturbedArea([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall DisturbedArea([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall WaterSurfaceEvapArea([out, retval] double* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall WaterSurfaceEvapArea([in] double Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall DisturbedAreaRunoff([out, retval] double* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall DisturbedAreaRunoff([in] double Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall DecantVolume([out, retval] double* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall DecantVolume([in] double Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall SeepageVolume([out, retval] double* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall SeepageVolume([in] double Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall AnalysisStartVolume([out, retval] double* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall AnalysisStartVolume([in] double Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall MaximumSeepageRate([out, retval] double* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall MaximumSeepageRate([in] double Value);
    [propget, id(0x000000D5)]
    HRESULT _stdcall SeepageExponent([out, retval] double* Value);
    [propput, id(0x000000D5)]
    HRESULT _stdcall SeepageExponent([in] double Value);
    [propget, id(0x000000D6)]
    HRESULT _stdcall PCDSurfaceArea([out, retval] double* Value);
    [propput, id(0x000000D6)]
    HRESULT _stdcall PCDSurfaceArea([in] double Value);
    [propget, id(0x000000D7)]
    HRESULT _stdcall PCDStorageCapacity([out, retval] double* Value);
    [propput, id(0x000000D7)]
    HRESULT _stdcall PCDStorageCapacity([in] double Value);
    [propget, id(0x000000D8)]
    HRESULT _stdcall PCDAnalysisStartVolume([out, retval] double* Value);
    [propput, id(0x000000D8)]
    HRESULT _stdcall PCDAnalysisStartVolume([in] double Value);
    [propget, id(0x000000D9)]
    HRESULT _stdcall DisturbedWorkingsAreaRunoff([out, retval] double* Value);
    [propput, id(0x000000D9)]
    HRESULT _stdcall DisturbedWorkingsAreaRunoff([in] double Value);
    [propget, id(0x000000DA)]
    HRESULT _stdcall DisturbedRechargeFactor([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000DA)]
    HRESULT _stdcall DisturbedRechargeFactor([in] long AIndex, [in] double Value);
    [propget, id(0x000000DB)]
    HRESULT _stdcall WorkingAreaRechargeFactor([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000DB)]
    HRESULT _stdcall WorkingAreaRechargeFactor([in] long AIndex, [in] double Value);
    [id(0x000000DC)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
  };

  [
    uuid(C6A51A66-97DA-4A20-B862-A727F2A0861E),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IUnderground: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall UndergroundSectionName([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall UndergroundSectionName([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ChannelNumberToUGDam([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall ChannelNumberToUGDam([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall UpstreamCatchmentArea([out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall UpstreamCatchmentArea([in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall BoardPillarCatchmentArea([out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall BoardPillarCatchmentArea([in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall HighExtractionCatchmentArea([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall HighExtractionCatchmentArea([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall HighExtractionAreaRunoffFactor([out, retval] double* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall HighExtractionAreaRunoffFactor([in] double Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall UpstreamRunoffPortion([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall UpstreamRunoffPortion([in] long AIndex, [in] double Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall BoardAndPilarRechargeFactor([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall BoardAndPilarRechargeFactor([in] long AIndex, [in] double Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall HighExtractionRechargeFactor([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall HighExtractionRechargeFactor([in] long AIndex, [in] double Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall ChannelToUnderGroundDam([out, retval] IGeneralFlowChannel** Value);
    [id(0x000000D4)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x000000D5)]
    HRESULT _stdcall UndergroundDam([out, retval] IReservoirData** Value);
  };

  [
    uuid(6880B920-1E02-4BDA-B71E-504328F65BB1),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISlurryDump: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall DumpName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall DumpName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall DumpSurfaceArea([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall DumpSurfaceArea([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RunoffFactorToPCD([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall RunoffFactorToPCD([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall SeepageSplitFactor([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall SeepageSplitFactor([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PCDStorageCapacity([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall PCDStorageCapacity([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PCDSurfaceArea([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall PCDSurfaceArea([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall PCDAnalysisStartVolume([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall PCDAnalysisStartVolume([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall RechargeFactor([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall RechargeFactor([in] long AIndex, [in] double Value);
    [id(0x0000006E)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
  };

  [
    uuid(0701352E-A9A4-4C99-A665-097099769D6F),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMine: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NodeNumber([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MineName([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall MineName([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RiverChannelNumber([out, retval] long* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall PCDChannelNumber([out, retval] long* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall HydrologyNodeNumber([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall HydrologyNodeNumber([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall BeneficiationPlantArea([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall BeneficiationPlantArea([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall BeneficiationRunoffFactor([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall BeneficiationRunoffFactor([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall PanEvaporation([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall PanEvaporation([in] long AIndex, [in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall LakeEvaporation([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall LakeEvaporation([in] long AIndex, [in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall OpenCastCount([out, retval] long* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall UndergroundCount([out, retval] long* Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall SlurryDumpCount([out, retval] long* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall OpenCastByIndex([in] long AIndex, [out, retval] IOpenCast** Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall OpenCastByIdentifier([in] long AIdentifier, [out, retval] IOpenCast** Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall UnderGroundByIndex([in] long AIndex, [out, retval] IUnderground** Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall UnderGroundByIdentifier([in] long AIdentifier, [out, retval] IUnderground** Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall SlurryDumpByIndex([in] long AIndex, [out, retval] ISlurryDump** Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall SlurryDumpByIdentifier([in] long AIdentifier, [out, retval] ISlurryDump** Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall RiverChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall PCDChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall PolutionControlDam([out, retval] IReservoirData** Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall HydrologyNode([out, retval] IReservoirData** Value);
    [id(0x0000007C)]
    HRESULT _stdcall CreateOpenCast([out, retval] IOpenCast** Value);
    [id(0x0000007D)]
    HRESULT _stdcall CreateUnderGround([out, retval] IUnderground** Value);
    [id(0x0000007E)]
    HRESULT _stdcall CreateSlurryDump([out, retval] ISlurryDump** Value);
    [id(0x0000007F)]
    HRESULT _stdcall RemoveOpenCast([in] long AIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000080)]
    HRESULT _stdcall RemoveUnderGround([in] long AIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000081)]
    HRESULT _stdcall RemoveSlurryDump([in] long AIdentifier, [out, retval] VARIANT_BOOL* Value);
    [id(0x00000082)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x00000083)]
    HRESULT _stdcall RiverNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall MineNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000085)]
    HRESULT _stdcall CatchmentRefNrByReservoirID([in] long AReservoirID, [out, retval] long* Value);
    [propget, id(0x00000086)]
    HRESULT _stdcall PolutionControlDamExists([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000086)]
    HRESULT _stdcall PolutionControlDamExists([in] VARIANT_BOOL Value);
  };

  [
    uuid(444D81E8-F01B-4545-8D27-86D19E266DF6),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMineList: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall CreateMine([out, retval] IMine** Value);
    [id(0x00000066)]
    HRESULT _stdcall RemoveMine([in] long AMineNumber, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MineCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall MineByIndex([in] long AIndex, [out, retval] IMine** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall MineByIdentifier([in] long AIdentifier, [out, retval] IMine** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MineByNodeNumber([in] long AMineNodeNumber, [out, retval] IMine** Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MineByPCDNumber([in] long APCDNumber, [out, retval] IMine** Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ChannelToUnderGroundDamByDamNumber([in] long AReservoirNumber, [out, retval] IGeneralFlowChannel** Value);
    [id(0x0000006E)]
    HRESULT _stdcall CopyCreate([in] long AMineNumber, [out, retval] IMine** Value);
  };

  [
    uuid(33D69FE6-3CC2-4C88-B246-B95EA4A1A3C9),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IWRYMRunOptions: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall RunSilent([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall RunSilent([in] VARIANT_BOOL Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall AutoRun([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall AutoRun([in] VARIANT_BOOL Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall CloseOnComplete([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall CloseOnComplete([in] VARIANT_BOOL Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall RunDebugVersion([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall RunDebugVersion([in] VARIANT_BOOL Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall WRYM_DAT([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall WRYM_DAT([in] BSTR Value);
    [id(0x00000065)]
    HRESULT _stdcall SaveToINI(void);
    [propget, id(0x00000066)]
    HRESULT _stdcall CreateSumOutFile([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall CreateSumOutFile([in] VARIANT_BOOL Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SaveOutputAsBinaryFile([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall SaveOutputAsBinaryFile([in] VARIANT_BOOL Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall SaveOutputToDB([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall SaveOutputToDB([in] VARIANT_BOOL Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall FirmYield([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall FirmYield([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall SumOutBlobAddress([out, retval] unsigned long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall SumOutBlobAddress([in] unsigned long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall BlobSize([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall BlobSize([in] long Value);
  };

  [
    uuid(FE44BCBF-7DAC-41BC-A096-9633F83B9CB7),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IYieldModelIterationTracker: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall IntervalCount([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall IntervalCount([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MonthCount([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall MonthCount([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall YearCount([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall YearCount([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall TargetDraftCount([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall TargetDraftCount([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall SequenceCount([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall SequenceCount([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall CurrentMonth([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall CurrentMonth([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall CurrentInterval([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall CurrentInterval([in] long Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall CurrentYearGregorian([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall CurrentYearGregorian([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall CurrentYearIndex([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall CurrentYearIndex([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall CurrentTargetDraft([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall CurrentTargetDraft([in] long Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall CurrentSequence([out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall CurrentSequence([in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall CurrentGood([out, retval] long* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall CurrentGood([in] long Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall Abort([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall Abort([in] VARIANT_BOOL Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall SimulationInProgress([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall SimulationInProgress([in] VARIANT_BOOL Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall IterationEventHandler([out, retval] IIterationEventHandler** Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall IterationEventHandler([in] IIterationEventHandler* Value);
    [id(0x00000076)]
    HRESULT _stdcall SaveToINI(void);
    [propget, id(0x00000072)]
    HRESULT _stdcall PreviousMonth([out, retval] long* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall PreviousMonth([in] long Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall SubsequentMonth([out, retval] long* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall SubsequentMonth([in] long Value);
  };

  [
    uuid(6964220E-D400-4DD9-9318-6F45D7011980),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IIterationEventHandler: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall OnIterationEvent([in] BSTR AIterationName, [out, retval] VARIANT_BOOL* Result);
  };

  [
    uuid(27CA6B7A-8A20-4BA2-83C6-BB94692D3556),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ICurtailedChannel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall AllocationFactors([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall AllocationFactors([in] long AIndex, [in] double Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall AllocationFactorsCount([out, retval] long* ACount);
    [propput, id(0x00000068)]
    HRESULT _stdcall AllocationFactorsCount([in] long ACount);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(D19E4AF0-BED8-4B77-B674-91A65ACBF719),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IDroughtRestriction: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ChannelNumbers([out, retval] BSTR* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ChannelNumbers([in] BSTR Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReservoirNumbers([out, retval] BSTR* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall ReservoirNumbers([in] BSTR Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReferenceStorageVolumes([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall ReferenceStorageVolumes([in] long AIndex, [in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall AllocationFactors([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall AllocationFactors([in] long AIndex, [in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall DroughtRestrictionName([out, retval] BSTR* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall DroughtRestrictionName([in] BSTR Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ReservoirNumberByIndex([in] long AIndex, [out, retval] long* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ChannelNumberByIndex([in] long AIndex, [out, retval] long* Value);
    [id(0x0000006F)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(7802E932-40AC-448E-A2BF-0B446E6AD0D1),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ICurtailmentAndDrought: IUnknown
  {
    [propget, id(0x000000CA)]
    HRESULT _stdcall CurtailmentPeriodCount([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall CurtailmentPeriodCount([in] long Value);
    [id(0x000000CB)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall StartMonthsByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall StartMonthsByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall CurtailedChannelCount([out, retval] long* Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall CurtailedChannelByIndex([in] long AIndex, [out, retval] ICurtailedChannel** Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall CurtailedChannelByID([in] long AIdentifier, [out, retval] ICurtailedChannel** Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall CurtailedChannelByChannelNumber([in] long AChannelNumber, [out, retval] ICurtailedChannel** Value);
    [id(0x000000D1)]
    HRESULT _stdcall CreateChannelCurtailment([in] long AChannelNumber, [out, retval] ICurtailedChannel** AResult);
    [id(0x000000D2)]
    HRESULT _stdcall RemoveChannelCurtailment([in] long AChannelNumber, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x000000D3)]
    HRESULT _stdcall DroughtRestrictionCount([out, retval] long* Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall DroughtRestrictionByIndex([in] long AIndex, [out, retval] IDroughtRestriction** AResult);
    [propget, id(0x000000D5)]
    HRESULT _stdcall DroughtRestrictionByID([in] long AIdentifier, [out, retval] IDroughtRestriction** AResult);
    [id(0x000000D6)]
    HRESULT _stdcall CreateDroughtRestriction([out, retval] IDroughtRestriction** AResult);
    [id(0x000000D7)]
    HRESULT _stdcall RemoveDroughtRestriction([in] long AIdentifier, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000065)]
    HRESULT _stdcall ImplementCurtailmentFile([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ImplementCurtailmentFile([in] VARIANT_BOOL Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall DroughtRestrictionByReservoirNumber([in] long AReservoirNumber, [out, retval] BSTR* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall DroughtRestrictionByChannelNumber([in] long AChannelNumber, [out, retval] BSTR* Value);
  };

  [
    uuid(563FEF84-230F-4F31-B59F-58A9F4F18788),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISummaryOutputData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SumOutBlob([out, retval] ISumOutBlob** Value);
    [id(0x00000066)]
    HRESULT _stdcall GetElementsByElementDataType([in] enum TOutputDataType AElementDataType, [in, out] BSTR* ADataContainer, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000067)]
    HRESULT _stdcall GetBlockDataByElementID([in, out] BSTR* ADataContainer, [in] enum TOutputDataType ADataType, [in] long ANetworkElementID, [in, out] BSTR* AErrors, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000068)]
    HRESULT _stdcall GetBlockAverageDataByElementID([in, out] BSTR* ADataContainer, [in] enum TOutputDataType ADataType, [in] long ANetworkElementID, [in, out] BSTR* AErrors, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000069)]
    HRESULT _stdcall GetPeriodChangeDataByElementID([in, out] BSTR* ADataContainer, [in] enum TOutputDataType ADataType, [in] long ANetworkElementID, [in, out] BSTR* AErrors, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(05247B86-D2B2-4694-A346-4678D4AF6E6D),
    version(1.0),
    dual,
    oleautomation
  ]
  interface ISumOutBlob: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall WriteBlobToFile([out, retval] VARIANT_BOOL* Value);
    [id(0x00000066)]
    HRESULT _stdcall ReadBlobFromFile([out, retval] VARIANT_BOOL* Value);
    [id(0x00000067)]
    HRESULT _stdcall LoadBlobFromDB([out, retval] VARIANT_BOOL* Value);
    [id(0x00000068)]
    HRESULT _stdcall SaveBlobToDB([out, retval] VARIANT_BOOL* Value);
    [id(0x00000069)]
    HRESULT _stdcall CopyFromMemory([in] unsigned long APointer, [in] long ASize, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006A)]
    HRESULT _stdcall WriteSumOutFile([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall BlobLoaded([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall BlobLoaded([in] VARIANT_BOOL Value);
  };

  [
    uuid(8AAB9F91-24FB-40F4-82F2-3324C658E25F),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IGroundWater: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall AquiferStorativity([out, retval] double* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall AquiferStorativity([in] double Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall AquiferStaticWaterLevel([out, retval] double* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall AquiferStaticWaterLevel([in] double Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall UnsaturatedStorageCapacity([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall UnsaturatedStorageCapacity([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall InitialUnsaturatedStorage([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall InitialUnsaturatedStorage([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall MaximumDischargeRate([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall MaximumDischargeRate([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall MovingAverageRecharge([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall MovingAverageRecharge([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PitmanSoilMoistureCapacity([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall PitmanSoilMoistureCapacity([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PitmanSoilMoistureStorageCapacity([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall PitmanSoilMoistureStorageCapacity([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall PitmansoilMoistureFlowState([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall PitmansoilMoistureFlowState([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall PitmanSoilMoistureFlowEquation([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall PitmanSoilMoistureFlowEquation([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall PitmanMaximumGroundwaterFlow([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall PitmanMaximumGroundwaterFlow([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall PitmanSoilMoistureRechargeEquation([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall PitmanSoilMoistureRechargeEquation([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall PitmanGroundwaterFlow([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall PitmanGroundwaterFlow([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MaximumRateOfGroundwaterBaseFlow([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MaximumRateOfGroundwaterBaseFlow([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall PowerHeadDifferenceBaseFlowEquation([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall PowerHeadDifferenceBaseFlowEquation([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall MaximumHydrologicalGradient([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall MaximumHydrologicalGradient([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall AquiferTransmissivity([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall AquiferTransmissivity([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall BoreHoleDistanceToRiver([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall BoreHoleDistanceToRiver([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall MaximumGroundwaterAbstraction([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall MaximumGroundwaterAbstraction([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall ParameterK2([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall ParameterK2([in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall ParameterK3([out, retval] double* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall ParameterK3([in] double Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall MonthlyWaterEvaporation([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall MonthlyWaterEvaporation([in] long AIndex, [in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall MonthlyWaterUsageFactors([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall MonthlyWaterUsageFactors([in] long AIndex, [in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall GroundWaterEvaporationArea([out, retval] double* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall GroundWaterEvaporationArea([in] double Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall Description([in] BSTR Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall Name([in] BSTR Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall AbstractionNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000081)]
    HRESULT _stdcall CollectionNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000082)]
    HRESULT _stdcall BaseFlowNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000083)]
    HRESULT _stdcall AquiferInflowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall AquiferInflowChannelNr([out, retval] long* Value);
    [propget, id(0x00000085)]
    HRESULT _stdcall AquiferExcessInterflowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000086)]
    HRESULT _stdcall AquiferExcessInterflowChannelNr([out, retval] long* Value);
    [propget, id(0x00000087)]
    HRESULT _stdcall GroundWaterBaseflowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000088)]
    HRESULT _stdcall GroundWaterBaseflowChannelNr([out, retval] long* Value);
    [propget, id(0x00000089)]
    HRESULT _stdcall AbstractionFromAquiferChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000008A)]
    HRESULT _stdcall AbstractionFromAquiferChannelNr([out, retval] long* Value);
    [propget, id(0x0000008B)]
    HRESULT _stdcall AbstractionFromBaseFlowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000008C)]
    HRESULT _stdcall AbstractionFromBaseflowChannelNr([out, retval] long* Value);
    [propget, id(0x0000008D)]
    HRESULT _stdcall OutflowToDownstreamAquiferChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000008E)]
    HRESULT _stdcall OutflowToDownstreamAquiferChannelNr([out, retval] long* Value);
    [propget, id(0x0000008F)]
    HRESULT _stdcall SurfaceRunoffAndSoilInterflowChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000090)]
    HRESULT _stdcall SurfaceRunoffAndSoilInterflowChannelNr([out, retval] long* Value);
    [id(0x00000091)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000092)]
    HRESULT _stdcall AbstractionNodeNr([out, retval] long* Value);
    [propget, id(0x00000093)]
    HRESULT _stdcall CollectionNodeNr([out, retval] long* Value);
    [propget, id(0x00000094)]
    HRESULT _stdcall BaseFlowNodeNr([out, retval] long* Value);
    [propget, id(0x00000095)]
    HRESULT _stdcall AquiferNode([out, retval] IReservoirData** Value);
    [propget, id(0x00000096)]
    HRESULT _stdcall AquiferNodeNr([out, retval] long* Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall RefNodeNumber([out, retval] long* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall RefNodeNumber([in] long Value);
    [propget, id(0x00000097)]
    HRESULT _stdcall GroundWaterBaseFlowRemainderChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x00000098)]
    HRESULT _stdcall GroundWaterBaseFlowRemainderChannelNr([out, retval] long* Value);
    [propget, id(0x00000099)]
    HRESULT _stdcall OutflowToNetworkChannelNr([out, retval] long* Value);
    [propget, id(0x0000009A)]
    HRESULT _stdcall OutflowToNetworkChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000009B)]
    HRESULT _stdcall GroundWaterAbstractionChannelNr([out, retval] long* Value);
    [propget, id(0x0000009C)]
    HRESULT _stdcall GroundWaterAbstractionChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000009D)]
    HRESULT _stdcall InflowFromUpstreamAquiferChannel([out, retval] IGeneralFlowChannel** Value);
    [propget, id(0x0000009E)]
    HRESULT _stdcall InflowFromUpstreamAquiferChannelNr([out, retval] long* Value);
  };

  [
    uuid(CEC4F1FD-7A19-4D8F-9857-93A63BEFE09A),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IGroundWaterList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall GroundWaterCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall GroundWaterByIndex([in] long AIndex, [out, retval] IGroundWater** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall GroundWaterByID([in] long AGroundWaterID, [out, retval] IGroundWater** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall GroundWaterByNodeNumber([in] long ANodeNumber, [out, retval] IGroundWater** Value);
    [id(0x00000069)]
    HRESULT _stdcall CreateGroundWater([out, retval] IGroundWater** Value);
    [id(0x0000006A)]
    HRESULT _stdcall RemoveGroundWater([in] long AGroundWaterID, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall GroundWaterByBaseFlowNumber([in] long ABaseFlowNumber, [out, retval] IGroundWater** Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall GroundWaterByAbstractionNodeNumber([in] long AAbstractionNodeNumber, [out, retval] IGroundWater** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall GroundWaterByCollectionNodeNumber([in] long ACollectionNodeNumber, [out, retval] IGroundWater** Value);
    [id(0x0000006F)]
    HRESULT _stdcall CopyGroundwater([in] long AGroundWaterID, [out, retval] IGroundWater** Value);
  };

  [
    uuid(53AE96E0-3DF8-454F-840D-FC7AD7E13025),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IImplementedNetworkFeatures: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PowerPlantFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall PowerPlantFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall IrrigationAreaFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall IrrigationAreaFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall IrrigationBlockFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall IrrigationBlockFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall WetlandFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall WetlandFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall YMDemandCentreFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall YMDemandCentreFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall StreamFlowReductionFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall StreamFlowReductionFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall IFRSiteFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall IFRSiteFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MineFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall MineFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall CurtailmentAndDroughtFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall CurtailmentAndDroughtFeatureImplemented([in] VARIANT_BOOL Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall GroundWaterFeatureImplemented([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall GroundWaterFeatureImplemented([in] VARIANT_BOOL Value);
  };

  [
    uuid(1D915594-27DF-48D1-A410-8D28D1B2ADA6),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirAreaGroup: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall GroupID([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall GroupName([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall GroupName([in] BSTR Value);
    [id(0x000000CB)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(BA43B71A-8542-45CE-B5D8-8D9D268DED94),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IReservoirAreaGroupList: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall GroupAreaCount([out, retval] long* Value);
    [id(0x00000066)]
    HRESULT _stdcall ReservoirAreaGroupByIndex([in] long AIndex, [out, retval] IReservoirAreaGroup** AResult);
    [id(0x00000067)]
    HRESULT _stdcall ReservoirAreaGroupByID([in] long AGroupID, [out, retval] IReservoirAreaGroup** AResult);
    [id(0x00000068)]
    HRESULT _stdcall ReservoirAreaGroupByName([in] BSTR AGroupName, [out, retval] IReservoirAreaGroup** AResult);
    [id(0x00000069)]
    HRESULT _stdcall CreateReservoirAreaGroup([out, retval] IReservoirAreaGroup** AResult);
    [id(0x0000006A)]
    HRESULT _stdcall RemoveReservoirAreaGroup([in] long AGroupID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(BF54785C-8D2E-4FCC-9BAC-ABFCC36FD27C),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMineSubCatchmentList: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall CreateMineSubCatchment([in] long ACatchmentRefNr, [out, retval] IMineSubCatchment** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MineSubCatchmentCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MineSubCatchmentByRefNodeNr([in] long ARefNodeNr, [out, retval] IMineSubCatchment** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall MineSubCatchmentByIdentifier([in] long AIdentifier, [out, retval] IMineSubCatchment** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall MineSubCatchmentByIndex([in] long AIndex, [out, retval] IMineSubCatchment** Value);
    [id(0x0000006A)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
  };

  [
    uuid(4DC181F1-7FBE-4BEB-A3B2-C03468D45E9C),
    version(1.0),
    dual,
    oleautomation
  ]
  interface IMineSubCatchment: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall CatchmentReferenceNr([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall CatchmentReferenceNr([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MinimunGroundwaterFlowVolume([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall MinimunGroundwaterFlowVolume([in] long AIndex, [in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ProportionAntecedentFlows([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ProportionAntecedentFlows([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall GroundwaterFlowVolume([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall GroundwaterFlowVolume([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall AntecedentRunoffDecayFactor([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall AntecedentRunoffDecayFactor([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall CatchmentRefName([out, retval] BSTR* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall CatchmentRefName([in] BSTR Value);
    [id(0x0000006C)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* AValue);
    [propget, id(0x0000006D)]
    HRESULT _stdcall CatchmentRefUsed([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall CatchmentRefUsed([in] VARIANT_BOOL Value);
  };

  [
    uuid(2EB5ED1C-D4B5-4CA6-91BD-AC1EB88DF393),
    dual,
    oleautomation
  ]
  interface IChannelTariff: IUnknown
  {
    [id(0x000000C9)]
    VARIANT_BOOL _stdcall Populate([in] long AIdentifier, [in] long AChannelNumber, [in] double ATariff, [in] BSTR AEscalationFactors);
    [id(0x000000CA)]
    VARIANT_BOOL _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Identifier([out, retval] long* AValue);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ChannelNumber([out, retval] long* AValue);
    [propput, id(0x000000CC)]
    HRESULT _stdcall ChannelNumber([in] long AValue);
    [propget, id(0x000000CE)]
    HRESULT _stdcall EscalationFactors([out, retval] BSTR* AValue);
    [propput, id(0x000000CE)]
    HRESULT _stdcall EscalationFactors([in] BSTR AValue);
    [propget, id(0x000000CF)]
    HRESULT _stdcall Tariff([out, retval] double* AValue);
    [propput, id(0x000000CF)]
    HRESULT _stdcall Tariff([in] double AValue);
  };

  [
    uuid(14DF8EB9-A444-4CB0-87CE-9A27444D0F93),
    dual,
    oleautomation
  ]
  interface ITariffCalculationData: IUnknown
  {
    [id(0x000000C9)]
    HRESULT _stdcall NewChannelTariff([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [id(0x000000CA)]
    HRESULT _stdcall RemoveChannelTariffByChannelNumber([in] long AChannelNumber, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ChannelTariffCount([out, retval] long* Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall ChannelTariffByIndex([in] long AIndex, [out, retval] IChannelTariff** Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall ChannelTariffByChannelNumber([in] long AChannelNumber, [out, retval] IChannelTariff** Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall DataYears([out, retval] long* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall DataYears([in] long Value);
    [id(0x00000065)]
    HRESULT _stdcall Populate([in] long ADataYears, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(F3EAE7EA-2F4C-490C-A455-60FD75B344B9),
    dual,
    oleautomation
  ]
  interface IPlanningModel: IYieldModel
  {
    [propget, id(0x000000EA)]
    HRESULT _stdcall PlanningModelData([out, retval] IPlanningModelData** Value);
  };

  [
    uuid(D66F4E22-7296-48C7-9303-6FC166C8B9F2),
    dual,
    oleautomation
  ]
  interface IMinMaxUpperBoundChannel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NoOfBoundedChannels([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall BoundedChannels([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall BoundedChannels([in] BSTR Value);
    [id(0x00000068)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(C7931A9B-780E-46CC-B0F1-B16847AC76DA),
    dual,
    oleautomation
  ]
  interface IWQConstriantsChannel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ChannelNumber([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Target([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Target([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall NoOfRefChannelsBlending([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall NoOfRefChannelsBlending([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ReservoirRef([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ReservoirRef([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall WQConType([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall WQConType([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall BlendingChannels([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall BlendingChannels([in] BSTR Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall BlendingChannelFactors([out, retval] BSTR* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall BlendingChannelFactors([in] BSTR Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall LimitingSlope([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall LimitingSlope([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall EstimatedRelease([out, retval] BSTR* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall EstimatedRelease([in] BSTR Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall Concentration([out, retval] BSTR* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall Concentration([in] BSTR Value);
    [id(0x0000006F)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(F9F7CE9B-61C1-45BD-84EA-B11041A13F4A),
    dual,
    oleautomation
  ]
  interface IWQConstraintData: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall NewWQConstraintsChannels([in] long AChannel, [out, retval] IWQConstriantsChannel* Value);
    [id(0x00000066)]
    HRESULT _stdcall RemoveWQConstriantsChannel([in] long AChannelNo, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall WQConstraintsChannelCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall WQConstraintsChannelByIndex([in] long AIndex, [out, retval] IWQConstriantsChannel* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall WQConstraintsChannelByChannelNo([in] long AChannelNo, [out, retval] IWQConstriantsChannel* Value);
    [id(0x0000006A)]
    HRESULT _stdcall NewMinMaxUpperBoundChannel([in] long AChannelNo, [out, retval] IMinMaxUpperBoundChannel* Value);
    [id(0x0000006B)]
    HRESULT _stdcall RemoveMinMaxUpperBoundChannel([in] long AChannelNo, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MinMaxUpperBoundChannelCount([out, retval] long* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall MinMaxUpperBoundChannelByIndex([in] long AIndex, [out, retval] IMinMaxUpperBoundChannel* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall MinMaxUpperBoundChannelNo([in] long AChannelNo, [out, retval] IMinMaxUpperBoundChannel* Value);
  };

  [
    uuid(9D444A57-3146-4842-AD63-F5AF097826D5),
    dual,
    oleautomation
  ]
  interface IMultiResMultiChannelCurtail: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall StartMonth([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall StartMonth([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirNo([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall ReservoirNo([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelNo([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ChannelNo([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall DecisionMonth([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall DecisionMonth([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ElevationByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall ElevationByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall FactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall FactorByIndex([in] long AIndex, [in] double Value);
    [id(0x0000006B)]
    HRESULT _stdcall Validate([in, out] BSTR* AError, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall Identifier([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall Identifier([in] long Value);
    [id(0x0000006D)]
    HRESULT _stdcall ValidateGrid([in, out] BSTR* AError, [in] BSTR AContext, [in] long ACol, [in] long ARow, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(70CFCA36-BB7D-4834-BBCE-1ECBE036F9D9),
    dual,
    oleautomation
  ]
  interface IMultiResMultiChannelCurtailList: IUnknown
  {
    [id(0x00000065)]
    HRESULT _stdcall NewRestriction([in] long AChannelNo, [out, retval] IMultiResMultiChannelCurtail* Value);
    [id(0x00000066)]
    HRESULT _stdcall RemoveRestriction([in] long aChannelNo, [out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall RestrictionByReservoirNo([in] long AIndex, [out, retval] IMultiResMultiChannelCurtail* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall RestrictionByChannelNo([in] long AIndex, [out, retval] IMultiResMultiChannelCurtail* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall RestrictionByIndentifier([in] long AIndex, [out, retval] IMultiResMultiChannelCurtail* Value);
  };

  [
    uuid(2D979DB3-2616-4BD0-B5D3-EE767B200305),
    dual,
    oleautomation
  ]
  interface IPlanningMine: IMine
  {
    [propget, id(0x000000CA)]
    HRESULT _stdcall RainfallFileName([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall RainfallFileName([in] BSTR Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall AssocSaltWashoff([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall AssocSaltWashoff([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MeanAnnualPrecipitation([out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall MeanAnnualPrecipitation([in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall SaltBuildUpRate([out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall SaltBuildUpRate([in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall SaltWashOffEfficiencyFactor([out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall SaltWashOffEfficiencyFactor([in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall IniSaltStore([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall IniSaltStore([in] double Value);
  };

  [
    uuid(6FF1E9C2-3BB7-42AF-B40B-51B44F56C6E7),
    dual,
    oleautomation
  ]
  interface IPlanningMineGrowthFactor: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall NoOfPoints([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall NoOfPoints([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NoOfYearsByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall NoOfYearsByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall GrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall GrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall InterpolationMethod([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall InterpolationMethod([in] long Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AError, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(342ED78F-8F33-4323-9DFD-FBCD4312B2B8),
    dual,
    oleautomation
  ]
  interface IPlanningOpenCast: IOpenCast
  {
    [propget, id(0x000000DD)]
    HRESULT _stdcall PCDIniConcentration([out, retval] double* Value);
    [propput, id(0x000000DD)]
    HRESULT _stdcall PCDIniConcentration([in] double Value);
    [propget, id(0x000000DE)]
    HRESULT _stdcall WorkingCommYear([out, retval] long* Value);
    [propput, id(0x000000DE)]
    HRESULT _stdcall WorkingCommYear([in] long Value);
    [propget, id(0x000000DF)]
    HRESULT _stdcall WorkingDecommYear([out, retval] long* Value);
    [propput, id(0x000000DF)]
    HRESULT _stdcall WorkingDecommYear([in] long Value);
    [propget, id(0x000000E0)]
    HRESULT _stdcall WorkingCommMonth([out, retval] long* Value);
    [propput, id(0x000000E0)]
    HRESULT _stdcall WorkingCommMonth([in] long Value);
    [propget, id(0x000000E1)]
    HRESULT _stdcall WorkingDecommMonth([out, retval] long* Value);
    [propput, id(0x000000E1)]
    HRESULT _stdcall WorkingDecommMonth([in] long Value);
    [propget, id(0x000000E2)]
    HRESULT _stdcall RunOffSaltWashOffEfficiencyFactor([out, retval] double* Value);
    [propput, id(0x000000E2)]
    HRESULT _stdcall RunOffSaltWashOffEfficiencyFactor([in] double Value);
    [propget, id(0x000000E3)]
    HRESULT _stdcall IniSaltStore([out, retval] double* Value);
    [propput, id(0x000000E3)]
    HRESULT _stdcall IniSaltStore([in] double Value);
    [propget, id(0x000000E4)]
    HRESULT _stdcall ReChargeRate([out, retval] double* Value);
    [propput, id(0x000000E4)]
    HRESULT _stdcall ReChargeRate([in] double Value);
    [propget, id(0x000000E5)]
    HRESULT _stdcall AbstractToEvap([out, retval] double* Value);
    [propput, id(0x000000E5)]
    HRESULT _stdcall AbstractToEvap([in] double Value);
    [propget, id(0x000000E6)]
    HRESULT _stdcall AbstractToRiver([out, retval] double* Value);
    [propput, id(0x000000E6)]
    HRESULT _stdcall AbstractToRiver([in] double Value);
    [propget, id(0x000000E7)]
    HRESULT _stdcall AbstractToCPD([out, retval] double* Value);
    [propput, id(0x000000E7)]
    HRESULT _stdcall AbstractToCPD([in] double Value);
    [propget, id(0x000000E8)]
    HRESULT _stdcall AbstractMonthTimeSeriesFile([out, retval] BSTR* Value);
    [propput, id(0x000000E8)]
    HRESULT _stdcall AbstractMonthTimeSeriesFile([in] BSTR Value);
    [propget, id(0x000000E9)]
    HRESULT _stdcall Abstraction([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x000000E9)]
    HRESULT _stdcall Abstraction([in] VARIANT_BOOL Value);
  };

  [
    uuid(3B8AAE03-D9FD-42D6-9449-9C149FF7E411),
    dual,
    oleautomation
  ]
  interface ILoadGeneration: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall FlowByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall FlowByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MeanOfSaltByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall MeanOfSaltByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall StandardDeviation([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall StandardDeviation([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall Type([out, retval] long* Value);
    [id(0x00000069)]
    HRESULT _stdcall Validate([in, out] BSTR* AErrors, [in] BSTR AContext, [out, retval] VARIANT_BOOL* Value);
  };

  [
    uuid(21806A78-10B8-459B-91E0-3F301315D060),
    dual,
    oleautomation
  ]
  interface IPlanningSlurryDump: ISlurryDump
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall SaltConcentration([out, retval] double* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall SaltConcentration([in] double Value);
  };

  [
    uuid(A0FDB2AB-5B0B-4DB2-B209-154CDCE8F81F),
    version(1.0),
    helpstring("VoaimsComObject")
  ]
  coclass VoaimsComObject
  {
    [default] interface IVoaimsComObject;
  };

};
