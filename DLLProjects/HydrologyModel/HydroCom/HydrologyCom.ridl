// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Libary Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 2012/10/05 02:53:06 PM (- $Rev: 12980 $, 22555156).

[
  uuid(F1230AF5-EC8F-4D5E-A4B0-42FFFE958D78), 
  version(1.0), 
  helpstring("HydrologyCom Library")
    
]
library HydrologyCom
{

  importlib("stdole2.tlb");

  interface INetwork;
  interface IModule;
  interface INetworkModule;
  interface IReservoirModule;
  interface IReservoirModuleAgent;
  interface IChannelModule;
  interface IChannelModuleAgent;
  interface IRunOffModule;
  interface IRunOffAfforestation;
  interface IRunOffPitmanModel;
  interface IRunOffModuleAgent;
  interface IRunOffAlienVegetation;
  interface IRunOffPavedArea;
  interface IRunOffOutflowRoute;
  interface IRunOffHughesModel;
  interface IRunOffSamiModel;
  interface IRunOffGroundWaterAbstraction;
  interface INetworkRoute;
  interface INetworkRouteAgent;
  interface IObservationPoint;
  interface IObservationPointAgent;
  interface IMineModule;
  interface IMineModuleAgent;
  interface IPan;
  interface IInflowRoute;
  interface IOutflowRoute;
  interface IOpencastPit;
  interface IUndergroundSection;
  interface ISlurryDump;
  interface IIrrigationModule;
  interface IIrrigationModuleAgent;
  interface IIrrigationCrop;
  interface IHydroNVDrawing;
  interface IHydroNVDrawingAgent;
  interface IHydrologyModel;
  interface IYearVolumeAreaData;
  interface IHydroOutputAgent;
  interface IHydroOutput;
  interface ITimeSeries;
  interface IHydroResultType;
  interface IHydrologyComObject;
  coclass HydrologyComObject;


  [
    uuid(DCFA8996-C27D-4546-9854-1FF9EAFC0A9F), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface INetwork: IUnknown
  {
    [propget, id(0x60010000)]
    HRESULT _stdcall NetworkID([out, retval] long* Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall NetworkCode([out, retval] BSTR* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall NetworkCode([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall VersionNumber([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall VersionNumber([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall InputDirectory([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall InputDirectory([in] BSTR Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall OutputDirectory([out, retval] BSTR* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall OutputDirectory([in] BSTR Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall DebugRequired([out, retval] BSTR* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall DebugRequired([in] BSTR Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall DebugStartPeriod([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall DebugStartPeriod([in] long Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall DebugEndPeriod([out, retval] long* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall DebugEndPeriod([in] long Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall SummaryRequired([out, retval] BSTR* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall SummaryRequired([in] BSTR Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall SimulationStartYear([out, retval] long* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall SimulationStartYear([in] long Value);
    [propget, id(0x000000D3)]
    HRESULT _stdcall SimulationEndYear([out, retval] long* Value);
    [propput, id(0x000000D3)]
    HRESULT _stdcall SimulationEndYear([in] long Value);
    [propget, id(0x000000D4)]
    HRESULT _stdcall IsReadOnly([out, retval] long* Value);
    [propput, id(0x000000D4)]
    HRESULT _stdcall IsReadOnly([in] long Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall NetworkRouteAgent([out, retval] INetworkRouteAgent** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirModuleAgent([out, retval] IReservoirModuleAgent** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelModuleAgent([out, retval] IChannelModuleAgent** Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RunOffModuleAgent([out, retval] IRunOffModuleAgent** Value);
    [id(0x00000069)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] BSTR ANetworkCode, [in] long AVersionNumber, [in] BSTR AInputDirectory, [in] BSTR AOutputDirectory, [in] BSTR ADebugRequired, [in] long ADebugStartPeriod, [in] long ADebugEndPeriod, [in] BSTR ASummaryRequired, [in] long ASimulationStartYear, [in] long ASimulationEndYear, [in] long AIsReadOnly, [in] double AMinLongitude, [in] double AMaxLongitude, [in] double AMinLatitude, [in] double AMaxLatitude, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ObservationPointAgent([out, retval] IObservationPointAgent** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall MineModuleAgent([out, retval] IMineModuleAgent** Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall IrrigationModuleAgent([out, retval] IIrrigationModuleAgent** Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ModuleBySequenceNumber([in] long ASequence, [out, retval] INetworkModule** Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall HydroNVDrawingAgent([out, retval] IHydroNVDrawingAgent** Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall MinLongitude([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall MinLongitude([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MaxLongitude([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MaxLongitude([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall MinLatitude([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall MinLatitude([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall MaxLatitude([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall MaxLatitude([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall ModuleByID([in] long AModuleID, [out, retval] INetworkModule** Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall ModuleTextByID([in] long AModuleID, [out, retval] BSTR* Value);
    [id(0x00000076)]
    HRESULT _stdcall SetRouteSource([in] long ARouteNo, [in] long ASourceModuleID);
    [id(0x00000077)]
    HRESULT _stdcall SetRouteSink([in] long ARouteNo, [in] long ASinkModuleID);
    [id(0x00000078)]
    HRESULT _stdcall DetermineNetworkSequence([out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000079)]
    HRESULT _stdcall HydroOutputAgent([out, retval] IHydroOutputAgent** Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall NoOfIntervals([out, retval] long* Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall IntervalText([in] long AInterval, [out, retval] BSTR* Value);
  };

  [
    uuid(D30022F5-EBF5-4B39-AB74-8126868845AB), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IModule: IUnknown
  {
    [propget, id(0x00000050)]
    HRESULT _stdcall ModuleID([out, retval] long* Value);
    [propget, id(0x00000051)]
    HRESULT _stdcall ModuleType([out, retval] BSTR* Value);
    [propput, id(0x00000051)]
    HRESULT _stdcall ModuleType([in] BSTR Value);
    [propget, id(0x00000052)]
    HRESULT _stdcall PanByMonth([in] long AMonth, [out, retval] IPan** Value);
    [propget, id(0x00000056)]
    HRESULT _stdcall PanByIndex([in] long AIndex, [out, retval] IPan** Value);
    [id(0x00000055)]
    HRESULT _stdcall AddPan([in] long AMonth, [in] double AEvaportaion, [in] double AFactor, [out, retval] IPan** AResult);
    [propget, id(0x00000057)]
    HRESULT _stdcall Longitude([out, retval] double* Value);
    [propput, id(0x00000057)]
    HRESULT _stdcall Longitude([in] double Value);
    [propget, id(0x00000058)]
    HRESULT _stdcall Latitude([out, retval] double* Value);
    [propput, id(0x00000058)]
    HRESULT _stdcall Latitude([in] double Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall PanCount([out, retval] long* Value);
  };

  [
    uuid(B8505A79-7D05-4BAD-A875-2948CEE64ECF), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface INetworkModule: IModule
  {
    [propget, id(0x0000005C)]
    HRESULT _stdcall NetworkID([out, retval] long* Value);
    [propget, id(0x0000005D)]
    HRESULT _stdcall ModuleNumber([out, retval] long* Value);
    [propput, id(0x0000005D)]
    HRESULT _stdcall ModuleNumber([in] long Value);
    [propget, id(0x0000005E)]
    HRESULT _stdcall NetworkSequence([out, retval] long* Value);
    [propput, id(0x0000005E)]
    HRESULT _stdcall NetworkSequence([in] long Value);
    [propget, id(0x0000005F)]
    HRESULT _stdcall Active([out, retval] BSTR* Value);
    [propput, id(0x0000005F)]
    HRESULT _stdcall Active([in] BSTR Value);
  };

  [
    uuid(3055327F-DA7E-4497-8FFF-47428AF83CBF), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IReservoirModule: INetworkModule
  {
    [propget, id(0x000000CA)]
    HRESULT _stdcall ReservoirName([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall ReservoirName([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall MAP([out, retval] double* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall MAP([in] double Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall RainfallFileName([out, retval] BSTR* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall RainfallFileName([in] BSTR Value);
    [propget, id(0x00000131)]
    HRESULT _stdcall AreaPower([out, retval] double* Value);
    [propput, id(0x00000131)]
    HRESULT _stdcall AreaPower([in] double Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall SpillageRouteNo([out, retval] long* Value);
    [propput, id(0x00000132)]
    HRESULT _stdcall SpillageRouteNo([in] long Value);
    [propget, id(0x00000133)]
    HRESULT _stdcall InitialStorageState([out, retval] double* Value);
    [propput, id(0x00000133)]
    HRESULT _stdcall InitialStorageState([in] double Value);
    [id(0x00000134)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long AModuleID, [in] BSTR AModuleType, [in] long AModuleNumber, [in] long ANetworkSequence, [in] BSTR AActive, [in] BSTR AReservoirName, [in] double AMAP, [in] BSTR ARainfallFileName, [in] double AAreaPower, [in] long ASpillageRouteNo, [in] double AInitialStorageState, [in] double ALongitude, [in] double ALatitude, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000012D)]
    HRESULT _stdcall AddInflowRoute([in] long ARouteNo, [in] BSTR AFileName, [out, retval] IInflowRoute** AResult);
    [id(0x0000012E)]
    HRESULT _stdcall AddOutflowRoute([in] long ARouteNo, [in] BSTR AFileName, [in] BSTR AAbstractions, [in] double AStorageState, [in] double AReductionFactor, [out, retval] IOutflowRoute** AResult);
    [propget, id(0x0000012F)]
    HRESULT _stdcall InFlowRouteByRouteNo([in] long ARouteNo, [out, retval] IInflowRoute** Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall NoOfInFlowRoutes([out, retval] long* Value);
    [propget, id(0x00000135)]
    HRESULT _stdcall InflowRouteByIndex([in] long AIndex, [out, retval] IInflowRoute** Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall OutFlowRouteByRouteNo([in] long ARouteNo, [out, retval] IOutflowRoute** Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall NoOfOutFlowRoutes([out, retval] long* Value);
    [propget, id(0x00000138)]
    HRESULT _stdcall OutFlowRouteByIndex([in] long AIndex, [out, retval] IOutflowRoute** Value);
    [id(0x00000139)]
    HRESULT _stdcall AddVolumeAreaData([in] long AYear, [in] double AVolume, [in] double AArea, [out, retval] IYearVolumeAreaData** AResult);
    [propget, id(0x0000013A)]
    HRESULT _stdcall VolumeAreaDataByYear([in] long AYear, [out, retval] IYearVolumeAreaData** Value);
    [propget, id(0x0000013B)]
    HRESULT _stdcall VolumeAreaDataByIndex([in] long AIndex, [out, retval] IYearVolumeAreaData** Value);
    [propget, id(0x0000013D)]
    HRESULT _stdcall VolumeAreaDataCount([out, retval] long* Value);
  };

  [
    uuid(6D0C7D0C-938C-4172-8C0A-A996CB3C2F0E), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IReservoirModuleAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ReservoirModuleCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ReservoirModuleByID([in] long AModuleID, [out, retval] IReservoirModule** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ReservoirModuleByIndex([in] long AIndex, [out, retval] IReservoirModule** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ReservoirModuleByNumber([in] long AModuleNumber, [out, retval] IReservoirModule** Value);
    [id(0x0000006B)]
    HRESULT _stdcall CreateNewReservoirModule([in] long ANetworkID, [out, retval] IReservoirModule** AResult);
    [id(0x0000006C)]
    HRESULT _stdcall RemoveReservoirModule([in] long AModuleNumber, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(C0E3A02F-7C36-4AF4-9CCB-E091CC072B79), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IChannelModule: INetworkModule
  {
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall ChannelName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall VersionNo([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall VersionNo([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall WetlandMAP([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall WetlandMAP([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall RainfallFileName([out, retval] BSTR* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall RainfallFileName([in] BSTR Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MonthlyBedLoss([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall MonthlyBedLoss([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall WetlandStorage([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall WetlandStorage([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall WetlandArea([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall WetlandArea([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall WetlandRechargeCoefficient([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall WetlandRechargeCoefficient([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall PrincipalOutflowRouteNo([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall PrincipalOutflowRouteNo([in] long Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall FutureUse([out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall FutureUse([in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall WetlandType([out, retval] long* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall WetlandType([in] long Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall QDiv([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall QDiv([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall WetlandsInflowRouteNo([out, retval] long* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall WetlandsInflowRouteNo([in] long Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall WetlandsOutflowRouteNo([out, retval] long* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall WetlandsOutflowRouteNo([in] long Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall DiversionRouteNo([out, retval] long* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall DiversionRouteNo([in] long Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall BankfillCapacity([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall BankfillCapacity([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall DiversionEfficiency([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall DiversionEfficiency([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall MaxMonthlyDiversionCapacity([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall MaxMonthlyDiversionCapacity([in] double Value);
    [id(0x00000078)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long AModuleID, [in] BSTR AModuleType, [in] long AModuleNumber, [in] long ANetworkSequence, [in] BSTR AActive, [in] BSTR AChannelName, [in] long AVersionNo, [in] double AWetlandMAP, [in] BSTR ARainfallFileName, [in] double AMonthlyBedLoss, [in] double AWetlandStorage, [in] double AWetlandArea, [in] double AWetlandRechargeCoefficient, [in] long APrincipalOutflowRouteNo, [in] long AWetlandType, [in] double AQDiv, [in] long AWetlandsInflowRouteNo, [in] long AWetlandsOutflowRouteNo, [in] long ADiversionRouteNo, [in] double ABankfillCapacity, [in] double ADiversionEfficiency, [in] double AMaxMonthlyDiversionCapacity, [in] double ALongitude, [in] double ALatitude, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000079)]
    HRESULT _stdcall PopulateComprehensiveWetlandParams([in] double ABankfillArea, [in] double ABankfillVolume, [in] double APowerOfAreaCapCurve, [in] double ABankfillCapacity, [in] double AWetlandInflowProportion, [in] double AChannelInflowProportion, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000012D)]
    HRESULT _stdcall AddInflowRoute([in] long ARouteNo, [in] BSTR AFileName, [out, retval] IInflowRoute** AResult);
    [id(0x0000012E)]
    HRESULT _stdcall AddOutflowRoute([in] long ARouteNo, [in] BSTR AFileName, [in] BSTR AAbstractions, [in] double AStorageState, [in] double AReductionFactor, [out, retval] IOutflowRoute** AResult);
    [propget, id(0x0000012F)]
    HRESULT _stdcall NoOfInFlowRoutes([out, retval] long* Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall InFlowRouteByRouteNo([in] long ARouteNo, [out, retval] IInflowRoute** Value);
    [propget, id(0x00000131)]
    HRESULT _stdcall InflowRouteByIndex([in] long AIndex, [out, retval] IInflowRoute** Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall NoOfOutFlowRoutes([out, retval] long* Value);
    [propget, id(0x00000133)]
    HRESULT _stdcall OutFlowRouteByRouteNo([in] long ARouteNo, [out, retval] IOutflowRoute** Value);
    [propget, id(0x00000134)]
    HRESULT _stdcall OutFlowRouteByIndex([in] long AIndex, [out, retval] IOutflowRoute** Value);
    [propget, id(0x00000135)]
    HRESULT _stdcall BankfillArea([out, retval] double* Value);
    [propput, id(0x00000135)]
    HRESULT _stdcall BankfillArea([in] double Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall BankfillVolume([out, retval] double* Value);
    [propput, id(0x00000136)]
    HRESULT _stdcall BankfillVolume([in] double Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall PowerOfAreaCapCurve([out, retval] double* Value);
    [propput, id(0x00000137)]
    HRESULT _stdcall PowerOfAreaCapCurve([in] double Value);
    [propget, id(0x00000138)]
    HRESULT _stdcall BankfillCapacityComprehensive([out, retval] double* Value);
    [propput, id(0x00000138)]
    HRESULT _stdcall BankfillCapacityComprehensive([in] double Value);
    [propget, id(0x00000139)]
    HRESULT _stdcall WetlandInflowProportion([out, retval] double* Value);
    [propput, id(0x00000139)]
    HRESULT _stdcall WetlandInflowProportion([in] double Value);
    [propget, id(0x0000013A)]
    HRESULT _stdcall ChannelInflowProportion([out, retval] double* Value);
    [propput, id(0x0000013A)]
    HRESULT _stdcall ChannelInflowProportion([in] double Value);
  };

  [
    uuid(75E83A87-E32E-4696-9AF4-5CB84544847C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IChannelModuleAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ChannelModuleCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ChannelModuleByID([in] long AModuleID, [out, retval] IChannelModule** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ChannelModuleByIndex([in] long AIndex, [out, retval] IChannelModule** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ChannelModuleByNumber([in] long AModuleNumber, [out, retval] IChannelModule** Value);
    [id(0x0000006B)]
    HRESULT _stdcall CreateNewChannelModule([in] long ANetworkID, [out, retval] IChannelModule** AResult);
    [id(0x0000006C)]
    HRESULT _stdcall RemoveChannelModule([in] long AModuleNumber, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(098FBB48-D94A-4E3E-9543-762A9A821CE8), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffModule: INetworkModule
  {
    [propget, id(0x00000066)]
    HRESULT _stdcall RunOffName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall RunOffName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall VersionNo([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall VersionNo([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall CatchmentArea([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall CatchmentArea([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall CatchmentMAP([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall CatchmentMAP([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall RainfallFileName([out, retval] BSTR* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall RainfallFileName([in] BSTR Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall ProduceNaturalisedFlows([out, retval] long* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall ProduceNaturalisedFlows([in] long Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall APanFactor([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall APanFactor([in] long AMonthIndex, [in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall PitmanModel([out, retval] IRunOffPitmanModel** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall Afforestation([out, retval] IRunOffAfforestation** Value);
    [id(0x0000006C)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long AModuleID, [in] BSTR AModuleType, [in] long AModuleNumber, [in] long ANetworkSequence, [in] BSTR AActive, [in] BSTR ARunOffName, [in] long AVersionNo, [in] double ACatchmentArea, [in] double ACatchmentMAP, [in] BSTR ARainfallFileName, [in] long AProduceNaturalisedInflows, [in] double ALongitude, [in] double ALatitude, [in] BSTR AAPanFactors, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006D)]
    HRESULT _stdcall AlienVegetation([out, retval] IRunOffAlienVegetation** Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall PavedArea([out, retval] IRunOffPavedArea** Value);
    [id(0x00000072)]
    HRESULT _stdcall AddOutflowRoute([in] long ARouteNo, [in] double AOutflowPercentage);
    [propget, id(0x00000073)]
    HRESULT _stdcall NoOfOutFlowRoutes([out, retval] long* Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall HughesModel([out, retval] IRunOffHughesModel** Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall SamiModel([out, retval] IRunOffSamiModel** Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall NoOfSlaves([out, retval] long* Value);
    [id(0x00000081)]
    HRESULT _stdcall AddSlaveModuleNo([in] long ASlaveModuleNo);
    [propget, id(0x00000082)]
    HRESULT _stdcall GroundWaterAbstraction([out, retval] IRunOffGroundWaterAbstraction** Value);
    [id(0x00000080)]
    HRESULT _stdcall SlaveModuleNoByIndex([in] long AIndex, [out, retval] long* AResult);
    [propget, id(0x0000012E)]
    HRESULT _stdcall OutFlowRouteByRouteNo([in] long ARouteNo, [out, retval] IRunOffOutflowRoute** Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall OutFlowRouteByIndex([in] long AIndex, [out, retval] IRunOffOutflowRoute** Value);
  };

  [
    uuid(0351D8BC-4EF9-417B-A184-CB44E6D784E1), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffAfforestation: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall Algorithm([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall Algorithm([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall PineAreaPercentage([out, retval] double* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall PineAreaPercentage([in] double Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall PineRotationPeriod([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall PineRotationPeriod([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall EucalyptusAreaPercentage([out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall EucalyptusAreaPercentage([in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall EucalyptusRotationPeriod([out, retval] long* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall EucalyptusRotationPeriod([in] long Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall WattleAreaPercentage([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall WattleAreaPercentage([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall WattleRotationPeriod([out, retval] long* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall WattleRotationPeriod([in] long Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall OptimalAreaPercentage([out, retval] double* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall OptimalAreaPercentage([in] double Value);
    [propget, id(0x000000D1)]
    HRESULT _stdcall SFRReductionMAR([out, retval] double* Value);
    [propput, id(0x000000D1)]
    HRESULT _stdcall SFRReductionMAR([in] double Value);
    [propget, id(0x000000D2)]
    HRESULT _stdcall SFRReductionLowFlows([out, retval] double* Value);
    [propput, id(0x000000D2)]
    HRESULT _stdcall SFRReductionLowFlows([in] double Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall NumberOfYears([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Year([in] long AYearIndex, [out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Year([in] long AYearIndex, [in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Area([in] long AYearIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Area([in] long AYearIndex, [in] double Value);
    [id(0x00000068)]
    HRESULT _stdcall Populate([in] long AAlgorithm, [in] double APineAreaPercentage, [in] long APineRotationPeriod, [in] double AEucalyptusAreaPercentage, [in] long AEucalyptusRotationPeriod, [in] double AWattleAreaPercentage, [in] long AWattleRotationPeriod, [in] double AOptimalAreaPercentage, [in] double ASFRReductionMAR, [in] double ASFRReductionLowFlows, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000069)]
    HRESULT _stdcall AddAreaData([in] long AYear, [in] double AArea);
  };

  [
    uuid(AC16446D-DEF4-41C5-A264-C9CE78F928B3), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffPitmanModel: IUnknown
  {
    [propget, id(0x0000006B)]
    HRESULT _stdcall POW([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall POW([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall SL([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall SL([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall ST([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall ST([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall FT([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall FT([in] double Value);
    [propget, id(0x000000C9)]
    HRESULT _stdcall GW([out, retval] double* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall GW([in] double Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ZMIN([out, retval] long* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall ZMIN([in] long Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall ZMAX([out, retval] long* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall ZMAX([in] long Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall PI([out, retval] double* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall PI([in] double Value);
    [propget, id(0x000000CD)]
    HRESULT _stdcall TL([out, retval] double* Value);
    [propput, id(0x000000CD)]
    HRESULT _stdcall TL([in] double Value);
    [propget, id(0x000000CE)]
    HRESULT _stdcall GL([out, retval] double* Value);
    [propput, id(0x000000CE)]
    HRESULT _stdcall GL([in] double Value);
    [propget, id(0x000000CF)]
    HRESULT _stdcall R([out, retval] double* Value);
    [propput, id(0x000000CF)]
    HRESULT _stdcall R([in] double Value);
    [propget, id(0x000000D0)]
    HRESULT _stdcall FF([out, retval] double* Value);
    [propput, id(0x000000D0)]
    HRESULT _stdcall FF([in] double Value);
    [id(0x00000065)]
    HRESULT _stdcall Populate([in] double APOW, [in] long ASL, [in] long AST, [in] double AFT, [in] double AGW, [in] long AZMIN, [in] long AZMAX, [in] double API, [in] double ATL, [in] double AGL, [in] double AR, [in] double AFF, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(40325093-8CE0-43FA-8524-868CE0098212), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffModuleAgent: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall RunOffModuleCount([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall RunOffModuleByID([in] long AModuleID, [out, retval] IRunOffModule** Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall RunOffModuleByIndex([in] long AIndex, [out, retval] IRunOffModule** Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall RunOffModuleByNumber([in] long AModuleNumber, [out, retval] IRunOffModule** Value);
    [id(0x00000066)]
    HRESULT _stdcall CreateNewRunOffModule([in] long ANetworkID, [out, retval] IRunOffModule** AResult);
    [id(0x00000067)]
    HRESULT _stdcall RemoveRunOffModule([in] long AModuleNumber, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(8D65C35B-D37D-480F-BEB7-11DA13913E76), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffAlienVegetation: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Algorithm([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall Algorithm([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall RiparianVegetationArea([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall RiparianVegetationArea([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall TallTreeAreaPercentage([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall TallTreeAreaPercentage([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall TallTreeAge([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall TallTreeAge([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall MediumTreeAreaPercentage([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall MediumTreeAreaPercentage([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MediumTreeAge([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall MediumTreeAge([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall TallSchrubAreaPercentage([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall TallSchrubAreaPercentage([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall TallSchrubAge([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall TallSchrubAge([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall OptimalAreaPercentage([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall OptimalAreaPercentage([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall NumberOfYears([out, retval] long* Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall Year([in] long AYearIndex, [out, retval] long* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall Year([in] long AYearIndex, [in] long Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall Area([in] long AYearIndex, [out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall Area([in] long AYearIndex, [in] double Value);
    [id(0x00000071)]
    HRESULT _stdcall Populate([in] long AAlgorithm, [in] double ARiparianVegetationArea, [in] double ATallTreeAreaPercentage, [in] double ATallTreeAge, [in] double AMediumTreeAreaPercentage, [in] double AMediumTreeAge, [in] double ATallSchrubAreaPercentage, [in] double ATallSchrubAge, [in] double AOptimalAreaPercentage, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000072)]
    HRESULT _stdcall AddAreaData([in] long AYear, [in] double AArea);
  };

  [
    uuid(976D0007-9641-4DF5-9C16-06D70F2D01D9), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffPavedArea: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall NumberOfYears([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Year([in] long AYearIndex, [out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Year([in] long AYearIndex, [in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Proportion([in] long AYearIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Proportion([in] long AYearIndex, [in] double Value);
    [id(0x00000068)]
    HRESULT _stdcall AddAreaData([in] long AYear, [in] double AProportion);
  };

  [
    uuid(8B4E1D7C-1E73-47B6-A6FF-E1D034E53353), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffOutflowRoute: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RouteNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall RouteNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall OutflowPercentage([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall OutflowPercentage([in] double Value);
  };

  [
    uuid(DB8C7D39-907B-44FD-B374-D1E2BA2D80E5), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffHughesModel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall InflowRouteNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall InflowRouteNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall InfluenceROMNo([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall InfluenceROMNo([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall GroundWaterModel([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall GroundWaterModel([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall HGSL([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall HGSL([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall GPOW([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall GPOW([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall TLGMax([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall TLGMax([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall HGGW([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall HGGW([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall POW([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall POW([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall SL([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall SL([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall ST([out, retval] long* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall ST([in] long Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall FT([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall FT([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall GW([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall GW([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall ZMIN([out, retval] long* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall ZMIN([in] long Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall ZMAX([out, retval] long* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall ZMAX([in] long Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall PI([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall PI([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall TL([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall TL([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall GL([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall GL([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall R([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall R([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall FF([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall FF([in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall UseNoOfReaches([out, retval] long* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall UseNoOfReaches([in] long Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall DrainageDensity([out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall DrainageDensity([in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall NoOfReaches([out, retval] long* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall NoOfReaches([in] long Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall RiparianAreaWidthPercentage([out, retval] double* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall RiparianAreaWidthPercentage([in] double Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall RiparianStripFactor([out, retval] double* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall RiparianStripFactor([in] double Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall RestWaterLevel([out, retval] double* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall RestWaterLevel([in] double Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall Transmissivity([out, retval] double* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall Transmissivity([in] double Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall Storativity([out, retval] double* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall Storativity([in] double Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall GroundWaterSlope([out, retval] double* Value);
    [propput, id(0x00000080)]
    HRESULT _stdcall GroundWaterSlope([in] double Value);
    [propget, id(0x00000081)]
    HRESULT _stdcall AnnualUpperZoneAbstraction([out, retval] double* Value);
    [propput, id(0x00000081)]
    HRESULT _stdcall AnnualUpperZoneAbstraction([in] double Value);
    [propget, id(0x00000082)]
    HRESULT _stdcall MonthlyUpperZoneAbstraction([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000082)]
    HRESULT _stdcall MonthlyUpperZoneAbstraction([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000083)]
    HRESULT _stdcall AnnualRiparianZoneAbstraction([out, retval] double* Value);
    [propput, id(0x00000083)]
    HRESULT _stdcall AnnualRiparianZoneAbstraction([in] double Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall MonthlyRiparianZoneAbstraction([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000084)]
    HRESULT _stdcall MonthlyRiparianZoneAbstraction([in] long AMonthIndex, [in] double Value);
    [id(0x00000085)]
    HRESULT _stdcall Populate([in] long AInflowRouteNo, [in] long AInfluenceROMNo, [in] long AGroundWaterModel, [in] double AHGSL, [in] double AGPOW, [in] double ATLGMax, [in] double AHGGW, [in] double APOW, [in] long ASL, [in] long AST, [in] double AFT, [in] double AGW, [in] long AZMIN, [in] long AZMAX, [in] double API, [in] double ATL, [in] double AGL, [in] double AR, [in] double AFF, [in] long AUseNoOfReaches, [in] double ADrainageDensity, [in] long ANoOfReaches, [in] double ARiparianAreaWidthPercentage, [in] double ARiparianStripFactor, [in] double ARestWaterLevel, [in] double ATransmissivity, [in] double AStorativity, [in] double AGroundWaterSlope, [in] double AAnnualUpperZoneAbstraction, [in] BSTR AMonthlyUpperZoneAbstraction, [in] double AAnnualRiparianZoneAbstraction, [in] BSTR AMonthlyRiparionZoneAbstraction, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(A14D1F19-F686-4785-A920-24F640781267), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffSamiModel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall AquiferThickness([out, retval] double* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall AquiferThickness([in] double Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Storativity([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Storativity([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall InitialAquiferStorage([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall InitialAquiferStorage([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall StaticWaterLevel([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall StaticWaterLevel([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall UnsaturatedStorage([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall UnsaturatedStorage([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall InitialUnsaturatedZoneStorage([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall InitialUnsaturatedZoneStorage([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PerculationPower([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall PerculationPower([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall GPOW([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall GPOW([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall MaxDischarge([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall MaxDischarge([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall InteractionCurvePower([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall InteractionCurvePower([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall HGSL([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall HGSL([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall HGGW([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall HGGW([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall MaxHydrologicalGradient([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall MaxHydrologicalGradient([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall Transmissivity([out, retval] double* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall Transmissivity([in] double Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall BoreholeDistanceToRiver([out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall BoreholeDistanceToRiver([in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall GroundWaterEvaporationArea([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall GroundWaterEvaporationArea([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall K2([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall K2([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall K3([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall K3([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall InterflowLag([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall InterflowLag([in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall RechargeAveragedNoMonths([out, retval] double* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall RechargeAveragedNoMonths([in] double Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall UseAbstractions([out, retval] long* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall UseAbstractions([in] long Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall POW([out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall POW([in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall SL([out, retval] long* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall SL([in] long Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall ST([out, retval] long* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall ST([in] long Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall FT([out, retval] double* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall FT([in] double Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall GW([out, retval] double* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall GW([in] double Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall ZMIN([out, retval] long* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall ZMIN([in] long Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall ZMAX([out, retval] long* Value);
    [propput, id(0x00000080)]
    HRESULT _stdcall ZMAX([in] long Value);
    [propget, id(0x00000081)]
    HRESULT _stdcall PI([out, retval] double* Value);
    [propput, id(0x00000081)]
    HRESULT _stdcall PI([in] double Value);
    [propget, id(0x00000082)]
    HRESULT _stdcall TL([out, retval] double* Value);
    [propput, id(0x00000082)]
    HRESULT _stdcall TL([in] double Value);
    [propget, id(0x00000083)]
    HRESULT _stdcall GL([out, retval] double* Value);
    [propput, id(0x00000083)]
    HRESULT _stdcall GL([in] double Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall R([out, retval] double* Value);
    [propput, id(0x00000084)]
    HRESULT _stdcall R([in] double Value);
    [propget, id(0x00000085)]
    HRESULT _stdcall FF([out, retval] double* Value);
    [propput, id(0x00000085)]
    HRESULT _stdcall FF([in] double Value);
    [id(0x00000086)]
    HRESULT _stdcall Populate([in] double AAquiferThickness, [in] double AStorativity, [in] double AInitialAquiferStorage, [in] double AStaticWaterLevel, [in] double AUnsaturatedStorage, [in] double AInitialUnsaturatedZoneStorage, [in] double APerculationPower, [in] double AGPOW, [in] double AMaxDischarge, [in] double AInteractionCurvePower, [in] double AHGSL, [in] double AHGGW, [in] double AMaxHydrologicalGradient, [in] double ATransmissivity, [in] double ABoreholeDistanceToRiver, [in] double AGroundWaterEvaporationArea, [in] double AK2, [in] double AK3, [in] double AInterflowLag, [in] double ARechargeAveragedNoMonths, [in] long AUseAbstractions, [in] double APOW, [in] long ASL, [in] long AST, [in] double AFT, [in] double AGW, [in] long AZMIN, [in] long AZMAX, [in] double API, [in] double ATL, [in] double AGL, [in] double AR, [in] double AFF);
  };

  [
    uuid(31499947-6F2B-4B45-9E6B-875D2DC5FB06), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IRunOffGroundWaterAbstraction: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall NumberOfYears([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Year([in] long AYearIndex, [out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Year([in] long AYearIndex, [in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall AbstractionValue([in] long AYearIndex, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall AbstractionValue([in] long AYearIndex, [in] double Value);
    [id(0x00000068)]
    HRESULT _stdcall AddAbstractionData([in] long AYear, [in] double AAbstractionValue);
  };

  [
    uuid(C0BA59E3-2AE2-43B9-883D-202697729CE6), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface INetworkRoute: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RouteNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall RouteNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SourceModuleID([out, retval] long* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall SourceModuleID([in] long Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall SinkModuleID([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall SinkModuleID([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RouteCost([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall RouteCost([in] long Value);
    [id(0x00000069)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long ARouteID, [in] long ARouteNo, [in] long ASourceModuleID, [in] long ASinkModuleID, [in] long ARouteCost, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006A)]
    HRESULT _stdcall RouteID([out, retval] long* Value);
  };

  [
    uuid(E5D1BBCA-FA4E-4B0C-B0EF-3F481C9DF016), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface INetworkRouteAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall NetworkRouteCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NetworkRouteByRouteNo([in] long ARouteNo, [out, retval] INetworkRoute** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall NetworkRouteByIndex([in] long AIndex, [out, retval] INetworkRoute** Value);
    [id(0x0000006A)]
    HRESULT _stdcall CreateNewNetworkRoute([in] long ANetworkID, [out, retval] INetworkRoute** AResult);
    [id(0x0000006B)]
    HRESULT _stdcall RemoveNetworkRoute([in] long ANetworkID, [in] long ARouteNo, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(E5B8B1B1-6E73-4F89-89E0-DEB194D74782), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IObservationPoint: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RouteNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall RouteNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Name([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall FlowDataFileName([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall FlowDataFileName([in] BSTR Value);
    [id(0x00000068)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long ARouteNo, [in] BSTR AName, [in] BSTR AFlowDataFileName, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006A)]
    HRESULT _stdcall FlowData([out, retval] ITimeSeries** Value);
  };

  [
    uuid(E3F12CBE-9C3A-41E5-BF26-636022F9A88D), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IObservationPointAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ObservationPointCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ObservationPointByRouteNo([in] long ARouteNo, [out, retval] IObservationPoint** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ObservationPointByIndex([in] long AIndex, [out, retval] IObservationPoint** Value);
    [id(0x0000006A)]
    HRESULT _stdcall CreateNewObservationPoint([in] long ANetworkID, [in] long ARouteNo, [out, retval] IObservationPoint** AResult);
    [id(0x0000006B)]
    HRESULT _stdcall RemoveObservationPoint([in] long ANetworkID, [in] long ARouteNo, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(99461795-DE79-4C22-A51C-0B36CBA4A39F), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IMineModule: INetworkModule
  {
    [propget, id(0x00000066)]
    HRESULT _stdcall MineName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall MineName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall VersionNo([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall VersionNo([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RunOffModuleNo([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall RunOffModuleNo([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall OutflowRouteNoToRiver([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall OutflowRouteNoToRiver([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall OutflowRouteNoToPCD([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall OutflowRouteNoToPCD([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall RainfallFileName([out, retval] BSTR* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall RainfallFileName([in] BSTR Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall MAP([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall MAP([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall PlantArea([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall PlantArea([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall PlantAreaRunOffFactor([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall PlantAreaRunOffFactor([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall SaltBuildUpRate([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall SaltBuildUpRate([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall SaltWashOffFactor([out, retval] double* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall SaltWashOffFactor([in] double Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall InitialSaltStore([out, retval] double* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall InitialSaltStore([in] double Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall PlantAreaGrowthInterpolationType([out, retval] long* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall PlantAreaGrowthInterpolationType([in] long Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall NoOfPlantAreaGrowthPoints([out, retval] long* Value);
    [id(0x00000074)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long AModuleID, [in] BSTR AModuleType, [in] long AModuleNumber, [in] long ANetworkSequence, [in] BSTR AActive, [in] BSTR AMineName, [in] long AVersionNo, [in] long ARunOffModuleNo, [in] long AOutflowRouteNoToRiver, [in] long AOutflowRouteNoToPCD, [in] BSTR ARainfallFileName, [in] double AMAP, [in] double APlantArea, [in] double APlantAreaRunOffFactor, [in] double ASaltBuildUpRate, [in] double ASaltWashOffFactor, [in] double AInitialSaltStore, [in] long APlantAreaGrowthInterpolationType, [in] double ALongitude, [in] double ALatitude, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000012D)]
    HRESULT _stdcall PlantAreaGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x0000012D)]
    HRESULT _stdcall PlantAreaGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall PlantAreaGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000012E)]
    HRESULT _stdcall PlantAreaGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [id(0x0000012F)]
    HRESULT _stdcall AddPlantAreaGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000131)]
    HRESULT _stdcall NoOfOpencastPits([out, retval] long* Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall OpencastPitBySectionNo([in] long ASectionNo, [out, retval] IOpencastPit** Value);
    [propget, id(0x00000133)]
    HRESULT _stdcall OpencastPitByIndex([in] long AIndex, [out, retval] IOpencastPit** Value);
    [propget, id(0x00000135)]
    HRESULT _stdcall NoOfUndergroundSections([out, retval] long* Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall UndergroundSectionBySectionNo([in] long ASectionNo, [out, retval] IUndergroundSection** Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall UndergroundSectionByIndex([in] long AIndex, [out, retval] IUndergroundSection** Value);
    [propget, id(0x00000139)]
    HRESULT _stdcall NoOfSlurryDumps([out, retval] long* Value);
    [propget, id(0x0000013A)]
    HRESULT _stdcall SlurryDumpBySectionNo([in] long ASectionNo, [out, retval] ISlurryDump** Value);
    [propget, id(0x0000013B)]
    HRESULT _stdcall SlurryDumpByIndex([in] long AIndex, [out, retval] ISlurryDump** Value);
  };

  [
    uuid(F523665A-1EEF-427F-8F87-9F00AB70791C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IMineModuleAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall MineModuleCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall MineModuleByID([in] long AModuleID, [out, retval] IMineModule** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall MineModuleByIndex([in] long AIndex, [out, retval] IMineModule** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall MineModuleByNumber([in] long AModuleNumber, [out, retval] IMineModule** Value);
    [id(0x0000006B)]
    HRESULT _stdcall CreateNewMineModule([in] long ANetworkID, [out, retval] IMineModule** AResult);
    [id(0x0000006C)]
    HRESULT _stdcall RemoveMineModule([in] long AModuleNumber, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(4A387CF7-3CB5-4FE6-B936-10DE6259C503), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IPan: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Month([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall Month([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Evaporation([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Evaporation([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Factor([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Factor([in] double Value);
  };

  [
    uuid(1C711808-065A-4BC0-AAAF-CE634002C2CC), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IInflowRoute: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RouteNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall RouteNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FileName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FileName([in] BSTR Value);
  };

  [
    uuid(2E2B6217-A7A8-4CBD-A2C6-4095C3D0917C), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IOutflowRoute: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall RouteNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall RouteNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall FileName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall FileName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall AbstractionVolumeByMonth([in] long AMonth, [out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall AbstractionVolumeByMonth([in] long AMonth, [in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall StorageState([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall StorageState([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ReductionFactor([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall ReductionFactor([in] double Value);
  };

  [
    uuid(FCF3540C-CCFD-4D1F-AFDE-EB7485345061), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IOpencastPit: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SectionNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall SectionNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SectionName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall SectionName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall CoalReserveArea([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall CoalReserveArea([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall WorkingsArea([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall WorkingsArea([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall CommissionYear([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall CommissionYear([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall CommissionMonth([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall CommissionMonth([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DecommissionYear([out, retval] long* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall DecommissionYear([in] long Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall DecommissionMonth([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall DecommissionMonth([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall DisturbedArea([out, retval] double* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall DisturbedArea([in] double Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall RehabilitatedArea([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall RehabilitatedArea([in] double Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall PitEvaporationArea([out, retval] double* Value);
    [propput, id(0x0000006F)]
    HRESULT _stdcall PitEvaporationArea([in] double Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall WorkingsAreaInterpolationOption([out, retval] long* Value);
    [propput, id(0x00000070)]
    HRESULT _stdcall WorkingsAreaInterpolationOption([in] long Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall DisturbedAreaInterpolationOption([out, retval] long* Value);
    [propput, id(0x00000071)]
    HRESULT _stdcall DisturbedAreaInterpolationOption([in] long Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall RehabilitatedAreaInterpolationOption([out, retval] long* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall RehabilitatedAreaInterpolationOption([in] long Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall PitEvaporationAreaInterpolationOption([out, retval] long* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall PitEvaporationAreaInterpolationOption([in] long Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall DisturbedAreaRunOffFactor([out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall DisturbedAreaRunOffFactor([in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall DisturbedWorkingsAreaRunOffFactor([out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall DisturbedWorkingsAreaRunOffFactor([in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall WashOffParameter([out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall WashOffParameter([in] double Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall SulphateBuildUpRate([out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall SulphateBuildUpRate([in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall InitialSaltMass([out, retval] double* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall InitialSaltMass([in] double Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall InspoilsStorageDecantVolume([out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall InspoilsStorageDecantVolume([in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall InspoilsStorageSeepageVolume([out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall InspoilsStorageSeepageVolume([in] double Value);
    [propget, id(0x0000007B)]
    HRESULT _stdcall InspoilsStorageInitialVolume([out, retval] double* Value);
    [propput, id(0x0000007B)]
    HRESULT _stdcall InspoilsStorageInitialVolume([in] double Value);
    [propget, id(0x0000007C)]
    HRESULT _stdcall InspoilsDecantInterpolationOption([out, retval] long* Value);
    [propput, id(0x0000007C)]
    HRESULT _stdcall InspoilsDecantInterpolationOption([in] long Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall InspoilsSeepageInterpolationOption([out, retval] long* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall InspoilsSeepageInterpolationOption([in] long Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall MaxSeepageRate([out, retval] double* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall MaxSeepageRate([in] double Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall SeepageEquationExponent([out, retval] double* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall SeepageEquationExponent([in] double Value);
    [propget, id(0x00000080)]
    HRESULT _stdcall PCDFullSurfaceArea([out, retval] double* Value);
    [propput, id(0x00000080)]
    HRESULT _stdcall PCDFullSurfaceArea([in] double Value);
    [propget, id(0x00000081)]
    HRESULT _stdcall PCDCapacity([out, retval] double* Value);
    [propput, id(0x00000081)]
    HRESULT _stdcall PCDCapacity([in] double Value);
    [propget, id(0x00000082)]
    HRESULT _stdcall PCDInitialVolume([out, retval] double* Value);
    [propput, id(0x00000082)]
    HRESULT _stdcall PCDInitialVolume([in] double Value);
    [propget, id(0x00000083)]
    HRESULT _stdcall InspoilsDamConcentration([out, retval] double* Value);
    [propput, id(0x00000083)]
    HRESULT _stdcall InspoilsDamConcentration([in] double Value);
    [propget, id(0x00000084)]
    HRESULT _stdcall StdDevWorkingsArea([out, retval] double* Value);
    [propput, id(0x00000084)]
    HRESULT _stdcall StdDevWorkingsArea([in] double Value);
    [propget, id(0x00000085)]
    HRESULT _stdcall StdDevSeepageDecant([out, retval] double* Value);
    [propput, id(0x00000085)]
    HRESULT _stdcall StdDevSeepageDecant([in] double Value);
    [id(0x00000086)]
    HRESULT _stdcall Populate([in] long AModuleID, [in] long ASectionNo, [in] BSTR ASectionName, [in] double ACoalReserveArea, [in] double AWorkingsArea, [in] long ACommissionYear, [in] long ACommissionMonth, [in] long ADecommissionYear, [in] long ADecommissionMonth, [in] double ADisturbedArea, [in] double ARehabilitatedArea, [in] double APitEvaporationArea, [in] long AWorkingsAreaInterpolationOption, [in] long ADisturbedAreaInterpolationOption, [in] long ARehabilitatedAreaInterpolationOption, [in] long AOpenSurfaceAreaInterpolationOption, [in] double ADisturbedAreaRunOffFactor, [in] double ADisturbedWorkingsAreaRunOffFactor, [in] double AWashOffParameter, [in] double ASulphateBuildUpRate, [in] double AInitialSaltMass, [in] double AInspoilsStorageDecantVolume, [in] double AInspoilsStorageSeepageVolume, [in] double AInspoilsStorageInitialVolume, [in] long AInspoilsDecantInterpolationOption, [in] long AInspoilsSeepageInterpolationOption, [in] double AMaxSeepageRate, [in] double ASeepageEquationExponent, [in] double APCDFullSurfaceArea, [in] double APCDCapacity, [in] double APCDInitialVolume, [in] double AInspoilsDamConcentration, [in] double AStdDevWorkingsArea, [in] double AStdDevSeepageDecant, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000087)]
    HRESULT _stdcall AddWorkingsAreaGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000088)]
    HRESULT _stdcall AddDisturbedAreaGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000089)]
    HRESULT _stdcall AddRehabilitatedAreaGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000008A)]
    HRESULT _stdcall AddPitEvaporationGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000008B)]
    HRESULT _stdcall AddInspoilsDecantGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000008C)]
    HRESULT _stdcall AddInspoilsSeepageGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000008D)]
    HRESULT _stdcall WorkingsAreaGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x0000008D)]
    HRESULT _stdcall WorkingsAreaGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x0000008E)]
    HRESULT _stdcall WorkingsAreaGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000008E)]
    HRESULT _stdcall WorkingsAreaGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000008F)]
    HRESULT _stdcall NoOfWorkingsAreaGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000090)]
    HRESULT _stdcall DisturbedAreaGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000090)]
    HRESULT _stdcall DisturbedAreaGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000091)]
    HRESULT _stdcall DisturbedAreaGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000091)]
    HRESULT _stdcall DisturbedAreaGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000092)]
    HRESULT _stdcall NoOfDisturbedAreaGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000093)]
    HRESULT _stdcall RehabilitatedAreaGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000093)]
    HRESULT _stdcall RehabilitatedAreaGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000094)]
    HRESULT _stdcall RehabilitatedAreaGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000094)]
    HRESULT _stdcall RehabilitatedAreaGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000095)]
    HRESULT _stdcall NoOfRehabilitatedAreaGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000096)]
    HRESULT _stdcall PitEvaporationGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000096)]
    HRESULT _stdcall PitEvaporationGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000097)]
    HRESULT _stdcall PitEvaporationGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000097)]
    HRESULT _stdcall PitEvaporationGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000098)]
    HRESULT _stdcall NoOfPitEvaporationGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000099)]
    HRESULT _stdcall InspoilsDecantGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000099)]
    HRESULT _stdcall InspoilsDecantGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x0000009A)]
    HRESULT _stdcall InspoilsDecantGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000009A)]
    HRESULT _stdcall InspoilsDecantGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000009B)]
    HRESULT _stdcall NoOfInspoilsDecantGrowthPoints([out, retval] long* Value);
    [propget, id(0x0000009C)]
    HRESULT _stdcall InspoilsSeepageGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x0000009C)]
    HRESULT _stdcall InspoilsSeepageGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x0000009D)]
    HRESULT _stdcall InspoilsSeepageGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000009D)]
    HRESULT _stdcall InspoilsSeepageGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000009E)]
    HRESULT _stdcall NoOfInspoilsSeepageGrowthPoints([out, retval] long* Value);
    [propget, id(0x0000009F)]
    HRESULT _stdcall DisturbedAreaRechargeFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x0000009F)]
    HRESULT _stdcall DisturbedAreaRechargeFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x000000A0)]
    HRESULT _stdcall DisturbedWorkingsAreaRechargeFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x000000A0)]
    HRESULT _stdcall DisturbedWorkingsAreaRechargeFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x000000A1)]
    HRESULT _stdcall WorkingsAreaQvsSLDNoOfPoints([out, retval] long* Value);
    [propget, id(0x000000A2)]
    HRESULT _stdcall WorkingsAreaQvsSLDLoadByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A2)]
    HRESULT _stdcall WorkingsAreaQvsSLDLoadByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000A3)]
    HRESULT _stdcall WorkingsAreaQvsSLDFlowRefByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A3)]
    HRESULT _stdcall WorkingsAreaQvsSLDFlowRefByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000A4)]
    HRESULT _stdcall SeepageDecantQvsSLDNoOfPoints([out, retval] long* Value);
    [propget, id(0x000000A5)]
    HRESULT _stdcall SeepageDecantQvsSLDLoadByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A5)]
    HRESULT _stdcall SeepageDecantQvsSLDLoadByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x000000A6)]
    HRESULT _stdcall SeepageDecantQvsSLDFlowRefByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x000000A6)]
    HRESULT _stdcall SeepageDecantQvsSLDFlowRefByIndex([in] long AIndex, [in] double Value);
    [id(0x000000A7)]
    HRESULT _stdcall AddWorkingsAreaLoadFlowRefPair([in] double ALoad, [in] double AFlowRef, [out, retval] VARIANT_BOOL* AResult);
    [id(0x000000A8)]
    HRESULT _stdcall AddSeepageDecantLoadFlowRefPair([in] double ALoad, [in] double AFlowRef, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x000000AA)]
    HRESULT _stdcall ModuleID([out, retval] long* Value);
    [propput, id(0x000000AA)]
    HRESULT _stdcall ModuleID([in] long Value);
  };

  [
    uuid(BEA1B616-53D1-4F24-9040-51693A8EF2E2), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IUndergroundSection: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SectionNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall SectionNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SectionName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall SectionName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall OutFlowRouteNo([out, retval] long* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall OutFlowRouteNo([in] long Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall UpstreamCatchmentArea([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall UpstreamCatchmentArea([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall BoardAndPillarArea([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall BoardAndPillarArea([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall HighExtractionArea([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall HighExtractionArea([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall SurfaceRunOffFactor([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall SurfaceRunOffFactor([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall BoardAndPillarInterpolationOption([out, retval] long* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall BoardAndPillarInterpolationOption([in] long Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall HighExtractionInterpolationOption([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall HighExtractionInterpolationOption([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall UndergroundStdDev([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall UndergroundStdDev([in] double Value);
    [id(0x0000006F)]
    HRESULT _stdcall Populate([in] long AModuleID, [in] long ASectionNo, [in] BSTR ASectionName, [in] long AOutFlowRouteNo, [in] double AUpstreamCatchmentArea, [in] double ABoardAndPillarArea, [in] double AHighExtractionArea, [in] double ASurfaceRunOffFactor, [in] long ABoardAndPillarInterpolationOption, [in] long AHighExtractionInterpolationOption, [in] double AUndergroundStdDev, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000070)]
    HRESULT _stdcall AddBoardAndPillarGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000071)]
    HRESULT _stdcall AddHighExtractionGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000072)]
    HRESULT _stdcall NoOfBoardAndPillarGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall NoOfHighExtractionGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall BoardAndPillarGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall BoardAndPillarGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall BoardAndPillarGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall BoardAndPillarGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall HighExtractionGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall HighExtractionGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall HighExtractionGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000077)]
    HRESULT _stdcall HighExtractionGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall UndergroundWaterRechargePortionByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000078)]
    HRESULT _stdcall UndergroundWaterRechargePortionByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall BoardAndPillarRechargeFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall BoardAndPillarRechargeFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall HighExtractionRechargeFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall HighExtractionRechargeFactorByMonth([in] long AMonthIndex, [in] double Value);
    [id(0x0000007B)]
    HRESULT _stdcall AddLoadFlowRefPair([in] double ALoad, [in] double AFlowRef, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000007C)]
    HRESULT _stdcall QvsSLDNoOfPoints([out, retval] long* Value);
    [propget, id(0x0000007D)]
    HRESULT _stdcall QvsSLDLoadByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000007D)]
    HRESULT _stdcall QvsSLDLoadByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000007E)]
    HRESULT _stdcall QvsSLDFlowRefByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000007E)]
    HRESULT _stdcall QvsSLDFlowRefByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x0000007F)]
    HRESULT _stdcall ModuleID([out, retval] long* Value);
    [propput, id(0x0000007F)]
    HRESULT _stdcall ModuleID([in] long Value);
  };

  [
    uuid(9B59804B-CA54-4926-A610-12DAC993AA07), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface ISlurryDump: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall SectionNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall SectionNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall SectionName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall SectionName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Area([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Area([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall RunOffFactor([out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall RunOffFactor([in] double Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall SeepProportion([out, retval] double* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall SeepProportion([in] double Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall PCDFullSupplyVolume([out, retval] double* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall PCDFullSupplyVolume([in] double Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PCDFullSupplyArea([out, retval] double* Value);
    [propput, id(0x0000006B)]
    HRESULT _stdcall PCDFullSupplyArea([in] double Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall PCDInitialVolume([out, retval] double* Value);
    [propput, id(0x0000006C)]
    HRESULT _stdcall PCDInitialVolume([in] double Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall InterpolationOption([out, retval] long* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall InterpolationOption([in] long Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall StdDev([out, retval] double* Value);
    [propput, id(0x0000006E)]
    HRESULT _stdcall StdDev([in] double Value);
    [id(0x0000006F)]
    HRESULT _stdcall Populate([in] long AModuleID, [in] long ASectionNo, [in] BSTR ASectionName, [in] double AArea, [in] double ARunOffFactor, [in] double ASeepProportion, [in] double APCDFullSupplyVolume, [in] double APCDFullSupplyArea, [in] double APCDInitialVolume, [in] long AInterpolatrionOption, [in] double AStdDev, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000070)]
    HRESULT _stdcall AddAreaGrowthData([in] long AYear, [in] double AGrowthFactor, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000071)]
    HRESULT _stdcall NoOfAreaGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall AreaGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000072)]
    HRESULT _stdcall AreaGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall AreaGrowthFactorByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000073)]
    HRESULT _stdcall AreaGrowthFactorByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall RechargeFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000074)]
    HRESULT _stdcall RechargeFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall QvsSLDFlowRefByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000075)]
    HRESULT _stdcall QvsSLDFlowRefByIndex([in] long AIndex, [in] double Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall QvsSLDLoadByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000076)]
    HRESULT _stdcall QvsSLDLoadByIndex([in] long AIndex, [in] double Value);
    [id(0x00000077)]
    HRESULT _stdcall AddLoadFlowRefPair([in] double ALoad, [in] double AFlowRef, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000078)]
    HRESULT _stdcall QvsSLDNoOfPoints([out, retval] long* Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall ModuleID([out, retval] long* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall ModuleID([in] long Value);
  };

  [
    uuid(41F2BF67-70E7-4263-9085-65AA62A78C24), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IIrrigationModule: INetworkModule
  {
    [propget, id(0x0000012D)]
    HRESULT _stdcall VersionNo([out, retval] long* Value);
    [propput, id(0x0000012D)]
    HRESULT _stdcall VersionNo([in] long Value);
    [propget, id(0x0000012E)]
    HRESULT _stdcall ModelType([out, retval] long* Value);
    [propput, id(0x0000012E)]
    HRESULT _stdcall ModelType([in] long Value);
    [propget, id(0x0000012F)]
    HRESULT _stdcall LastUsedModelType([out, retval] long* Value);
    [propput, id(0x0000012F)]
    HRESULT _stdcall LastUsedModelType([in] long Value);
    [propget, id(0x00000130)]
    HRESULT _stdcall MAP([out, retval] double* Value);
    [propput, id(0x00000130)]
    HRESULT _stdcall MAP([in] double Value);
    [propget, id(0x00000131)]
    HRESULT _stdcall RainfallFileName([out, retval] BSTR* Value);
    [propput, id(0x00000131)]
    HRESULT _stdcall RainfallFileName([in] BSTR Value);
    [propget, id(0x00000132)]
    HRESULT _stdcall MaxAnnualIrrigationAllocation([out, retval] double* Value);
    [propput, id(0x00000132)]
    HRESULT _stdcall MaxAnnualIrrigationAllocation([in] double Value);
    [propget, id(0x00000133)]
    HRESULT _stdcall AbstractionRouteNo([out, retval] long* Value);
    [propput, id(0x00000133)]
    HRESULT _stdcall AbstractionRouteNo([in] long Value);
    [propget, id(0x00000134)]
    HRESULT _stdcall ReturnFlowRouteNo([out, retval] long* Value);
    [propput, id(0x00000134)]
    HRESULT _stdcall ReturnFlowRouteNo([in] long Value);
    [propget, id(0x00000135)]
    HRESULT _stdcall ReturnFlowPercentage([out, retval] double* Value);
    [propput, id(0x00000135)]
    HRESULT _stdcall ReturnFlowPercentage([in] double Value);
    [propget, id(0x00000136)]
    HRESULT _stdcall AreaInterpolationType([out, retval] long* Value);
    [propput, id(0x00000136)]
    HRESULT _stdcall AreaInterpolationType([in] long Value);
    [propget, id(0x00000137)]
    HRESULT _stdcall MaxWaterAllocation([out, retval] double* Value);
    [propput, id(0x00000137)]
    HRESULT _stdcall MaxWaterAllocation([in] double Value);
    [propget, id(0x00000138)]
    HRESULT _stdcall WaterAllocationNoOfPoints([out, retval] long* Value);
    [propput, id(0x00000138)]
    HRESULT _stdcall WaterAllocationNoOfPoints([in] long Value);
    [propget, id(0x00000139)]
    HRESULT _stdcall WaterAllocationInterpolationType([out, retval] long* Value);
    [propput, id(0x00000139)]
    HRESULT _stdcall WaterAllocationInterpolationType([in] long Value);
    [propget, id(0x0000013A)]
    HRESULT _stdcall RunOffModuleNo([out, retval] long* Value);
    [propput, id(0x0000013A)]
    HRESULT _stdcall RunOffModuleNo([in] long Value);
    [propget, id(0x0000013B)]
    HRESULT _stdcall TransferCanalSeepage([out, retval] double* Value);
    [propput, id(0x0000013B)]
    HRESULT _stdcall TransferCanalSeepage([in] double Value);
    [propget, id(0x0000013C)]
    HRESULT _stdcall ProduceNetReturnFlows([out, retval] long* Value);
    [propput, id(0x0000013C)]
    HRESULT _stdcall ProduceNetReturnFlows([in] long Value);
    [propget, id(0x0000013D)]
    HRESULT _stdcall TransferCanalFlowLossProportion([out, retval] double* Value);
    [propput, id(0x0000013D)]
    HRESULT _stdcall TransferCanalFlowLossProportion([in] double Value);
    [propget, id(0x0000013E)]
    HRESULT _stdcall TransferCanalSaltLossProportion([out, retval] double* Value);
    [propput, id(0x0000013E)]
    HRESULT _stdcall TransferCanalSaltLossProportion([in] double Value);
    [propget, id(0x0000013F)]
    HRESULT _stdcall IrrigationEfficiencyFactor([out, retval] double* Value);
    [propput, id(0x0000013F)]
    HRESULT _stdcall IrrigationEfficiencyFactor([in] double Value);
    [propget, id(0x00000140)]
    HRESULT _stdcall ReturnFlowFactor([out, retval] double* Value);
    [propput, id(0x00000140)]
    HRESULT _stdcall ReturnFlowFactor([in] double Value);
    [propget, id(0x00000142)]
    HRESULT _stdcall LowerZoneReturnFlowProportion([out, retval] double* Value);
    [propput, id(0x00000142)]
    HRESULT _stdcall LowerZoneReturnFlowProportion([in] double Value);
    [propget, id(0x00000141)]
    HRESULT _stdcall UpperZoneReturnFlowProportion([out, retval] double* Value);
    [propput, id(0x00000141)]
    HRESULT _stdcall UpperZoneReturnFlowProportion([in] double Value);
    [propget, id(0x00000143)]
    HRESULT _stdcall SaltConcentrationFactor([out, retval] double* Value);
    [propput, id(0x00000143)]
    HRESULT _stdcall SaltConcentrationFactor([in] double Value);
    [propget, id(0x00000144)]
    HRESULT _stdcall SaltLossProportion([out, retval] double* Value);
    [propput, id(0x00000144)]
    HRESULT _stdcall SaltLossProportion([in] double Value);
    [propget, id(0x00000145)]
    HRESULT _stdcall SaltLoad1([out, retval] double* Value);
    [propput, id(0x00000145)]
    HRESULT _stdcall SaltLoad1([in] double Value);
    [propget, id(0x00000146)]
    HRESULT _stdcall SaltLoad2([out, retval] double* Value);
    [propput, id(0x00000146)]
    HRESULT _stdcall SaltLoad2([in] double Value);
    [propget, id(0x00000147)]
    HRESULT _stdcall InitialSaltLoadUpperZone([out, retval] double* Value);
    [propput, id(0x00000147)]
    HRESULT _stdcall InitialSaltLoadUpperZone([in] double Value);
    [propget, id(0x00000148)]
    HRESULT _stdcall InitialSaltLoadLowerZone([out, retval] double* Value);
    [propput, id(0x00000148)]
    HRESULT _stdcall InitialSaltLoadLowerZone([in] double Value);
    [propget, id(0x00000149)]
    HRESULT _stdcall SoilMoistureCapacityUpperZone([out, retval] double* Value);
    [propput, id(0x00000149)]
    HRESULT _stdcall SoilMoistureCapacityUpperZone([in] double Value);
    [propget, id(0x0000014A)]
    HRESULT _stdcall SoilMoistureCapacityLowerZone([out, retval] double* Value);
    [propput, id(0x0000014A)]
    HRESULT _stdcall SoilMoistureCapacityLowerZone([in] double Value);
    [propget, id(0x0000014B)]
    HRESULT _stdcall TargetSoilMoistureStorage([out, retval] double* Value);
    [propput, id(0x0000014B)]
    HRESULT _stdcall TargetSoilMoistureStorage([in] double Value);
    [propget, id(0x0000014C)]
    HRESULT _stdcall InitialSoilMoistureStorage([out, retval] double* Value);
    [propput, id(0x0000014C)]
    HRESULT _stdcall InitialSoilMoistureStorage([in] double Value);
    [propget, id(0x0000014D)]
    HRESULT _stdcall EffectiveRainfallFactor1([out, retval] double* Value);
    [propput, id(0x0000014D)]
    HRESULT _stdcall EffectiveRainfallFactor1([in] double Value);
    [propget, id(0x0000014E)]
    HRESULT _stdcall EffectiveRainfallFactor2([out, retval] double* Value);
    [propput, id(0x0000014E)]
    HRESULT _stdcall EffectiveRainfallFactor2([in] double Value);
    [propget, id(0x0000014F)]
    HRESULT _stdcall GrowthInterpolationType([out, retval] long* Value);
    [propput, id(0x0000014F)]
    HRESULT _stdcall GrowthInterpolationType([in] long Value);
    [propget, id(0x00000150)]
    HRESULT _stdcall ReturnFlowInterpolationType([out, retval] long* Value);
    [propput, id(0x00000150)]
    HRESULT _stdcall ReturnFlowInterpolationType([in] long Value);
    [propget, id(0x00000151)]
    HRESULT _stdcall EfficiencyInterpolationType([out, retval] long* Value);
    [propput, id(0x00000151)]
    HRESULT _stdcall EfficiencyInterpolationType([in] long Value);
    [propget, id(0x00000152)]
    HRESULT _stdcall IrrigationName([out, retval] BSTR* Value);
    [propput, id(0x00000152)]
    HRESULT _stdcall IrrigationName([in] BSTR Value);
    [id(0x00000153)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long AModuleID, [in] BSTR AModuleType, [in] long AModuleNumber, [in] long ANetworkSequence, [in] BSTR AActive, [in] long AVersionNo, [in] BSTR AIrrigationName, [in] long AModelType, [in] long ALastUsedModelType, [in] double AMAP, [in] BSTR ARainfallFileName, [in] double AMaxAnnualIrrigationAllocation, [in] long AAbstractionRouteNo, [in] long AReturnFlowRouteNo, [in] double AReturnFlowPercentage, [in] long AAreaInterpolationType, [in] double AMaxWaterAllocation, [in] long AWaterAllocationNoOfPoints, [in] long AWaterAllocationInterpolationType, [in] long ARunOffModuleNo, [in] double ATransferCanalSeepage, [in] long AProduceNetReturnFlows, [in] double ATransferCanalFlowLossProportion, [in] double ATransferCanalSaltLossProportion, [in] double AIrrigationEfficiencyFactor, [in] double AReturnFlowFactor, [in] double AUpperZoneReturnFlowProportion, [in] double ALowerZoneReturnFlowProportion, [in] double ASaltConcentrationFactor, [in] double ASaltLossProportion, [in] double ASaltLoad1, [in] double ASaltLoad2, [in] double AInitialSaltLoadUpperZone, [in] double AInitialSaltLoadLowerZone, [in] double ASoilMoistureCapacityUpperZone, [in] double ASoilMoistureCapacityLowerZone, [in] double ATargetSoilMoistureStorage, [in] double AInitialSoilMoistureStorage, [in] double AEffectiveRainfallFactor1, [in] double AEffectiveRainfallFactor2, [in] long AGrowthInterpolationType, [in] long AReturnFlowInterpolationType, [in] long AEfficiencyInterpolationType, [in] double ALongitude, [in] double ALatitude, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000154)]
    HRESULT _stdcall PIndexFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000154)]
    HRESULT _stdcall PIndexFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000155)]
    HRESULT _stdcall RainfallFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000155)]
    HRESULT _stdcall RainfallFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000156)]
    HRESULT _stdcall CropFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000156)]
    HRESULT _stdcall CropFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000157)]
    HRESULT _stdcall APanFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000157)]
    HRESULT _stdcall APanFactorByMonth([in] long AMonthIndex, [in] double Value);
    [propget, id(0x00000159)]
    HRESULT _stdcall NoOfIrrigationCrops([out, retval] long* Value);
    [propget, id(0x0000015A)]
    HRESULT _stdcall IrrigationCropByCropNo([in] long ACropNo, [out, retval] IIrrigationCrop** Value);
    [propget, id(0x0000015B)]
    HRESULT _stdcall IrrigationCropByIndex([in] long AIndex, [out, retval] IIrrigationCrop** Value);
    [id(0x0000015C)]
    HRESULT _stdcall AddAreaData([in] long AYear, [in] double AArea, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000015D)]
    HRESULT _stdcall NoOfAreaDataPoints([out, retval] long* Value);
    [propget, id(0x0000015E)]
    HRESULT _stdcall AreaYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x0000015E)]
    HRESULT _stdcall AreaYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x0000015F)]
    HRESULT _stdcall AreaValueByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000015F)]
    HRESULT _stdcall AreaValueByIndex([in] long AIndex, [in] double Value);
    [id(0x00000160)]
    HRESULT _stdcall AddAllocationGrowthData([in] long AYear, [in] double AGrowth, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000161)]
    HRESULT _stdcall NoOfAllocationGrowthPoints([out, retval] long* Value);
    [propget, id(0x00000162)]
    HRESULT _stdcall AllocationGrowthYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000162)]
    HRESULT _stdcall AllocationGrowthYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000163)]
    HRESULT _stdcall AllocationGrowthValueByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000163)]
    HRESULT _stdcall AllocationGrowthValueByIndex([in] long AIndex, [in] double Value);
    [id(0x00000164)]
    HRESULT _stdcall AddEfficiencyData([in] long AYear, [in] double AEfficiency, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000165)]
    HRESULT _stdcall NoOfEfficiencyDataPoints([out, retval] long* Value);
    [propget, id(0x00000166)]
    HRESULT _stdcall EfficiencyYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x00000166)]
    HRESULT _stdcall EfficiencyYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x00000167)]
    HRESULT _stdcall EfficiencyValueByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x00000167)]
    HRESULT _stdcall EfficiencyValueByIndex([in] long AIndex, [in] double Value);
    [id(0x00000168)]
    HRESULT _stdcall AddReturnFlowData([in] long AYear, [in] double AValue, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000169)]
    HRESULT _stdcall NoOfReturnFlowDataPoints([out, retval] long* Value);
    [propget, id(0x0000016A)]
    HRESULT _stdcall ReturnFlowYearByIndex([in] long AIndex, [out, retval] long* Value);
    [propput, id(0x0000016A)]
    HRESULT _stdcall ReturnFlowYearByIndex([in] long AIndex, [in] long Value);
    [propget, id(0x0000016B)]
    HRESULT _stdcall ReturnFlowValueByIndex([in] long AIndex, [out, retval] double* Value);
    [propput, id(0x0000016B)]
    HRESULT _stdcall ReturnFlowValueByIndex([in] long AIndex, [in] double Value);
  };

  [
    uuid(15CE7C42-F633-4E76-B01B-CBF4A5EDF683), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IIrrigationModuleAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall IrrigationModuleCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall IrrigationModuleByID([in] long AModuleID, [out, retval] IIrrigationModule** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall IrrigationModuleByIndex([in] long AInde, [out, retval] IIrrigationModule** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall IrrigationModuleByNumber([in] long AModuleNumber, [out, retval] IIrrigationModule** Value);
    [id(0x0000006B)]
    HRESULT _stdcall CreateNewIrrigationModule([in] long ANetworkID, [out, retval] IIrrigationModule** AResult);
    [id(0x0000006C)]
    HRESULT _stdcall RemoveIrrigationModule([in] long AModuleNumber, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(390CF9D3-7291-4C73-B119-48D9D6F8D21D), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IIrrigationCrop: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall CropNo([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall CropNo([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall CropName([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall CropName([in] BSTR Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall CropPercentage([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall CropPercentage([in] double Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall CropFactorByMonth([in] long AMonthIndex, [out, retval] double* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall CropFactorByMonth([in] long AMonthIndex, [in] double Value);
    [id(0x00000069)]
    HRESULT _stdcall Populate([in] long ACropNo, [in] BSTR ACropName, [in] double ACropPercentage, [in] BSTR AMonthlyCropFactors, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(99C287E1-02A5-40E8-9884-F256C553AD2A), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IHydroNVDrawing: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall NetworkID([out, retval] long* Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall DrawingID([out, retval] long* Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall DrawingName([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall DrawingName([in] BSTR Value);
    [propget, id(0x000000CC)]
    HRESULT _stdcall GISDrawing([out, retval] long* Value);
    [propput, id(0x000000CC)]
    HRESULT _stdcall GISDrawing([in] long Value);
    [id(0x000000CD)]
    HRESULT _stdcall Populate([in] long ANetworkID, [in] long ADrawingID, [in] BSTR ADrawingName, [in] long AGISDrawing, [in] long AReadOnly, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x00000065)]
    HRESULT _stdcall ReadOnly([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ReadOnly([in] long Value);
  };

  [
    uuid(70781048-F72F-4312-BFB0-2C3535D90BAE), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IHydroNVDrawingAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall HydroNVDrawingCount([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall HydroNVDrawingByID([in] long ADrawingID, [out, retval] IHydroNVDrawing** Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall HydroNVDrawingByIndex([in] long AIndex, [out, retval] IHydroNVDrawing** Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall HydroNVDrawingByName([in] BSTR AName, [out, retval] IHydroNVDrawing** Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall DrawingExists([in] BSTR ADrawingName, [out, retval] VARIANT_BOOL* Value);
    [id(0x0000006C)]
    HRESULT _stdcall CreateNewDrawing([in] long ANetworkID, [in] BSTR ADrawingFileName, [in] long AGISDrawing, [in] BSTR ACopyFrom, [out, retval] IHydroNVDrawing** AResult);
    [id(0x0000006D)]
    HRESULT _stdcall DeleteHydroNVDrawing([in] long ADrawingID, [in] BSTR ADrawingFileName, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(D40CF196-D458-48F7-A13F-794A8C5D482E), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IHydrologyModel: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Network([out, retval] INetwork** Value);
    [id(0x00000066)]
    HRESULT _stdcall ShowNetworkRouteDialog([in] long ARouteNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000067)]
    HRESULT _stdcall ShowReservoirModuleDialog([in] long AModuleNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000068)]
    HRESULT _stdcall ShowRunOffModuleDialog([in] long AModuleNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000069)]
    HRESULT _stdcall ShowChannelModuleDialog([in] long AModuleNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006C)]
    HRESULT _stdcall ShowIrrigationModuleDialog([in] long AModuleNo, [out, retval] VARIANT_BOOL* AResult);
    [propget, id(0x0000006D)]
    HRESULT _stdcall MayChangeNetwork([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000006D)]
    HRESULT _stdcall MayChangeNetwork([in] VARIANT_BOOL Value);
    [id(0x0000006E)]
    HRESULT _stdcall ShowMineModuleDialog([in] long AModuleNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006F)]
    HRESULT _stdcall ShowMineOpencastPitDialog([in] long AModuleNo, [in] long ASectionNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000070)]
    HRESULT _stdcall ShowMineUndergroundSectionDialog([in] long AModuleNo, [in] long ASectionNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000071)]
    HRESULT _stdcall ShowMineSlurryDumpDialog([in] long AModuleNo, [in] long ASectionNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000094)]
    HRESULT _stdcall HandleVNVEvent([in]  IUnknown* AVisioApp, [in]  IUnknown* AVisioDoc, [in] long AVisioEventCode, [in]  IUnknown* ASourceObj, [in] long AEventID, [in] long AEventSeqNum, [in]  IUnknown* ASubjectObj, [in] VARIANT AMoreInfo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000096)]
    HRESULT _stdcall ProcessVNVSpecial([in] BSTR AParameter, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000072)]
    HRESULT _stdcall UpdateNetworkData([in] BSTR AXMLOut, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006A)]
    HRESULT _stdcall ShowMineSectionsDialog([in] long AModuleNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000006B)]
    HRESULT _stdcall ShowNetworkSequenceDialog([in] long AModuleID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000073)]
    HRESULT _stdcall ShowObservationPointDialog([in] long ARouteNo, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000074)]
    HRESULT _stdcall CreateNewNetwork([in] BSTR ANetworkCode, [in] long AVersionNo, [in] BSTR AInputDir, [in] BSTR AOutputDir, [in] BSTR ADebugRequired, [in] long ADebugStartPeriod, [in] long ADebudEndPeriod, [in] BSTR ASummaryRequired, [in] long ASimulationStartYear, [in] long ASimulationEndYear, [in] long AReadOnly, [in, out] long* ANetworkID, [in, out] BSTR* AErrorMsg, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000075)]
    HRESULT _stdcall ShowHydroOutputDialog([in] BSTR AElementType, [in] BSTR AElementSubType, [in] long AElementNo, [in] long ASubElementID, [in] long AResultTypeID, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000076)]
    HRESULT _stdcall RefreshOutputDlg([in] BSTR AXMLOut, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000077)]
    HRESULT _stdcall FreeOutputDlg(void);
    [id(0x00000078)]
    HRESULT _stdcall DeleteNetwork([in] long ANetworkID, [in, out] BSTR* AErrorMsg, [out, retval] VARIANT_BOOL* AResult);
    [id(0x00000079)]
    HRESULT _stdcall CopyNetwork([in] long ANetworkID, [in] BSTR ANewNetworkCode, [in, out] BSTR* AErrorMsg, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000007A)]
    HRESULT _stdcall ExportNetwork([in] long ANetworkID, [in] BSTR ADirectory, [in, out] BSTR* AErrorMsg, [out, retval] VARIANT_BOOL* AResult);
    [id(0x0000007B)]
    HRESULT _stdcall ImportNetwork([in] BSTR ADirectory, [in] long ANetworkID, [in, out] BSTR* AErrorMsg, [out, retval] VARIANT_BOOL* AResult);
  };

  [
    uuid(7FDC9172-8066-4100-9299-4E4556BE44EC), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IYearVolumeAreaData: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall Year([out, retval] long* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall Year([in] long Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Volume([out, retval] double* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Volume([in] double Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall Area([out, retval] double* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall Area([in] double Value);
  };

  [
    uuid(CCF80B02-225B-4CE1-BDA7-DD8B9DB57D09), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IHydroOutputAgent: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall HydroOutput([in] BSTR AElementType, [in] BSTR AElementSubType, [in] long AElementID, [in] long ASubElementID, [in] long AResultTypeID, [out, retval] IHydroOutput** Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall ResultTypeCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ResultTypeByIndex([in] long AIndex, [out, retval] IHydroResultType** Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall ResultTypeByID([in] long AResultTypeID, [out, retval] IHydroResultType** Value);
  };

  [
    uuid(9504DE8B-38B1-46B5-BB07-4D010FD75245), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IHydroOutput: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall ResultID([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall NetworkID([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall ElementType([out, retval] BSTR* Value);
    [propput, id(0x00000067)]
    HRESULT _stdcall ElementType([in] BSTR Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall ElementID([out, retval] long* Value);
    [propput, id(0x00000068)]
    HRESULT _stdcall ElementID([in] long Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall SubElementID([out, retval] long* Value);
    [propput, id(0x00000069)]
    HRESULT _stdcall SubElementID([in] long Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall ResultTypeID([out, retval] long* Value);
    [propput, id(0x0000006A)]
    HRESULT _stdcall ResultTypeID([in] long Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall PeriodsPerYear([out, retval] long* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall IntervalCount([out, retval] long* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall YearCount([out, retval] long* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall StartYear([out, retval] long* Value);
    [propget, id(0x0000006F)]
    HRESULT _stdcall EndYear([out, retval] long* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall YearTotal([in] long AYearIndex, [out, retval] double* Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall YearAverage([in] long AYearIndex, [out, retval] double* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall PeriodTotal([in] long APeriodIndex, [out, retval] double* Value);
    [propget, id(0x00000073)]
    HRESULT _stdcall PeriodAverage([in] long APeriodIndex, [out, retval] double* Value);
    [propget, id(0x00000074)]
    HRESULT _stdcall Year([in] long AYearIndex, [out, retval] long* Value);
    [propget, id(0x00000075)]
    HRESULT _stdcall Data([in] long AIntervalIndex, [out, retval] double* Value);
    [propget, id(0x00000076)]
    HRESULT _stdcall DataByYearMonth([in] long AYear, [in] long AMonth, [out, retval] double* Value);
    [propget, id(0x00000077)]
    HRESULT _stdcall OverallAverage([out, retval] double* Value);
    [propget, id(0x00000078)]
    HRESULT _stdcall OverallTotal([out, retval] double* Value);
    [propget, id(0x00000079)]
    HRESULT _stdcall ElementSubType([out, retval] BSTR* Value);
    [propput, id(0x00000079)]
    HRESULT _stdcall ElementSubType([in] BSTR Value);
    [propget, id(0x0000007A)]
    HRESULT _stdcall AllZero([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x0000007A)]
    HRESULT _stdcall AllZero([in] VARIANT_BOOL Value);
  };

  [
    uuid(5EBFB19D-23E2-4A5D-80E1-CA2125725169), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface ITimeSeries: IUnknown
  {
    [propget, id(0x00000065)]
    HRESULT _stdcall PeriodsPerYear([out, retval] long* Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall IntervalCount([out, retval] long* Value);
    [propget, id(0x00000067)]
    HRESULT _stdcall YearCount([out, retval] long* Value);
    [propget, id(0x00000068)]
    HRESULT _stdcall StartYear([out, retval] long* Value);
    [propget, id(0x00000069)]
    HRESULT _stdcall EndYear([out, retval] long* Value);
    [propget, id(0x0000006A)]
    HRESULT _stdcall YearTotal([in] long AYearIndex, [out, retval] double* Value);
    [propget, id(0x0000006B)]
    HRESULT _stdcall YearAverage([in] long AYearIndex, [out, retval] double* Value);
    [propget, id(0x0000006C)]
    HRESULT _stdcall PeriodTotal([in] long APeriodIndex, [out, retval] double* Value);
    [propget, id(0x0000006D)]
    HRESULT _stdcall PeriodAverage([in] long APeriodIndex, [out, retval] double* Value);
    [propget, id(0x0000006E)]
    HRESULT _stdcall Year([in] long AYearIndex, [out, retval] long* Value);
    [propget, id(0x0000006F), uidefault]
    HRESULT _stdcall Data([in] long AIntervalIndex, [out, retval] double* Value);
    [propget, id(0x00000070)]
    HRESULT _stdcall DataByYearMonth([in] long AYear, [in] long AMonth, [out, retval] double* Value);
    [propget, id(0x00000071)]
    HRESULT _stdcall OverallAverage([out, retval] double* Value);
    [propget, id(0x00000072)]
    HRESULT _stdcall OverallTotal([out, retval] double* Value);
  };

  [
    uuid(6154CD50-12B5-4C64-896B-26E8D3836BEA), 
    version(1.0), 
    dual, 
    oleautomation
  ]
  interface IHydroResultType: IUnknown
  {
    [propget, id(0x000000C9)]
    HRESULT _stdcall ResultTypeID([out, retval] long* Value);
    [propput, id(0x000000C9)]
    HRESULT _stdcall ResultTypeID([in] long Value);
    [propget, id(0x000000CA)]
    HRESULT _stdcall ElementType([out, retval] BSTR* Value);
    [propput, id(0x000000CA)]
    HRESULT _stdcall ElementType([in] BSTR Value);
    [propget, id(0x000000CB)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propput, id(0x000000CB)]
    HRESULT _stdcall Description([in] BSTR Value);
    [propget, id(0x00000065)]
    HRESULT _stdcall ElementSubType([out, retval] BSTR* Value);
    [propput, id(0x00000065)]
    HRESULT _stdcall ElementSubType([in] BSTR Value);
    [propget, id(0x00000066)]
    HRESULT _stdcall Units([out, retval] BSTR* Value);
    [propput, id(0x00000066)]
    HRESULT _stdcall Units([in] BSTR Value);
  };

  [
    uuid(99658A58-442A-45A9-8EA1-80A449E0E923), 
    version(1.0), 
    oleautomation
  ]
  interface IHydrologyComObject: IUnknown
  {
  };

  [
    uuid(E020ECF0-703B-4F86-AAEE-5D24098B5D55), 
    version(1.0)
  ]
  coclass HydrologyComObject
  {
    [default] interface IHydrologyComObject;
  };

};