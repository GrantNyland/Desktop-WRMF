[
  uuid(C2EB46E4-88B9-4485-A9B3-89ACEF8A60CF), 
  version(1.0), 
  helpstring("RainfallCom Library")
    
]
library RainfallCom
{

  importlib("stdole2.tlb");

  [
    uuid(5B0D324F-7F4A-417A-8F8A-5413B9B10241), 
    version(1.0), 
    helpstring("Interface for RainfallComObject Object"), 
    oleautomation
  ]
   interface IRainfallComObject: IUnknown
  {
  };

  [
    uuid(803AAF27-D5D2-440B-BB17-3AFE7041E9C3), 
    version(1.0), 
    helpstring("RainfallComObject")
  ]
  coclass RainfallComObject
  {
    [default] interface IRainfallComObject;
  };

  [
    uuid(88D5FFF2-18CD-4F27-94EE-500881DE5F63), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IRainGauge: IUnknown
  {
    [
    propget, 
    id(0x00000065)
    ]
    HRESULT _stdcall Group([out, retval] BSTR * Value );
    [
    propget, 
    id(0x00000066)
    ]
    HRESULT _stdcall GaugeNumber([out, retval] BSTR * Value );
    [
    propget, 
    id(0x00000067)
    ]
    HRESULT _stdcall GaugeName([out, retval] BSTR * Value );
    [
    propget, 
    id(0x00000068)
    ]
    HRESULT _stdcall GaugeID([out, retval] long * Value );
    [
    propget, 
    id(0x00000069)
    ]
    HRESULT _stdcall Latitude([out, retval] long * Value );
    [
    propget, 
    id(0x0000006A)
    ]
    HRESULT _stdcall Longitude([out, retval] long * Value );
    [
    propget, 
    id(0x0000006B)
    ]
    HRESULT _stdcall Selected([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x0000006B)
    ]
    HRESULT _stdcall Selected([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x0000006C)
    ]
    HRESULT _stdcall IsInWR90([out, retval] VARIANT_BOOL * Value );
    [
    propget, 
    id(0x0000006D)
    ]
    HRESULT _stdcall ListIndex([out, retval] long * Value );
  };

  [
    uuid(FCD2A3B4-3438-4803-B350-FD4A6707099A), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IYearlyData: IUnknown
  {
    [
    propget, 
    id(0x00000065)
    ]
    HRESULT _stdcall Year([out, retval] long * Value );
    [
    propput, 
    id(0x00000065)
    ]
    HRESULT _stdcall Year([in] long Value );
    [
    propget, 
    id(0x00000066)
    ]
    HRESULT _stdcall HydroYear([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000066)
    ]
    HRESULT _stdcall HydroYear([in] BSTR Value );
    [
    propget, 
    id(0x00000067)
    ]
    HRESULT _stdcall Total([out, retval] double * Value );
    [
    propput, 
    id(0x00000067)
    ]
    HRESULT _stdcall Total([in] double Value );
    [
    propget, 
    id(0x00000068)
    ]
    HRESULT _stdcall MonthlyRainfall([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000068)
    ]
    HRESULT _stdcall MonthlyRainfall([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000069)
    ]
    HRESULT _stdcall MonthlyPatchSign([in] long AMonth, [out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000069)
    ]
    HRESULT _stdcall MonthlyPatchSign([in] long AMonth, [in] BSTR Value );
    [
    propget, 
    id(0x0000006A)
    ]
    HRESULT _stdcall MissingMonths([out, retval] long * Value );
    [
    propput, 
    id(0x0000006A)
    ]
    HRESULT _stdcall MissingMonths([in] long Value );
    [
    propget, 
    id(0x0000006B)
    ]
    HRESULT _stdcall HasUnreliableData([out, retval] VARIANT_BOOL * Value );
    [
    propget, 
    id(0x0000006C)
    ]
    HRESULT _stdcall UnreliableMonths([out, retval] long * Value );
    [
    propput, 
    id(0x0000006C)
    ]
    HRESULT _stdcall UnreliableMonths([in] long Value );
    [
    propget, 
    id(0x0000006D)
    ]
    HRESULT _stdcall HasMissingData([out, retval] VARIANT_BOOL * Value );
    [
    propget, 
    id(0x0000006E)
    ]
    HRESULT _stdcall MonthlyScaledDown([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000006E)
    ]
    HRESULT _stdcall MonthlyScaledDown([in] long AMonth, [in] double Value );
  };

  [
    uuid(78B959E4-6155-413A-B07B-37584161CBC8), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IRainfallDataSplit: IUnknown
  {
    [
    propget, 
    id(0x00000065)
    ]
    HRESULT _stdcall HydroStartYear([out, retval] long * Value );
    [
    propput, 
    id(0x00000065)
    ]
    HRESULT _stdcall HydroStartYear([in] long Value );
    [
    propget, 
    id(0x00000066)
    ]
    HRESULT _stdcall HydroEndYear([out, retval] long * Value );
    [
    propput, 
    id(0x00000066)
    ]
    HRESULT _stdcall HydroEndYear([in] long Value );
    [
    propget, 
    id(0x00000067)
    ]
    HRESULT _stdcall NrOfMissingMonths([out, retval] long * Value );
    [
    propput, 
    id(0x00000067)
    ]
    HRESULT _stdcall NrOfMissingMonths([in] long Value );
    [
    propget, 
    id(0x00000068)
    ]
    HRESULT _stdcall GrandTotal([out, retval] double * Value );
    [
    propput, 
    id(0x00000068)
    ]
    HRESULT _stdcall GrandTotal([in] double Value );
    [
    propget, 
    id(0x00000069)
    ]
    HRESULT _stdcall MAP([out, retval] double * Value );
    [
    propput, 
    id(0x00000069)
    ]
    HRESULT _stdcall MAP([in] double Value );
    [
    propget, 
    id(0x0000006A)
    ]
    HRESULT _stdcall StdDeviation([out, retval] double * Value );
    [
    propput, 
    id(0x0000006A)
    ]
    HRESULT _stdcall StdDeviation([in] double Value );
    [
    propget, 
    id(0x0000006B)
    ]
    HRESULT _stdcall CV([out, retval] double * Value );
    [
    propput, 
    id(0x0000006B)
    ]
    HRESULT _stdcall CV([in] double Value );
    [
    propget, 
    id(0x0000006C)
    ]
    HRESULT _stdcall XGrandTotal([out, retval] double * Value );
    [
    propput, 
    id(0x0000006C)
    ]
    HRESULT _stdcall XGrandTotal([in] double Value );
    [
    propget, 
    id(0x0000006D)
    ]
    HRESULT _stdcall XMAP([out, retval] double * Value );
    [
    propput, 
    id(0x0000006D)
    ]
    HRESULT _stdcall XMAP([in] double Value );
    [
    propget, 
    id(0x0000006E)
    ]
    HRESULT _stdcall XStdDeviation([out, retval] double * Value );
    [
    propput, 
    id(0x0000006E)
    ]
    HRESULT _stdcall XStdDeviation([in] double Value );
    [
    propget, 
    id(0x0000006F)
    ]
    HRESULT _stdcall XCV([out, retval] double * Value );
    [
    propput, 
    id(0x0000006F)
    ]
    HRESULT _stdcall XCV([in] double Value );
    [
    propget, 
    id(0x00000070)
    ]
    HRESULT _stdcall YearCount([out, retval] long * Value );
    [
    propput, 
    id(0x00000070)
    ]
    HRESULT _stdcall YearCount([in] long Value );
    [
    propget, 
    id(0x00000071)
    ]
    HRESULT _stdcall YearMin([out, retval] double * Value );
    [
    propput, 
    id(0x00000071)
    ]
    HRESULT _stdcall YearMin([in] double Value );
    [
    propget, 
    id(0x00000072)
    ]
    HRESULT _stdcall YearMax([out, retval] double * Value );
    [
    propput, 
    id(0x00000072)
    ]
    HRESULT _stdcall YearMax([in] double Value );
    [
    propget, 
    id(0x00000073)
    ]
    HRESULT _stdcall XYearCount([out, retval] long * Value );
    [
    propput, 
    id(0x00000073)
    ]
    HRESULT _stdcall XYearCount([in] long Value );
    [
    propget, 
    id(0x00000074)
    ]
    HRESULT _stdcall XYearMin([out, retval] double * Value );
    [
    propput, 
    id(0x00000074)
    ]
    HRESULT _stdcall XYearMin([in] double Value );
    [
    propget, 
    id(0x00000075)
    ]
    HRESULT _stdcall XYearMax([out, retval] double * Value );
    [
    propput, 
    id(0x00000075)
    ]
    HRESULT _stdcall XYearMax([in] double Value );
    [
    propget, 
    id(0x00000076)
    ]
    HRESULT _stdcall MonthCount([in] long AMonth, [out, retval] long * Value );
    [
    propput, 
    id(0x00000076)
    ]
    HRESULT _stdcall MonthCount([in] long AMonth, [in] long Value );
    [
    propget, 
    id(0x00000077)
    ]
    HRESULT _stdcall MonthTotal([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000077)
    ]
    HRESULT _stdcall MonthTotal([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000078)
    ]
    HRESULT _stdcall MonthMin([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000078)
    ]
    HRESULT _stdcall MonthMin([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000079)
    ]
    HRESULT _stdcall MonthMax([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000079)
    ]
    HRESULT _stdcall MonthMax([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000007A)
    ]
    HRESULT _stdcall MonthMAP([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000007A)
    ]
    HRESULT _stdcall MonthMAP([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000007B)
    ]
    HRESULT _stdcall MonthStdDev([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000007B)
    ]
    HRESULT _stdcall MonthStdDev([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000007C)
    ]
    HRESULT _stdcall MonthCV([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000007C)
    ]
    HRESULT _stdcall MonthCV([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000007D)
    ]
    HRESULT _stdcall XMonthCount([in] long AMonth, [out, retval] long * Value );
    [
    propput, 
    id(0x0000007D)
    ]
    HRESULT _stdcall XMonthCount([in] long AMonth, [in] long Value );
    [
    propget, 
    id(0x0000007E)
    ]
    HRESULT _stdcall XMonthTotal([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000007E)
    ]
    HRESULT _stdcall XMonthTotal([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000007F)
    ]
    HRESULT _stdcall XMonthMin([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000007F)
    ]
    HRESULT _stdcall XMonthMin([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000080)
    ]
    HRESULT _stdcall XMonthMax([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000080)
    ]
    HRESULT _stdcall XMonthMax([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000081)
    ]
    HRESULT _stdcall XMonthMAP([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000081)
    ]
    HRESULT _stdcall XMonthMAP([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000082)
    ]
    HRESULT _stdcall XMonthStdDev([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000082)
    ]
    HRESULT _stdcall XMonthStdDev([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000083)
    ]
    HRESULT _stdcall XMonthCV([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000083)
    ]
    HRESULT _stdcall XMonthCV([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000084)
    ]
    HRESULT _stdcall HighlightMonths([out, retval] BSTR * Value );
    [
    propget, 
    id(0x00000085)
    ]
    HRESULT _stdcall HighlightYears([out, retval] BSTR * Value );
  };

  [
    uuid(989135AE-A86D-46EB-8874-BBD7A51116FC), 
    version(1.0), 
    oleautomation
  ]
   interface IRainfallModel: IUnknown
  {
    [
    id(0x00000065)
    ]
    HRESULT _stdcall ViewDataGraph( void );
    [
    id(0x00000066)
    ]
    HRESULT _stdcall ViewGaugeStats( void );
    [
    id(0x00000067)
    ]
    HRESULT _stdcall ViewGaugeSelection( void );
    [
    id(0x00000068)
    ]
    HRESULT _stdcall ViewPatchAdmin( void );
    [
    id(0x00000069)
    ]
    HRESULT _stdcall GetMonthlyData([in] BSTR AStationNumber, [in] BSTR APatchName, [out, retval] BSTR * AResult );
    [
    id(0x0000006A)
    ]
    HRESULT _stdcall GetDailyData([in] BSTR AStationNumber, [in] BSTR APatchName, [out, retval] BSTR * AResult );
  };

  [
    uuid(6A35D8B2-EBB6-4998-BE14-CF913F327E4A), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IRainGaugeList: IUnknown
  {
    [
    id(0x00000065)
    ]
    HRESULT _stdcall DeSelectAll( void );
    [
    id(0x00000068)
    ]
    HRESULT _stdcall SelectByDistance([in] double ALatitude, [in] double ALongitude, [in] double ADistance, [in] VARIANT_BOOL AReplaceSelection );
    [
    id(0x00000069)
    ]
    HRESULT _stdcall SelectByRectangle([in] long ALeft, [in] long ATop, [in] long ABottom, [in] long ARight, [in] VARIANT_BOOL AReplaceSelection );
    [
    id(0x0000006A)
    ]
    HRESULT _stdcall SelectByName([in] BSTR AName, [in] VARIANT_BOOL AReplaceSelection );
    [
    id(0x0000006B)
    ]
    HRESULT _stdcall SelectByNumber([in] BSTR ANumber, [in] VARIANT_BOOL AReplaceSelection );
    [
    id(0x0000006C)
    ]
    HRESULT _stdcall TotalCount([out, retval] long * AResult );
    [
    id(0x0000006D)
    ]
    HRESULT _stdcall GetSelectedGauges([out, retval] BSTR * AResult );
    [
    id(0x0000006E)
    ]
    HRESULT _stdcall SelectedCount([out, retval] long * AResult );
    [
    id(0x00000070)
    ]
    HRESULT _stdcall SaveToDB( void );
    [
    id(0x00000071)
    ]
    HRESULT _stdcall SelectByStationID([in] long AGaugeID, [in] VARIANT_BOOL AReplaceSelection );
    [
    id(0x0000006F)
    ]
    HRESULT _stdcall GetGaugeByIndex([in] long AIndex, [out, retval] IRainGauge ** AGauge /*Warning: unable to validate structure name: */ );
    [
    id(0x00000066)
    ]
    HRESULT _stdcall GetGaugeByNumber([in] BSTR ANumber, [out, retval] IRainGauge ** AGauge /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(31933C98-E20E-471C-94EC-292ECB8E633E), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IRainfallData: IUnknown
  {
    [
    propget, 
    id(0x00000065)
    ]
    HRESULT _stdcall StationID([out, retval] long * Value );
    [
    propput, 
    id(0x00000065)
    ]
    HRESULT _stdcall StationID([in] long Value );
    [
    propget, 
    id(0x00000066)
    ]
    HRESULT _stdcall StationNumber([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000066)
    ]
    HRESULT _stdcall StationNumber([in] BSTR Value );
    [
    propget, 
    id(0x00000067)
    ]
    HRESULT _stdcall StartYear([out, retval] long * Value );
    [
    propput, 
    id(0x00000067)
    ]
    HRESULT _stdcall StartYear([in] long Value );
    [
    propget, 
    id(0x00000068)
    ]
    HRESULT _stdcall EndYear([out, retval] long * Value );
    [
    propput, 
    id(0x00000068)
    ]
    HRESULT _stdcall EndYear([in] long Value );
    [
    propget, 
    id(0x00000069)
    ]
    HRESULT _stdcall HydroStartYear([out, retval] long * Value );
    [
    propput, 
    id(0x00000069)
    ]
    HRESULT _stdcall HydroStartYear([in] long Value );
    [
    propget, 
    id(0x0000006A)
    ]
    HRESULT _stdcall HydroEndYear([out, retval] long * Value );
    [
    propput, 
    id(0x0000006A)
    ]
    HRESULT _stdcall HydroEndYear([in] long Value );
    [
    propget, 
    id(0x0000006B)
    ]
    HRESULT _stdcall GrandTotal([out, retval] double * Value );
    [
    propput, 
    id(0x0000006B)
    ]
    HRESULT _stdcall GrandTotal([in] double Value );
    [
    propget, 
    id(0x0000006C)
    ]
    HRESULT _stdcall StdDeviation([out, retval] double * Value );
    [
    propput, 
    id(0x0000006C)
    ]
    HRESULT _stdcall StdDeviation([in] double Value );
    [
    propget, 
    id(0x0000006D)
    ]
    HRESULT _stdcall CV([out, retval] double * Value );
    [
    propput, 
    id(0x0000006D)
    ]
    HRESULT _stdcall CV([in] double Value );
    [
    propget, 
    id(0x0000006E)
    ]
    HRESULT _stdcall MAP([out, retval] double * Value );
    [
    propput, 
    id(0x0000006E)
    ]
    HRESULT _stdcall MAP([in] double Value );
    [
    propget, 
    id(0x0000006F)
    ]
    HRESULT _stdcall NrOfMissingMonths([out, retval] long * Value );
    [
    propput, 
    id(0x0000006F)
    ]
    HRESULT _stdcall NrOfMissingMonths([in] long Value );
    [
    id(0x00000072)
    ]
    HRESULT _stdcall HydroYearsCount([out, retval] long * AResult );
    [
    id(0x00000073)
    ]
    HRESULT _stdcall HydroStartDate([out, retval] DATE * AResult );
    [
    id(0x00000074)
    ]
    HRESULT _stdcall HydroEndDate([out, retval] DATE * AResult );
    [
    id(0x00000076)
    ]
    HRESULT _stdcall GetBaseDataForYearAndMonth([in] long AYear, [in] long AMonth, [in, out] double * ARainfall, [in, out] BSTR * APatchSign );
    [
    propget, 
    id(0x00000077)
    ]
    HRESULT _stdcall XGrandTotal([out, retval] double * Value );
    [
    propput, 
    id(0x00000077)
    ]
    HRESULT _stdcall XGrandTotal([in] double Value );
    [
    propget, 
    id(0x00000078)
    ]
    HRESULT _stdcall XStdDeviation([out, retval] double * Value );
    [
    propput, 
    id(0x00000078)
    ]
    HRESULT _stdcall XStdDeviation([in] double Value );
    [
    propget, 
    id(0x00000079)
    ]
    HRESULT _stdcall XMAP([out, retval] double * Value );
    [
    propput, 
    id(0x00000079)
    ]
    HRESULT _stdcall XMAP([in] double Value );
    [
    propget, 
    id(0x0000007A)
    ]
    HRESULT _stdcall XCV([out, retval] double * Value );
    [
    propput, 
    id(0x0000007A)
    ]
    HRESULT _stdcall XCV([in] double Value );
    [
    propget, 
    id(0x0000007B)
    ]
    HRESULT _stdcall YearMin([out, retval] double * Value );
    [
    propput, 
    id(0x0000007B)
    ]
    HRESULT _stdcall YearMin([in] double Value );
    [
    propget, 
    id(0x0000007C)
    ]
    HRESULT _stdcall YearMax([out, retval] double * Value );
    [
    propput, 
    id(0x0000007C)
    ]
    HRESULT _stdcall YearMax([in] double Value );
    [
    propget, 
    id(0x0000007D)
    ]
    HRESULT _stdcall YearCount([out, retval] long * Value );
    [
    propput, 
    id(0x0000007D)
    ]
    HRESULT _stdcall YearCount([in] long Value );
    [
    propget, 
    id(0x0000007E)
    ]
    HRESULT _stdcall XYearMin([out, retval] double * Value );
    [
    propput, 
    id(0x0000007E)
    ]
    HRESULT _stdcall XYearMin([in] double Value );
    [
    propget, 
    id(0x0000007F)
    ]
    HRESULT _stdcall XYearMax([out, retval] double * Value );
    [
    propput, 
    id(0x0000007F)
    ]
    HRESULT _stdcall XYearMax([in] double Value );
    [
    propget, 
    id(0x00000080)
    ]
    HRESULT _stdcall XYearCount([out, retval] long * Value );
    [
    propput, 
    id(0x00000080)
    ]
    HRESULT _stdcall XYearCount([in] long Value );
    [
    propget, 
    id(0x00000081)
    ]
    HRESULT _stdcall MonthMax([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000081)
    ]
    HRESULT _stdcall MonthMax([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000082)
    ]
    HRESULT _stdcall MonthMin([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000082)
    ]
    HRESULT _stdcall MonthMin([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000083)
    ]
    HRESULT _stdcall MonthCount([in] long AMonth, [out, retval] long * Value );
    [
    propput, 
    id(0x00000083)
    ]
    HRESULT _stdcall MonthCount([in] long AMonth, [in] long Value );
    [
    propget, 
    id(0x00000084)
    ]
    HRESULT _stdcall MonthTotal([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000084)
    ]
    HRESULT _stdcall MonthTotal([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000085)
    ]
    HRESULT _stdcall MonthMAP([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000085)
    ]
    HRESULT _stdcall MonthMAP([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000086)
    ]
    HRESULT _stdcall MonthStdDev([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000086)
    ]
    HRESULT _stdcall MonthStdDev([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000087)
    ]
    HRESULT _stdcall MonthCV([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000087)
    ]
    HRESULT _stdcall MonthCV([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000088)
    ]
    HRESULT _stdcall XMonthMin([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000088)
    ]
    HRESULT _stdcall XMonthMin([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000089)
    ]
    HRESULT _stdcall XMonthMax([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x00000089)
    ]
    HRESULT _stdcall XMonthMax([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000008A)
    ]
    HRESULT _stdcall XMonthTotal([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000008A)
    ]
    HRESULT _stdcall XMonthTotal([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000008B)
    ]
    HRESULT _stdcall XMonthMAP([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000008B)
    ]
    HRESULT _stdcall XMonthMAP([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000008C)
    ]
    HRESULT _stdcall XMonthStdDev([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000008C)
    ]
    HRESULT _stdcall XMonthStdDev([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x0000008D)
    ]
    HRESULT _stdcall XMonthCount([in] long AMonth, [out, retval] long * Value );
    [
    propput, 
    id(0x0000008D)
    ]
    HRESULT _stdcall XMonthCount([in] long AMonth, [in] long Value );
    [
    propget, 
    id(0x0000008E)
    ]
    HRESULT _stdcall XMonthCV([in] long AMonth, [out, retval] double * Value );
    [
    propput, 
    id(0x0000008E)
    ]
    HRESULT _stdcall XMonthCV([in] long AMonth, [in] double Value );
    [
    propget, 
    id(0x00000070)
    ]
    HRESULT _stdcall HighlightMonths([out, retval] BSTR * Value );
    [
    propget, 
    id(0x00000071)
    ]
    HRESULT _stdcall HighlightYears([out, retval] BSTR * Value );
    [
    id(0x00000090)
    ]
    HRESULT _stdcall GetHydroYearDataByIndex([in] long AIndex, [out, retval] IYearlyData ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x00000075)
    ]
    HRESULT _stdcall GetHydroYearDataByYear([in] long AYear, [out, retval] IYearlyData ** AValue /*Warning: unable to validate structure name: */ );
  };

  [
    uuid(B8B45193-F069-46BC-B233-590E95E1B1E1), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IPatchData: IUnknown
  {
    [
    propget, 
    id(0x00000083)
    ]
    HRESULT _stdcall PatchID([out, retval] long * Value );
    [
    propput, 
    id(0x00000083)
    ]
    HRESULT _stdcall PatchID([in] long Value );
    [
    propget, 
    id(0x00000084)
    ]
    HRESULT _stdcall PatchTypeID([out, retval] long * Value );
    [
    propput, 
    id(0x00000084)
    ]
    HRESULT _stdcall PatchTypeID([in] long Value );
    [
    propget, 
    id(0x00000085)
    ]
    HRESULT _stdcall PatchName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000085)
    ]
    HRESULT _stdcall PatchName([in] BSTR Value );
    [
    propget, 
    id(0x00000086)
    ]
    HRESULT _stdcall PatchMultiple([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000086)
    ]
    HRESULT _stdcall PatchMultiple([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x00000087)
    ]
    HRESULT _stdcall ClassRInputFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000087)
    ]
    HRESULT _stdcall ClassRInputFileName([in] BSTR Value );
    [
    propget, 
    id(0x00000088)
    ]
    HRESULT _stdcall ClassROutputFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000088)
    ]
    HRESULT _stdcall ClassROutputFileName([in] BSTR Value );
    [
    propget, 
    id(0x00000089)
    ]
    HRESULT _stdcall PatchRInputFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000089)
    ]
    HRESULT _stdcall PatchRInputFileName([in] BSTR Value );
    [
    propget, 
    id(0x0000008A)
    ]
    HRESULT _stdcall PatchRPrintFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000008A)
    ]
    HRESULT _stdcall PatchRPrintFileName([in] BSTR Value );
    [
    propget, 
    id(0x0000008B)
    ]
    HRESULT _stdcall PatchRPlotFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000008B)
    ]
    HRESULT _stdcall PatchRPlotFileName([in] BSTR Value );
    [
    propget, 
    id(0x0000008C)
    ]
    HRESULT _stdcall PatchStartYear([out, retval] long * Value );
    [
    propput, 
    id(0x0000008C)
    ]
    HRESULT _stdcall PatchStartYear([in] long Value );
    [
    propget, 
    id(0x0000008D)
    ]
    HRESULT _stdcall PatchEndYear([out, retval] long * Value );
    [
    propput, 
    id(0x0000008D)
    ]
    HRESULT _stdcall PatchEndYear([in] long Value );
    [
    propget, 
    id(0x0000008E)
    ]
    HRESULT _stdcall ClassRInputData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000008E)
    ]
    HRESULT _stdcall ClassRInputData([in] BSTR Value );
    [
    propget, 
    id(0x0000008F)
    ]
    HRESULT _stdcall ClassROutputData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000008F)
    ]
    HRESULT _stdcall ClassROutputData([in] BSTR Value );
    [
    propget, 
    id(0x00000090)
    ]
    HRESULT _stdcall PatchRPrintData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000090)
    ]
    HRESULT _stdcall PatchRPrintData([in] BSTR Value );
    [
    propget, 
    id(0x00000091)
    ]
    HRESULT _stdcall PatchRPlotData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000091)
    ]
    HRESULT _stdcall PatchRPlotData([in] BSTR Value );
    [
    propget, 
    id(0x00000092)
    ]
    HRESULT _stdcall ChangeDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000092)
    ]
    HRESULT _stdcall ChangeDate([in] DATE Value );
    [
    propget, 
    id(0x00000093)
    ]
    HRESULT _stdcall ClassRDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000093)
    ]
    HRESULT _stdcall ClassRDate([in] DATE Value );
    [
    propget, 
    id(0x00000094)
    ]
    HRESULT _stdcall PatchRInputDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000094)
    ]
    HRESULT _stdcall PatchRInputDate([in] DATE Value );
    [
    propget, 
    id(0x00000095)
    ]
    HRESULT _stdcall PatchROutputDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000095)
    ]
    HRESULT _stdcall PatchROutputDate([in] DATE Value );
    [
    propget, 
    id(0x00000096)
    ]
    HRESULT _stdcall PatchRPrintDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000096)
    ]
    HRESULT _stdcall PatchRPrintDate([in] DATE Value );
    [
    propget, 
    id(0x00000097)
    ]
    HRESULT _stdcall PatchRPlotDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000097)
    ]
    HRESULT _stdcall PatchRPlotDate([in] DATE Value );
    [
    propget, 
    id(0x00000098)
    ]
    HRESULT _stdcall PatchRInputData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000098)
    ]
    HRESULT _stdcall PatchRInputData([in] BSTR Value );
    [
    propget, 
    id(0x00000099)
    ]
    HRESULT _stdcall PatchROutputData([out, retval] BSTR * Value );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall SourcesCount([out, retval] long * AResult );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall GetSourceInfoByIndex([in] long AIndex, [out] long * AStationID, [out] long * APatchID, [out] BSTR * ATarget, [out] long * AStartYear, [out] long * AEndYear );
    [
    id(0x000000CB)
    ]
    HRESULT _stdcall DeleteMonthlyPatchData( void );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall SavePatchROutputData([in] long AStationID, [in] BSTR AValue );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall SavePATFile([in] long AStartYear, [in] long AEndYear, [in] BSTR ADirectory );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall SourceInfo([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall SourceInfo([in] BSTR Value );
    [
    id(0x00000066)
    ]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR * AKeyValues );
    [
    id(0x00000067)
    ]
    HRESULT _stdcall GetSourceInfoByStationID([in] long AStationID, [out] long * APatchID, [out] BSTR * ATarget, [out] long * AStartYear, [out] long * AEndYear );
    [
    id(0x00000068)
    ]
    HRESULT _stdcall SaveRAWFile([in] long AStartYear, [in] long AEndYear, [in] BSTR ADirectory );
    [
    id(0x00000069)
    ]
    HRESULT _stdcall SaveMPFile([in] long AStartYear, [in] long AEndYear, [in] BSTR ADirectory );
    [
    id(0x0000006A)
    ]
    HRESULT _stdcall Get_PatchScaledDownStatus([in] long AStationID, [in] long APatchID, [in] long AYear, [in] long AMonth, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x0000006B)
    ]
    HRESULT _stdcall Set_PatchScaledDownStatus([in] long AStationID, [in] long APatchID, [in] long AYear, [in] long AMonth, [in] VARIANT_BOOL AStatus, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x0000006C)
    ]
    HRESULT _stdcall Save_PatchScaledDownStatus([in] long AStationID, [in] long APatchID, [in] long AYear, [in] long AMonth, [in] long AIdentifier, [in] VARIANT_BOOL AStatus, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000065)
    ]
    HRESULT _stdcall RainfallData([out, retval] IRainfallData ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x0000006D)
    ]
    HRESULT _stdcall PopulateCommonBlockRAWData([in] long AStartYear, [in] long AEndYear, [in] long AGaugeIndex, [in] long AAddIndex, [in, out] long * ABEGY, [in, out] long * AENDY, [out, retval] VARIANT_BOOL * AResult );
  };

  [
    uuid(AD7FA5A8-B76D-48FE-82C8-B46707030330), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IStationData: IUnknown
  {
    [
    propget, 
    id(0x00000083)
    ]
    HRESULT _stdcall StationName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000083)
    ]
    HRESULT _stdcall StationName([in] BSTR Value );
    [
    propget, 
    id(0x00000084)
    ]
    HRESULT _stdcall Latitude([out, retval] long * Value );
    [
    propput, 
    id(0x00000084)
    ]
    HRESULT _stdcall Latitude([in] long Value );
    [
    propget, 
    id(0x00000085)
    ]
    HRESULT _stdcall Longitude([out, retval] long * Value );
    [
    propput, 
    id(0x00000085)
    ]
    HRESULT _stdcall Longitude([in] long Value );
    [
    propget, 
    id(0x00000086)
    ]
    HRESULT _stdcall Height([out, retval] long * Value );
    [
    propput, 
    id(0x00000086)
    ]
    HRESULT _stdcall Height([in] long Value );
    [
    propget, 
    id(0x00000087)
    ]
    HRESULT _stdcall StationType([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000087)
    ]
    HRESULT _stdcall StationType([in] BSTR Value );
    [
    propget, 
    id(0x00000088)
    ]
    HRESULT _stdcall IsInWR90([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000088)
    ]
    HRESULT _stdcall IsInWR90([in] VARIANT_BOOL Value );
    [
    id(0x0000008A)
    ]
    HRESULT _stdcall DeletePatchWithID([in] long APatchID, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000C9)
    ]
    HRESULT _stdcall LoadMonthlyData( void );
    [
    id(0x000000CA)
    ]
    HRESULT _stdcall PatchCount([out, retval] long * AResult );
    [
    id(0x000000CC)
    ]
    HRESULT _stdcall LatLong([in, out] BSTR * ALat, [in, out] BSTR * ALong );
    [
    id(0x000000CD)
    ]
    HRESULT _stdcall IsPartOfZone([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000CE)
    ]
    HRESULT _stdcall HasACreatedPatch([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall IsAPatchSource([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall MayBeDeleted([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x00000066)
    ]
    HRESULT _stdcall GetKeyValues([in] BSTR AParamField, [in] BSTR AFieldIndex, [out, retval] BSTR * AKeyValues );
    [
    id(0x00000069)
    ]
    HRESULT _stdcall SplitCount([out, retval] long * AResult );
    [
    id(0x0000006A)
    ]
    HRESULT _stdcall SaveRAWFile([in] long AStartYear, [in] long AEndYear, [in] BSTR ADirectory );
    [
    id(0x0000006B)
    ]
    HRESULT _stdcall SaveMPFile([in] long AStartYear, [in] long AEndYear, [in] BSTR ADirectory );
    [
    id(0x0000006C)
    ]
    HRESULT _stdcall MayDeleteSplit([in] long AStartYear, [in] long AEndYear, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x0000006D)
    ]
    HRESULT _stdcall RecalculateStatistics( void );
    [
    id(0x0000006E)
    ]
    HRESULT _stdcall RepopulateHighlights( void );
    [
    id(0x0000006F)
    ]
    HRESULT _stdcall GetPatchWithID([in] long APatchID, [out, retval] IPatchData ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x00000070)
    ]
    HRESULT _stdcall GetPatchWithIndex([in] long AIndex, [out, retval] IPatchData ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x00000067)
    ]
    HRESULT _stdcall GetSplitWithIndex([in] long AIndex, [out, retval] IRainfallDataSplit ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x00000068)
    ]
    HRESULT _stdcall GetSplitForYears([in] long AStartYear, [in] long AEndYear, [out, retval] IRainfallDataSplit ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x00000065)
    ]
    HRESULT _stdcall RainfallData([out, retval] IRainfallData ** AResult /*Warning: unable to validate structure name: */ );
    [
    id(0x00000071)
    ]
    HRESULT _stdcall PopulateCommonBlockRAWData([in] long AStartYear, [in] long AEndYear, [in] long AGaugeIndex, [in] long AAddIndex, [in, out] long * ABEGY, [in, out] long * AENDY, [out, retval] VARIANT_BOOL * AResult );
  };

  [
    uuid(ADBAB5AE-3263-4B38-A713-4116D3912A07), 
    version(1.0), 
    dual, 
    oleautomation
  ]
   interface IRainfallModelData: IUnknown
  {
    [
    propget, 
    id(0x000000C9)
    ]
    HRESULT _stdcall DefaultDir([out, retval] BSTR * Value );
    [
    propput, 
    id(0x000000C9)
    ]
    HRESULT _stdcall DefaultDir([in] BSTR Value );
    [
    propget, 
    id(0x000000CA)
    ]
    HRESULT _stdcall CurrentStationID([out, retval] long * Value );
    [
    propput, 
    id(0x000000CA)
    ]
    HRESULT _stdcall CurrentStationID([in] long Value );
    [
    propget, 
    id(0x000000CE)
    ]
    HRESULT _stdcall CurrentPatchID([out, retval] long * Value );
    [
    propput, 
    id(0x000000CE)
    ]
    HRESULT _stdcall CurrentPatchID([in] long Value );
    [
    id(0x000000CF)
    ]
    HRESULT _stdcall SaveRAWDataFiles([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D0)
    ]
    HRESULT _stdcall SaveMPDataFiles([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D1)
    ]
    HRESULT _stdcall LoadData([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D2)
    ]
    HRESULT _stdcall CreateAPatch([in] long APatchTypeID, [in] long AStationID, [in] BSTR ADescription, [in] long AStartYear, [in] long AEndYear, [out, retval] long * APatchID );
    [
    id(0x000000D3)
    ]
    HRESULT _stdcall DeleteAPatch([in] long APatchID, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D4)
    ]
    HRESULT _stdcall ModifyPatchDescription([in] long AStationID, [in] long APatchID, [in] BSTR ANewDescr, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D5)
    ]
    HRESULT _stdcall AddToPatch([in] long AStationID, [in] long APatchID, [in] long ASourceStationID, [in] long ASourcePatchID, [in] long AStartYear, [in] long AEndYear, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x000000D6)
    ]
    HRESULT _stdcall RemoveFromPatch([in] long APatchID, [in] long ASourceStationID, [in] long ASourcePatchID, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x00000065)
    ]
    HRESULT _stdcall LoadMonthlyData([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x00000066)
    ]
    HRESULT _stdcall CreateReport([out, retval] BSTR * AReport );
    [
    propget, 
    id(0x00000067)
    ]
    HRESULT _stdcall StationCount([out, retval] long * AResult );
    [
    id(0x00000068)
    ]
    HRESULT _stdcall GetDailyDataByMonthAndYear([in] long AStationID, [in] long APatchID, [in] long AMonth, [in] long AYear, [out, retval] BSTR * AData );
    [
    propget, 
    id(0x00000069)
    ]
    HRESULT _stdcall HydroStartMonth([out, retval] long * Value );
    [
    propput, 
    id(0x00000069)
    ]
    HRESULT _stdcall HydroStartMonth([in] long Value );
    [
    id(0x0000006A)
    ]
    HRESULT _stdcall LatLong([in] BSTR AStationNumber, [in, out] double * ALat, [in, out] double * ALong );
    [
    id(0x0000006B)
    ]
    HRESULT _stdcall GetZoneStations([out, retval] BSTR * AResult );
    [
    id(0x0000006C)
    ]
    HRESULT _stdcall GetZoneCount([out, retval] long * AResult );
    [
    id(0x0000006D)
    ]
    HRESULT _stdcall AddToRainfallZone([in] long AStationID, [in] long APatchID, [in] long AStartYear, [in] long AEndYear, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x0000006E)
    ]
    HRESULT _stdcall RemoveFromRainfallZone([in] long AStationID, [in] long APatchID, [out, retval] VARIANT_BOOL * AResult );
    [
    propget, 
    id(0x0000006F)
    ]
    HRESULT _stdcall CatchmentFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000006F)
    ]
    HRESULT _stdcall CatchmentFileName([in] BSTR Value );
    [
    propget, 
    id(0x00000070)
    ]
    HRESULT _stdcall ZoneChangeDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000070)
    ]
    HRESULT _stdcall ZoneChangeDate([in] DATE Value );
    [
    propget, 
    id(0x00000071)
    ]
    HRESULT _stdcall ZoneRunDate([out, retval] DATE * Value );
    [
    propput, 
    id(0x00000071)
    ]
    HRESULT _stdcall ZoneRunDate([in] DATE Value );
    [
    propget, 
    id(0x00000072)
    ]
    HRESULT _stdcall OutputFileName([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000072)
    ]
    HRESULT _stdcall OutputFileName([in] BSTR Value );
    [
    propget, 
    id(0x00000073)
    ]
    HRESULT _stdcall CatchmentFileData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000073)
    ]
    HRESULT _stdcall CatchmentFileData([in] BSTR Value );
    [
    propget, 
    id(0x00000074)
    ]
    HRESULT _stdcall OutputFileData([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000074)
    ]
    HRESULT _stdcall OutputFileData([in] BSTR Value );
    [
    propget, 
    id(0x00000075)
    ]
    HRESULT _stdcall RAWFlags([out, retval] BSTR * Value );
    [
    propput, 
    id(0x00000075)
    ]
    HRESULT _stdcall RAWFlags([in] BSTR Value );
    [
    id(0x00000076)
    ]
    HRESULT _stdcall CreateASplit([in] long AStationID, [in] long AStartYear, [in] long AEndYear, [out, retval] VARIANT_BOOL * AResult );
    [
    id(0x00000077)
    ]
    HRESULT _stdcall DeleteASplit([in] long AStationID, [in] long AStartYear, [in] long AEndYear, [out, retval] VARIANT_BOOL * AResult );
    [
    propget, 
    id(0x00000078)
    ]
    HRESULT _stdcall CurrentSplitIndex([out, retval] long * Value );
    [
    propput, 
    id(0x00000078)
    ]
    HRESULT _stdcall CurrentSplitIndex([in] long Value );
    [
    propget, 
    id(0x00000079)
    ]
    HRESULT _stdcall PatchRStationID([out, retval] long * Value );
    [
    propput, 
    id(0x00000079)
    ]
    HRESULT _stdcall PatchRStationID([in] long Value );
    [
    propget, 
    id(0x0000007A)
    ]
    HRESULT _stdcall PatchRSplitIndex([out, retval] long * Value );
    [
    propput, 
    id(0x0000007A)
    ]
    HRESULT _stdcall PatchRSplitIndex([in] long Value );
    [
    propget, 
    id(0x0000007B)
    ]
    HRESULT _stdcall PatchRPatchID([out, retval] long * Value );
    [
    propput, 
    id(0x0000007B)
    ]
    HRESULT _stdcall PatchRPatchID([in] long Value );
    [
    propget, 
    id(0x0000007C)
    ]
    HRESULT _stdcall HighlightWetSeasonZeros([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x0000007C)
    ]
    HRESULT _stdcall HighlightWetSeasonZeros([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x0000007D)
    ]
    HRESULT _stdcall WetSeasonMonths([out, retval] BSTR * Value );
    [
    propput, 
    id(0x0000007D)
    ]
    HRESULT _stdcall WetSeasonMonths([in] BSTR Value );
    [
    propget, 
    id(0x0000007E)
    ]
    HRESULT _stdcall HighlightMonthlyGreaterThanProportion([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x0000007E)
    ]
    HRESULT _stdcall HighlightMonthlyGreaterThanProportion([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x0000007F)
    ]
    HRESULT _stdcall MonthlyGreaterThanProportionValue([out, retval] double * Value );
    [
    propput, 
    id(0x0000007F)
    ]
    HRESULT _stdcall MonthlyGreaterThanProportionValue([in] double Value );
    [
    propget, 
    id(0x00000080)
    ]
    HRESULT _stdcall HighlightAnnualGreaterThanAverage([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000080)
    ]
    HRESULT _stdcall HighlightAnnualGreaterThanAverage([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x00000081)
    ]
    HRESULT _stdcall HighlightAnnualLessThanAverage([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000081)
    ]
    HRESULT _stdcall HighlightAnnualLessThanAverage([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x00000082)
    ]
    HRESULT _stdcall HighlightMonthlyGreaterThanAbsolute([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000082)
    ]
    HRESULT _stdcall HighlightMonthlyGreaterThanAbsolute([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x00000083)
    ]
    HRESULT _stdcall MonthlyGreaterThanAbsoluteValue([out, retval] double * Value );
    [
    propput, 
    id(0x00000083)
    ]
    HRESULT _stdcall MonthlyGreaterThanAbsoluteValue([in] double Value );
    [
    propget, 
    id(0x00000084)
    ]
    HRESULT _stdcall HighlightRoundedValues([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000084)
    ]
    HRESULT _stdcall HighlightRoundedValues([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x00000085)
    ]
    HRESULT _stdcall HighlightRepeatingValues([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000085)
    ]
    HRESULT _stdcall HighlightRepeatingValues([in] VARIANT_BOOL Value );
    [
    propget, 
    id(0x00000086)
    ]
    HRESULT _stdcall IncludeUnreliableData([out, retval] VARIANT_BOOL * Value );
    [
    propput, 
    id(0x00000086)
    ]
    HRESULT _stdcall IncludeUnreliableData([in] VARIANT_BOOL Value );
    [
    id(0x00000087)
    ]
    HRESULT _stdcall SaveProjectGauges([out, retval] VARIANT_BOOL * AResult );
    [
    id(0x00000088)
    ]
    HRESULT _stdcall UpdateSplit([in] long AStationID, [in] long AOldStartYear, [in] long AStartYear, [in] long AOldEndYear, [in] long AEndYear, [out, retval] VARIANT_BOOL * Value );
    [
    id(0x00000089)
    ]
    HRESULT _stdcall GetStationDataByNumber([in] BSTR ANumber, [out, retval] IStationData ** AStation /*Warning: unable to validate structure name: */ );
    [
    id(0x0000008A)
    ]
    HRESULT _stdcall GetStationDataByID([in] long AStationID, [out, retval] IStationData ** AStation /*Warning: unable to validate structure name: */ );
    [
    id(0x0000008B)
    ]
    HRESULT _stdcall GetStationDataByIndex([in] long AIndex, [out, retval] IStationData ** AStation /*Warning: unable to validate structure name: */ );
    [
    id(0x0000008C)
    ]
    HRESULT _stdcall GaugeList([out, retval] IRainGaugeList ** AResult /*Warning: unable to validate structure name: */ );
  };

}; 